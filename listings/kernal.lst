ASM6502        PROGRAM LISTING AND SYMBOL TABLE        DATE: 2023-04-25 14:07

MAIN INPUT FILE: kernal.a65

 Line# FPos PC    Code           Source
 FILE: disclaim.a65
    1:                          ;****************************************
    2:                          ;*                                      *
    3:                          ;* KK  K EEEEE RRRR  NN  N  AAA  LL     *
    4:                          ;* KK KK EE    RR  R NNN N AA  A LL     *
    5:                          ;* KKK   EE    RR  R NNN N AA  A LL     *
    6:                          ;* KKK   EEEE  RRRR  NNNNN AAAAA LL     *
    7:                          ;* KK K  EE    RR  R NN NN AA  A LL     *
    8:                          ;* KK KK EE    RR  R NN NN AA  A LL     *
    9:                          ;* KK KK EEEEE RR  R NN NN AA  A LLLLL  *
   10:                          ;*                                      *
   11:                          ;***************************************
   12:                          ;
   13:                          ;***************************************
   14:                          ;* C64 KERNAL                          *
   15:                          ;*   MEMORY AND I/O DEPENDENT ROUTINES *
   16:                          ;* DRIVING THE HARDWARE OF THE         *
   17:                          ;* FOLLOWING CBM MODELS:               *
   18:                          ;*   COMMODORE 64 (NTSC OR PAL VIDEO)  *
   19:                          ;* COPYRIGHT (C) 1983 BY               *
   20:                          ;* COMMODORE BUSINESS MACHINES (CBM)   *
   21:                          ;***************************************
   22:                          
   23:                          ;****LISTING DATE --1200 05 AUG  1983***
   24:                          
   25:                          ;***************************************
   26:                          ;* THIS SOFTWARE IS FURNISHED FOR USE  *
   27:                          ;* USE IN THE VIC OR COMMODORE COMPUTER*
   28:                          ;* SERIES ONLY.                        *
   29:                          ;*                                     *
   30:                          ;* COPIES THEREOF MAY NOT BE PROVIDED  *
   31:                          ;* OR MADE AVAILABLE FOR USE ON ANY    *
   32:                          ;* OTHER SYSTEM.                       *
   33:                          ;*                                     *
   34:                          ;* THE INFORMATION IN THIS DOCUMENT IS *
   35:                          ;* SUBJECT TO CHANGE WITHOUT NOTICE.   *
   36:                          ;*                                     *
   37:                          ;* NO RESPONSIBILITY IS ASSUMED FOR    *
   38:                          ;* RELIABILITY OF THIS SOFTWARE. RSR   *
   39:                          ;*                                     *
   40:                          ;***************************************
   41:                          
 FILE: kernal.a65
 FILE: declare.a65
    1:                          
    2:                          	.org $0000         ;DECLARE 6510 PORTS
    3:                          D6510	.org @+1           ;6510 DATA DIRECTION REGISTER
    4:                          R6510	.org @+1           ;6510 DATA REGISTER
    5:                          	.org $0002         ;MISS 6510 REGS
    6:                          ;VIRTUAL REGS FOR MACHINE LANGUAGE MONITOR
    7:                          PCH	.org @+1
    8:                          PCL	.org @+1
    9:                          FLGS	.org @+1
   10:                          ACC	.org @+1
   11:                          XR	.org @+1
   12:                          YR	.org @+1
   13:                          SP	.org @+1
   14:                          INVH	.org @+1           ;USER MODIFIABLE IRQ
   15:                          INVL	.org @+1
   16:                          
   17:                          	.org $90
   18:                          STATUS	.org @+1           ;I/O OPERATION STATUS BYTE
   19:                          ; CRFAC .org @+2 ;CORRECTION FACTOR (UNUSED)
   20:                          STKEY	.org @+1           ;STOP KEY FLAG
   21:                          SVXT	.org @+1           ;TEMPORARY
   22:                          VERCK	.org @+1           ;LOAD OR VERIFY FLAG
   23:                          C3P0	.org @+1           ;IEEE BUFFERED CHAR FLAG
   24:                          BSOUR	.org @+1           ;CHAR BUFFER FOR IEEE
   25:                          SYNO	.org @+1           ;CASSETTE SYNC #
   26:                          XSAV	.org @+1           ;TEMP FOR BASIN
   27:                          LDTND	.org @+1           ;INDEX TO LOGICAL FILE
   28:                          DFLTN	.org @+1           ;DEFAULT INPUT DEVICE #
   29:                          DFLTO	.org @+1           ;DEFAULT OUTPUT DEVICE #
   30:                          PRTY	.org @+1           ;CASSETTE PARITY
   31:                          DPSW	.org @+1           ;CASSETTE DIPOLE SWITCH
   32:                          MSGFLG	.org @+1           ;OS MESSAGE FLAG
   33:                          PTR1	;CASSETTE ERROR PASS1
   34:                          T1	.org @+1           ;TEMPORARY 1
   35:                          TMPC
   36:                          PTR2	;CASSETTE ERROR PASS2
   37:                          T2	.org @+1           ;TEMPORARY 2
   38:                          TIME	.org @+3           ;24 HOUR CLOCK IN 1/60TH SECONDS
   39:                          R2D2	;SERIAL BUS USAGE
   40:                          PCNTR	.org @+1           ;CASSETTE STUFF
   41:                          ; PTCH .org @+1  (UNUSED)
   42:                          BSOUR1	;TEMP USED BY SERIAL ROUTINE
   43:                          FIRT	.org @+1
   44:                          COUNT	;TEMP USED BY SERIAL ROUTINE
   45:                          CNTDN	.org @+1           ;CASSETTE SYNC COUNTDOWN
   46:                          BUFPT	.org @+1           ;CASSETTE BUFFER POINTER
   47:                          INBIT	;RS-232 RCVR INPUT BIT STORAGE
   48:                          SHCNL	.org @+1           ;CASSETTE SHORT COUNT
   49:                          BITCI	;RS-232 RCVR BIT COUNT IN
   50:                          RER	.org @+1           ;CASSETTE READ ERROR
   51:                          RINONE	;RS-232 RCVR FLAG FOR START BIT CHECK
   52:                          REZ	.org @+1           ;CASSETE READING ZEROES
   53:                          RIDATA	;RS-232 RCVR BYTE BUFFER
   54:                          RDFLG	.org @+1           ;CASSETTE READ MODE
   55:                          RIPRTY	;RS-232 RCVR PARITY STORAGE
   56:                          SHCNH	.org @+1           ;CASSETTE SHORT CNT
   57:                          SAL	.org @+1
   58:                          SAH	.org @+1
   59:                          EAL	.org @+1
   60:                          EAH	.org @+1
   61:                          CMP0	.org @+1
   62:                          TEMP	.org @+1
   63:                          TAPE1	.org @+2           ;ADDRESS OF TAPE BUFFER #1Y.
   64:                          BITTS	;RS-232 TRNS BIT COUNT
   65:                          SNSW1	.org @+1
   66:                          NXTBIT	;RS-232 TRNS NEXT BIT TO BE SENT
   67:                          DIFF	.org @+1
   68:                          RODATA	;RS-232 TRNS BYTE BUFFER
   69:                          PRP	.org @+1
   70:                          FNLEN	.org @+1           ;LENGTH CURRENT FILE N STR
   71:                          LA	.org @+1           ;CURRENT FILE LOGICAL ADDR
   72:                          SA	.org @+1           ;CURRENT FILE 2ND ADDR
   73:                          FA	.org @+1           ;CURRENT FILE PRIMARY ADDR
   74:                          FNADR	.org @+2           ;ADDR CURRENT FILE NAME STR
   75:                          ROPRTY	;RS-232 TRNS PARITY BUFFER
   76:                          OCHAR	.org @+1
   77:                          FSBLK	.org @+1           ;CASSETTE READ BLOCK COUNT
   78:                          MYCH	.org @+1
   79:                          CAS1	.org @+1           ;CASSETTE MANUAL/CONTROLLED SWITCH
   80:                          TMP0
   81:                          STAL	.org @+1
   82:                          STAH	.org @+1
   83:                          MEMUSS	;CASSETTE LOAD TEMPS (2 BYTES)
   84:                          TMP2	.org @+2
   85:                          ;
   86:                          ;VARIABLES FOR SCREEN EDITOR
   87:                          ;
   88:                          LSTX	.org @+1           ;KEY SCAN INDEX
   89:                          ; SFST .org @+1 ;KEYBOARD SHIFT FLAG (UNUSED)
   90:                          NDX	.org @+1           ;INDEX TO KEYBOARD Q
   91:                          RVS	.org @+1           ;RVS FIELD ON FLAG
   92:                          INDX	.org @+1
   93:                          LSXP	.org @+1           ;X POS AT START
   94:                          LSTP	.org @+1
   95:                          SFDX	.org @+1           ;SHIFT MODE ON PRINT
   96:                          BLNSW	.org @+1           ;CURSOR BLINK ENAB
   97:                          BLNCT	.org @+1           ;COUNT TO TOGGLE CUR
   98:                          GDBLN	.org @+1           ;CHAR BEFORE CURSOR
   99:                          BLNON	.org @+1           ;ON/OFF BLINK FLAG
  100:                          CRSW	.org @+1           ;INPUT VS GET FLAG
  101:                          PNT	.org @+2           ;POINTER TO ROW
  102:                          ; POINT .org @+1   (UNUSED)
  103:                          PNTR	.org @+1           ;POINTER TO COLUMN
  104:                          QTSW	.org @+1           ;QUOTE SWITCH
  105:                          LNMX	.org @+1           ;40/80 MAX POSITON
  106:                          TBLX	.org @+1
  107:                          DATA	.org @+1
  108:                          INSRT	.org @+1           ;INSERT MODE FLAG
  109:                          LDTB1	.org @+26          ;LINE FLAGS+ENDSPACE
  110:                          USER	.org @+2           ;SCREEN EDITOR COLOR IP
  111:                          KEYTAB	.org @+2           ;KEYSCAN TABLE INDIRECT
  112:                          ;RS-232 Z-PAGE
  113:                          RIBUF	.org @+2           ;RS-232 INPUT BUFFER POINTER
  114:                          ROBUF	.org @+2           ;RS-232 OUTPUT BUFFER POINTER
  115:                          FREKZP	.org @+4           ;FREE KERNAL ZERO PAGE 9/24/80
  116:                          BASZPT	.org @+1           ;LOCATION ($00FF) USED BY BASIC
  117:                          
  118:                          	.org $100 
  119:                          BAD	.org @+1
  120:                          	.org $200
  121:                          BUF	.org @+89          ;BASIC/MONITOR BUFFER
  122:                          
  123:                          ; TABLES FOR OPEN FILES
  124:                          ;
  125:                          LAT	.org @+10          ;LOGICAL FILE NUMBERS
  126:                          FAT	.org @+10          ;PRIMARY DEVICE NUMBERS
  127:                          SAT	.org @+10          ;SECONDARY ADDRESSES
  128:                          
  129:                          ; SYSTEM STORAGE
  130:                          ;
  131:                          KEYD	.org @+10          ;IRQ KEYBOARD BUFFER
  132:                          MEMSTR	.org @+2           ;START OF MEMORY
  133:                          MEMSIZ	.org @+2           ;TOP OF MEMORY
  134:                          TIMOUT	.org @+1           ;IEEE TIMEOUT FLAG
  135:                          
  136:                          ; SCREEN EDITOR STORAGE
  137:                          ;
  138:                          COLOR	.org @+1           ;ACTIV COLOR NYBBLE
  139:                          GDCOL	.org @+1           ;ORIGINAL COLOR BEFORE CURSOR
  140:                          HIBASE	.org @+1           ;BASE LOCATION OF SCREEN (TOP)
  141:                          XMAX	.org @+1
  142:                          RPTFLG	.org @+1           ;KEY REPEAT FLAG
  143:                          KOUNT	.org @+1
  144:                          DELAY	.org @+1
  145:                          SHFLAG	.org @+1           ;SHIFT FLAG BYTE
  146:                          LSTSHF	.org @+1           ;LAST SHIFT PATTERN
  147:                          KEYLOG	.org @+2           ;INDIRECT FOR KEYBOARD TABLE SETUP
  148:                          MODE	.org @+1           ;0-PET MODE, 1-CATTACANNA
  149:                          AUTODN	.org @+1           ;AUTO SCROLL DOWN FLAG(=0 ON,<>0 OFF)
  150:                          
  151:                          ; RS-232 STORAGE
  152:                          ;
  153:                          M51CTR	.org @+1           ;6551 CONTROL REGISTER
  154:                          M51CDR	.org @+1           ;6551 COMMAND REGISTER
  155:                          M51AJB	.org @+2           ;NON STANDARD (BITTIME/2-100)
  156:                          RSSTAT	.org @+1           ; RS-232 STATUS REGISTER
  157:                          BITNUM	.org @+1           ;NUMBER OF BITS TO SEND (FAST RESPONSE)
  158:                          BAUDOF	.org @+2           ;BAUD RATE FULL BIT TIME (CREATED BY OPEN)
  159:                          ;
  160:                          ; RECIEVER STORAGE
  161:                          ;
  162:                          ; INBIT .org @+1 ;INPUT BIT STORAGE
  163:                          ; BITCI .org @+1 ;BIT COUNT IN
  164:                          ; RINONE .org @+1 ;FLAG FOR START BIT CHECK
  165:                          ; RIDATA .org @+1 ;BYTE IN BUFFER
  166:                          ; RIPRTY .org @+1 ;BYTE IN PARITY STORAGE
  167:                          RIDBE	.org @+1           ;INPUT BUFFER INDEX TO END
  168:                          RIDBS	.org @+1           ;INPUT BUFFER POINTER TO START
  169:                          ;
  170:                          ; TRANSMITTER STORAGE
  171:                          ;
  172:                          ; BITTS .org @+1 ;# OF BITS TO BE SENT
  173:                          ; NXTBIT .org @+1 ;NEXT BIT TO BE SENT
  174:                          ; ROPRTY .org @+1 ;PARITY OF BYTE SENT
  175:                          ; RODATA .org @+1 ;BYTE BUFFER OUT
  176:                          RODBS	.org @+1           ;OUTPUT BUFFER INDEX TO START
  177:                          RODBE	.org @+1           ;OUTPUT BUFFER INDEX TO END
  178:                          ;
  179:                          IRQTMP	.org @+2           ;HOLDS IRQ DURING TAPE OPS
  180:                          ;
  181:                          ; TEMP SPACE FOR VIC-40 VARIABLES ****
  182:                          ;
  183:                          ENABL	.org @+1           ;RS-232 ENABLES (REPLACES IER)
  184:                          CASTON	.org @+1           ;TOD SENSE DURING CASSETTES
  185:                          KIKA26	.org @+1           ;TEMP STORAGE FOR CASSETTE READ ROUTINE
  186:                          STUPID	.org @+1           ;TEMP D1IRQ INDICATOR FOR CASSETTE READ
  187:                          LINTMP	.org @+1           ;TEMPORARY FOR LINE INDEX
  188:                          PALNTS	.org @+1           ;PAL VS NTSC FLAG 0=NTSC 1=PAL
  189:                          
  190:                          	.org $0300         ;REM PROGRAM INDIRECTS(10)
  191:                          	.org $0300+20      ;REM KERNAL/OS INDIRECTS(20)
  192:                          CINV	.org @+2           ;IRQ RAM VECTOR
  193:                          CBINV	.org @+2           ;BRK INSTR RAM VECTOR
  194:                          NMINV	.org @+2           ;NMI RAM VECTOR
  195:                          IOPEN	.org @+2           ;INDIRECTS FOR CODE
  196:                          ICLOSE	.org @+2           ; CONFORMS TO KERNAL SPEC 8/19/80
  197:                          ICHKIN	.org @+2
  198:                          ICKOUT	.org @+2
  199:                          ICLRCH	.org @+2
  200:                          IBASIN	.org @+2
  201:                          IBSOUT	.org @+2
  202:                          ISTOP	.org @+2
  203:                          IGETIN	.org @+2
  204:                          ICLALL	.org @+2
  205:                          USRCMD	.org @+2
  206:                          ILOAD	.org @+2
  207:                          ISAVE	.org @+2           ;SAVESP
  208:                          
  209:                          	.org $0300+60
  210:                          TBUFFR	.org @+192         ;CASSETTE DATA BUFFER
  211:                          
  212:                          	.org $400
  213:                          VICSCN	.org @+1024
  214:                          RAMLOC
  215:                          
  216:                          
  217:                          ; I/O DEVICES
  218:                          ;
  219:                          	.org $D000
  220:                          VICREG	= @ ;VIC REGISTERS
  221:                          
  222:                          	.org $D400
  223:                          SIDREG	= @ ;SID REGISTERS
  224:                          
  225:                          	.org $D800
  226:                          VICCOL	.org @+1024        ;VIC COLOR NYBBLES
  227:                          
  228:                          	.org $DC00        ;DEVICE1 6526 (PAGE1 IRQ)
  229:                          COLM	;KEYBOARD MATRIX
  230:                          D1PRA	.org @+1
  231:                          ROWS	;KEYBOARD MATRIX
  232:                          D1PRB	.org @+1
  233:                          D1DDRA	.org @+1
  234:                          D1DDRB	.org @+1
  235:                          D1T1L	.org @+1
  236:                          D1T1H	.org @+1
  237:                          D1T2L	.org @+1
  238:                          D1T2H	.org @+1
  239:                          D1TOD1	.org @+1
  240:                          D1TODS	.org @+1
  241:                          D1TODM	.org @+1
  242:                          D1TODH	.org @+1
  243:                          D1SDR	.org @+1
  244:                          D1ICR	.org @+1
  245:                          D1CRA	.org @+1
  246:                          D1CRB	.org @+1
  247:                          
  248:                          	.org $DD00        ;DEVICE2 6526 (PAGE2 NMI)
  249:                          D2PRA	.org @+1
  250:                          D2PRB	.org @+1
  251:                          D2DDRA	.org @+1
  252:                          D2DDRB	.org @+1
  253:                          D2T1L	.org @+1
  254:                          D2T1H	.org @+1
  255:                          D2T2L	.org @+1
  256:                          D2T2H	.org @+1
  257:                          D2TOD1	.org @+1
  258:                          D2TODS	.org @+1
  259:                          D2TODM	.org @+1
  260:                          D2TODH	.org @+1
  261:                          D2SDR	.org @+1
  262:                          D2ICR	.org @+1
  263:                          D2CRA	.org @+1
  264:                          D2CRB	.org @+1
  265:                          
  266:                          TIMRB	=$19            ;6526 CRB ENABLE ONE-SHOT TB
  267:                          
  268:                          ;TAPE BLOCK TYPES
  269:                          ;
  270:                          EOT	=5 ;END OF TAPE
  271:                          BLF	=1 ;BASIC LOAD FILE
  272:                          BDF	=2 ;BASIC DATA FILE
  273:                          PLF	=3 ;FIXED PROGRAM TYPE
  274:                          BDFH	=4 ;BASIC DATA FILE HEADER
  275:                          BUFSZ	=192            ;BUFFER SIZE
  276:                          ;
  277:                          ;SCREEN EDITOR CONSTANTS
  278:                          ;
  279:                          LLEN	=40             ;SINGLE LINE 40 COLUMNS
  280:                          LLEN2	=80             ;DOUBLE LINE = 80 COLUMNS
  281:                          NLINES	=25             ;25 ROWS ON SCREEN
  282:                          WHITE	=$01            ;WHITE SCREEN COLOR
  283:                          BLUE	=$06            ;BLUE CHAR COLOR
  284:                          CR	=$D             ;CARRIAGE RETURN
  285:                          
  286:                          ;RSR 8/3/80 ADD & CHANGE Z-PAGE
  287:                          ;RSR 8/11/80 ADD MEMUSS & PLF TYPE
  288:                          ;RSR 8/22/80 ADD RS-232 ROUTINES
  289:                          ;RSR 8/24/80 ADD OPEN VARIABLES
  290:                          ;RSR 8/29/80 ADD BAUD SPACE MOVE RS232 TO Z-PAGE
  291:                          ;RSR 9/2/80 ADD SCREEN EDITOR VARS&CON
  292:                          ;RSR 12/7/81 MODIFY FOR VIC-40
 FILE: kernal.a65
    3:                          
 FILE: config.a65
    1:                          ; adjust values in this file to customize KERNAL
    2:                          
    3:                          FLAG_RRBY     = 1 ; put "RRBY" at $FFF6, these are engineers initials
    4:                          		  ; if 0 $FFF6-$FFF9 is filled with $AA
    5:                          FLAG_FIX_FF7E = 0 ; this fix for reasons unknown to me did not make it
    6:                          		  ; into the official V3 KERNAL ROMs, so disabled by default
    7:                          
    8:                          FCOLOR = 14	  ; frame color (default: 14)
    9:                          BCOLOR = 6	  ; background color (default: 6)
   10:                          TCOLOR = 14	  ; text color (default: 14)
 FILE: kernal.a65
    5:                          
    6:                          ROM_START    = $E000
    7:                          KERNAL_START = $E500
    8:                          PATCH_SIZE   = 45
    9:                          
   10:                          .org ROM_START	; KERNAL ROM start
   11:                          
   12:                          ; the following fill bytes must be replaced by BASIC code from basic.bin
   13:                          ; to get a working KERNAL ROM 
   14: 0000 E000  AA AA AA ...  .fill KERNAL_START - ROM_START - PATCH_SIZE, $AA
   15:                          
 FILE: patches.a65
    1:                          ; Kernel Version V3 patches located before memory location $E500
    2:                          
    3:                          ; PRTYP - RS232 PARITY PATCH...ADDED 901227-03
    4:                          ;
    5: 04D3 E4D3  85 A9         PRTYP	STA RINONE      ;GOOD RECEIVER START...DISABLE FLAG
    6: 04D5 E4D5  A9 01         	LDA #1          ;SET PARITY TO 1 ALWAYS
    7: 04D7 E4D7  85 AB         	STA RIPRTY
    8: 04D9 E4D9  60            	RTS
    9:                          
   10:                          ; CPATCH - FIX TO CLEAR LINE...MODIFIED 901227-03
   11:                          ;  PREVENTS WHITE CHARACTER FLASH...
   12:                          CPATCH                  ;ALWAYS CLEAR TO CURRENT FOREGND COLOR
   13: 04DA E4DA  AD 86 02      	LDA COLOR
   14: 04DD E4DD  91 F3         	STA (USER),Y
   15: 04DF E4DF  60            	RTS
   16:                          
   17:                          ; FPATCH - TAPE FILENAME TIMEOUT
   18:                          ;
   19: 04E0 E4E0  69 02         FPATCH	ADC #2          ;TIME IS (8 TO 13 SEC OF DISPLAY)
   20: 04E2 E4E2  A4 91         FPAT00	LDY STKEY       ;CHECK FOR KEY DOWN ON LAST ROW...
   21: 04E4 E4E4  C8            	INY
   22: 04E5 E4E5  D0 04         	BNE FPAT01      ;KEY...EXIT LOOP
   23: 04E7 E4E7  C5 A1         	CMP TIME+1      ;WATCH TIMER
   24: 04E9 E4E9  D0 F7         	BNE FPAT00
   25: 04EB E4EB  60            FPAT01	RTS
   26:                          
   27:                          ;
   28:                          ; BAUDOP - BAUD RATE TABLE FOR PAL
   29:                          ;   .985248E6/BAUD-RATE/2-100
   30:                          ;
   31: 04EC E4EC  19 26         BAUDOP	.WORD 9853-CBIT  ;50 BAUD
   32: 04EE E4EE  44 19         	.WORD 6568-CBIT  ;75 BAUD
   33: 04F0 E4F0  1A 11         	.WORD 4478-CBIT  ;110 BAUD
   34: 04F2 E4F2  E8 0D         	.WORD 3660-CBIT  ;134.6 BAUD
   35: 04F4 E4F4  70 0C         	.WORD 3284-CBIT  ;150 BAUD
   36: 04F6 E4F6  06 06         	.WORD 1642-CBIT  ;300 BAUD
   37: 04F8 E4F8  D1 02         	.WORD 821-CBIT   ;600 BAUD
   38: 04FA E4FA  37 01         	.WORD 411-CBIT   ;1200 BAUD
   39: 04FC E4FC  AE 00         	.WORD 274-CBIT   ;1800 BAUD
   40: 04FE E4FE  69 00         	.WORD 205-CBIT   ;2400 BAUD
 FILE: kernal.a65
   17:                          
   18:                          .if @ != KERNAL_START
   19-                          	.echo "KERNAL MUST start at ", [$]KERNAL_START
   20:                          .endif
   21:                          
 FILE: editor1.a65
    1:                          
    2:                          MAXCHR=80
    3:                          NWRAP=2 ;MAX NUMBER OF PHYSICAL LINES PER LOGICAL LINE
    4:                          ;
    5:                          ;UNDEFINED FUNCTION ENTRY
    6:                          ;
    7:                          ; UNDEFD LDX #0
    8:                          ; UNDEF2 LDA UNMSG,X
    9:                          ; JSR PRT
   10:                          ; INX
   11:                          ; CPX #UNMSG2-UNMSG
   12:                          ; BNE UNDEF2
   13:                          ; SEC
   14:                          ; RTS
   15:                          ;
   16:                          ; UNMSG .BYT $D,'?ADVANCED FUNCTION NOT AVAILABLE',$D
   17:                          ; UNMSG2
   18:                          ;
   19:                          ;RETURN ADDRESS OF 6526
   20:                          ;
   21: 0500 E500  A2 00         IOBASE	LDX #<D1PRA
   22: 0502 E502  A0 DC         	LDY #>D1PRA
   23: 0504 E504  60            	RTS
   24:                          ;
   25:                          ;RETURN MAX ROWS,COLS OF SCREEN
   26:                          ;
   27: 0505 E505  A2 28         SCRORG	LDX #LLEN
   28: 0507 E507  A0 19         	LDY #NLINES
   29: 0509 E509  60            	RTS
   30:                          ;
   31:                          ;READ/PLOT CURSOR POSITION
   32:                          ;
   33: 050A E50A  B0 07         PLOT	BCS PLOT10
   34: 050C E50C  86 D6         	STX TBLX
   35: 050E E50E  84 D3         	STY PNTR
   36: 0510 E510  20 6C E5      	JSR STUPT
   37: 0513 E513  A6 D6         PLOT10	LDX TBLX
   38: 0515 E515  A4 D3         	LDY PNTR
   39: 0517 E517  60            	RTS
   40:                          
   41:                          ;INITIALIZE I/O
   42:                          ;
   43:                          CINT
   44:                          ;
   45:                          ; ESTABLISH SCREEN MEMORY
   46:                          ;
   47: 0518 E518  20 A0 E5      	JSR PANIC       ;SET UP VIC
   48:                          ;
   49: 051B E51B  A9 00         	LDA #0          ;MAKE SURE WE'RE IN PET MODE
   50: 051D E51D  8D 91 02      	STA MODE
   51: 0520 E520  85 CF         	STA BLNON       ;WE DONT HAVE A GOOD CHAR FROM THE SCREEN YET
   52:                          
   53: 0522 E522  A9 48         	LDA #<SHFLOG    ;SET SHIFT LOGIC INDIRECTS
   54: 0524 E524  8D 8F 02      	STA KEYLOG
   55: 0527 E527  A9 EB         	LDA #>SHFLOG
   56: 0529 E529  8D 90 02      	STA KEYLOG+1
   57: 052C E52C  A9 0A         	LDA #10
   58: 052E E52E  8D 89 02      	STA XMAX        ;MAXIMUM TYPE AHEAD BUFFER SIZE
   59: 0531 E531  8D 8C 02      	STA DELAY
   60: 0534 E534  A9 0E         	LDA #TCOLOR     ;INIT COLOR TO LT BLUE 901227-03*************
   61: 0536 E536  8D 86 02      	STA COLOR
   62: 0539 E539  A9 04         	LDA #4
   63: 053B E53B  8D 8B 02      	STA KOUNT       ;DELAY BETWEEN KEY REPEATS
   64: 053E E53E  A9 0C         	LDA #$C
   65: 0540 E540  85 CD         	STA BLNCT
   66: 0542 E542  85 CC         	STA BLNSW
   67: 0544 E544  AD 88 02      CLSR	LDA HIBASE      ;FILL HI BYTE PTR TABLE
   68: 0547 E547  09 80         	ORA #$80
   69: 0549 E549  A8            	TAY
   70: 054A E54A  A9 00         	LDA #0
   71: 054C E54C  AA            	TAX
   72: 054D E54D  94 D9         LPS1	STY LDTB1,X
   73: 054F E54F  18            	CLC
   74: 0550 E550  69 28         	ADC #LLEN
   75: 0552 E552  90 01         	BCC LPS2
   76: 0554 E554  C8            	INY             ;CARRY BUMP HI BYTE
   77: 0555 E555  E8            LPS2	INX
   78: 0556 E556  E0 1A         	CPX #NLINES+1   ;DONE # OF LINES?
   79: 0558 E558  D0 F3         	BNE LPS1        ;NO...
   80: 055A E55A  A9 FF         	LDA #$FF        ;TAG END OF LINE TABLE
   81: 055C E55C  95 D9         	STA LDTB1,X
   82: 055E E55E  A2 18         	LDX #NLINES-1   ;CLEAR FROM THE BOTTOM LINE UP
   83: 0560 E560  20 FF E9      CLEAR1	JSR CLRLN       ;SEE SCROLL ROUTINES
   84: 0563 E563  CA            	DEX
   85: 0564 E564  10 FA         	BPL CLEAR1
   86:                          
   87:                          ;HOME FUNCTION
   88:                          ;
   89: 0566 E566  A0 00         NXTD	LDY #0
   90: 0568 E568  84 D3         	STY PNTR        ;LEFT COLUMN
   91: 056A E56A  84 D6         	STY TBLX        ;TOP LINE
   92:                          ;
   93:                          ;MOVE CURSOR TO TBLX,PNTR
   94:                          ;
   95:                          STUPT
   96: 056C E56C  A6 D6         	LDX TBLX        ;GET CURENT LINE INDEX
   97: 056E E56E  A5 D3         	LDA PNTR        ;GET CHARACTER POINTER
   98: 0570 E570  B4 D9         FNDSTR	LDY LDTB1,X     ;FIND BEGINING OF LINE
   99: 0572 E572  30 08         	BMI STOK        ;BRANCH IF START FOUND
  100: 0574 E574  18            	CLC
  101: 0575 E575  69 28         	ADC #LLEN       ;ADJUST POINTER
  102: 0577 E577  85 D3         	STA PNTR
  103: 0579 E579  CA            	DEX
  104: 057A E57A  10 F4         	BPL FNDSTR
  105:                          ;
  106: 057C E57C  20 F0 E9      STOK	JSR SETPNT      ;SET UP PNT INDIRECT 901227-03***********
  107:                          ;
  108: 057F E57F  A9 27         	LDA #LLEN-1
  109: 0581 E581  E8            	INX
  110: 0582 E582  B4 D9         FNDEND	LDY LDTB1,X
  111: 0584 E584  30 06         	BMI STDONE
  112: 0586 E586  18            	CLC
  113: 0587 E587  69 28         	ADC #LLEN
  114: 0589 E589  E8            	INX
  115: 058A E58A  10 F6         	BPL FNDEND
  116:                          STDONE
  117: 058C E58C  85 D5         	STA LNMX
  118: 058E E58E  4C 24 EA      	JMP SCOLOR      ;MAKE COLOR POINTER FOLLOW 901227-03************
  119:                          
  120:                          ; THIS IS A PATCH FOR INPUT LOGIC 901227-03**********
  121:                          ;   FIXES INPUT"XXXXXXX-40-XXXXX";A$ PROBLEM
  122:                          ;
  123: 0591 E591  E4 C9         FINPUT	CPX LSXP        ;CHECK IF ON SAME LINE
  124: 0593 E593  F0 03         	BEQ FINPUX      ;YES...RETURN TO SEND
  125: 0595 E595  4C ED E6      	JMP FINDST      ;CHECK IF WE WRAPPED DOWN...
  126: 0598 E598  60            FINPUX	RTS
  127: 0599 E599  EA            	NOP             ;KEEP THE SPACE THE SAME...
  128:                          
  129:                          ;PANIC NMI ENTRY
  130:                          ;
  131: 059A E59A  20 A0 E5      VPAN	JSR PANIC       ;FIX VIC SCREEN
  132: 059D E59D  4C 66 E5      	JMP NXTD        ;HOME CURSOR
  133:                          
  134: 05A0 E5A0  A9 03         PANIC	LDA #3          ;RESET DEFAULT I/O
  135: 05A2 E5A2  85 9A         	STA DFLTO
  136: 05A4 E5A4  A9 00         	LDA #0
  137: 05A6 E5A6  85 99         	STA DFLTN
  138:                          
  139:                          ;INIT VIC
  140:                          ;
  141: 05A8 E5A8  A2 2F         INITV	LDX #47         ;LOAD ALL VIC REGS ***
  142: 05AA E5AA  BD B8 EC      PX4	LDA TVIC-1,X
  143: 05AD E5AD  9D FF CF      	STA VICREG-1,X
  144: 05B0 E5B0  CA            	DEX
  145: 05B1 E5B1  D0 F7         	BNE PX4
  146: 05B3 E5B3  60            	RTS
  147:                          
  148:                          ;
  149:                          ;REMOVE CHARACTER FROM QUEUE
  150:                          ;
  151: 05B4 E5B4  AC 77 02      LP2	LDY KEYD
  152: 05B7 E5B7  A2 00         	LDX #0
  153: 05B9 E5B9  BD 78 02      LP1	LDA KEYD+1,X
  154: 05BC E5BC  9D 77 02      	STA KEYD,X
  155: 05BF E5BF  E8            	INX
  156: 05C0 E5C0  E4 C6         	CPX NDX
  157: 05C2 E5C2  D0 F5         	BNE LP1
  158: 05C4 E5C4  C6 C6         	DEC NDX
  159: 05C6 E5C6  98            	TYA
  160: 05C7 E5C7  58            	CLI
  161: 05C8 E5C8  18            	CLC             ;GOOD RETURN
  162: 05C9 E5C9  60            	RTS
  163:                          ;
  164: 05CA E5CA  20 16 E7      LOOP4	JSR PRT
  165:                          LOOP3
  166: 05CD E5CD  A5 C6         	LDA NDX
  167: 05CF E5CF  85 CC         	STA BLNSW
  168: 05D1 E5D1  8D 92 02      	STA AUTODN      ;TURN ON AUTO SCROLL DOWN
  169: 05D4 E5D4  F0 F7         	BEQ LOOP3
  170: 05D6 E5D6  78            	SEI
  171: 05D7 E5D7  A5 CF         	LDA BLNON
  172: 05D9 E5D9  F0 0C         	BEQ LP21
  173: 05DB E5DB  A5 CE         	LDA GDBLN
  174: 05DD E5DD  AE 87 02      	LDX GDCOL       ;RESTORE ORIGINAL COLOR
  175: 05E0 E5E0  A0 00         	LDY #0
  176: 05E2 E5E2  84 CF         	STY BLNON
  177: 05E4 E5E4  20 13 EA      	JSR DSPP
  178: 05E7 E5E7  20 B4 E5      LP21	JSR LP2
  179: 05EA E5EA  C9 83         	CMP #$83        ;RUN KEY?
  180: 05EC E5EC  D0 10         	BNE LP22
  181: 05EE E5EE  A2 09         	LDX #9
  182: 05F0 E5F0  78            	SEI
  183: 05F1 E5F1  86 C6         	STX NDX
  184: 05F3 E5F3  BD E6 EC      LP23	LDA RUNTB-1,X
  185: 05F6 E5F6  9D 76 02      	STA KEYD-1,X
  186: 05F9 E5F9  CA            	DEX
  187: 05FA E5FA  D0 F7         	BNE LP23
  188: 05FC E5FC  F0 CF         	BEQ LOOP3
  189: 05FE E5FE  C9 0D         LP22	CMP #$D
  190: 0600 E600  D0 C8         	BNE LOOP4
  191: 0602 E602  A4 D5         	LDY LNMX
  192: 0604 E604  84 D0         	STY CRSW
  193: 0606 E606  B1 D1         CLP5	LDA (PNT),Y
  194: 0608 E608  C9 20         	CMP #' '
  195: 060A E60A  D0 03         	BNE CLP6
  196: 060C E60C  88            	DEY
  197: 060D E60D  D0 F7         	BNE CLP5
  198: 060F E60F  C8            CLP6	INY
  199: 0610 E610  84 C8         	STY INDX
  200: 0612 E612  A0 00         	LDY #0
  201: 0614 E614  8C 92 02      	STY AUTODN      ;TURN OFF AUTO SCROLL DOWN
  202: 0617 E617  84 D3         	STY PNTR
  203: 0619 E619  84 D4         	STY QTSW
  204: 061B E61B  A5 C9         	LDA LSXP
  205: 061D E61D  30 1B         	BMI LOP5
  206: 061F E61F  A6 D6         	LDX TBLX
  207: 0621 E621  20 91 E5      	JSR FINPUT      ;CHECK FOR SAME LINE AS START  901227-03**********
  208: 0624 E624  E4 C9         	CPX LSXP
  209: 0626 E626  D0 12         	BNE LOP5
  210: 0628 E628  A5 CA         	LDA LSTP
  211: 062A E62A  85 D3         	STA PNTR
  212: 062C E62C  C5 C8         	CMP INDX
  213: 062E E62E  90 0A         	BCC LOP5
  214: 0630 E630  B0 2B         	BCS CLP2
  215:                          
  216:                          ;INPUT A LINE UNTIL CARRIAGE RETURN
  217:                          ;
  218: 0632 E632  98            LOOP5	TYA
  219: 0633 E633  48            	PHA
  220: 0634 E634  8A            	TXA
  221: 0635 E635  48            	PHA
  222: 0636 E636  A5 D0         	LDA CRSW
  223: 0638 E638  F0 93         	BEQ LOOP3
  224: 063A E63A  A4 D3         LOP5	LDY PNTR
  225: 063C E63C  B1 D1         	LDA (PNT),Y
  226:                          NOTONE
  227: 063E E63E  85 D7         	STA DATA
  228: 0640 E640  29 3F         LOP51	AND #$3F
  229: 0642 E642  06 D7         	ASL DATA
  230: 0644 E644  24 D7         	BIT DATA
  231: 0646 E646  10 02         	BPL LOP54
  232: 0648 E648  09 80         	ORA #$80
  233: 064A E64A  90 04         LOP54	BCC LOP52
  234: 064C E64C  A6 D4         	LDX QTSW
  235: 064E E64E  D0 04         	BNE LOP53
  236: 0650 E650  70 02         LOP52	BVS LOP53
  237: 0652 E652  09 40         	ORA #$40
  238: 0654 E654  E6 D3         LOP53	INC PNTR
  239: 0656 E656  20 84 E6      	JSR QTSWC
  240: 0659 E659  C4 C8         	CPY INDX
  241: 065B E65B  D0 17         	BNE CLP1
  242: 065D E65D  A9 00         CLP2	LDA #0
  243: 065F E65F  85 D0         	STA CRSW
  244: 0661 E661  A9 0D         	LDA #$D
  245: 0663 E663  A6 99         	LDX DFLTN       ;FIX GETS FROM SCREEN
  246: 0665 E665  E0 03         	CPX #3          ;IS IT THE SCREEN?
  247: 0667 E667  F0 06         	BEQ CLP2A
  248: 0669 E669  A6 9A         	LDX DFLTO
  249: 066B E66B  E0 03         	CPX #3
  250: 066D E66D  F0 03         	BEQ CLP21
  251: 066F E66F  20 16 E7      CLP2A	JSR PRT
  252: 0672 E672  A9 0D         CLP21	LDA #$D
  253: 0674 E674  85 D7         CLP1	STA DATA
  254: 0676 E676  68            	PLA
  255: 0677 E677  AA            	TAX
  256: 0678 E678  68            	PLA
  257: 0679 E679  A8            	TAY
  258: 067A E67A  A5 D7         	LDA DATA
  259: 067C E67C  C9 DE         	CMP #$DE        ;IS IT <PI> ?
  260: 067E E67E  D0 02         	BNE CLP7
  261: 0680 E680  A9 FF         	LDA #$FF
  262: 0682 E682  18            CLP7	CLC
  263: 0683 E683  60            	RTS
  264:                          
  265: 0684 E684  C9 22         QTSWC	CMP #$22
  266: 0686 E686  D0 08         	BNE QTSWL
  267: 0688 E688  A5 D4         	LDA QTSW
  268: 068A E68A  49 01         	EOR #$1
  269: 068C E68C  85 D4         	STA QTSW
  270: 068E E68E  A9 22         	LDA #$22
  271: 0690 E690  60            QTSWL	RTS
  272:                          
  273: 0691 E691  09 40         NXT33	ORA #$40
  274: 0693 E693  A6 C7         NXT3	LDX RVS
  275: 0695 E695  F0 02         	BEQ NVS
  276: 0697 E697  09 80         NC3	ORA #$80
  277: 0699 E699  A6 D8         NVS	LDX INSRT
  278: 069B E69B  F0 02         	BEQ NVS1
  279: 069D E69D  C6 D8         	DEC INSRT
  280: 069F E69F  AE 86 02      NVS1	LDX COLOR 	;PUT COLOR ON SCREEN
  281: 06A2 E6A2  20 13 EA      	JSR DSPP
  282: 06A5 E6A5  20 B6 E6      	JSR WLOGIC      ;CHECK FOR WRAPAROUND
  283: 06A8 E6A8  68            LOOP2	PLA
  284: 06A9 E6A9  A8            	TAY
  285: 06AA E6AA  A5 D8         	LDA INSRT
  286: 06AC E6AC  F0 02         	BEQ LOP2
  287: 06AE E6AE  46 D4         	LSR QTSW
  288: 06B0 E6B0  68            LOP2	PLA
  289: 06B1 E6B1  AA            	TAX
  290: 06B2 E6B2  68            	PLA
  291: 06B3 E6B3  18            	CLC             ;GOOD RETURN
  292: 06B4 E6B4  58            	CLI
  293: 06B5 E6B5  60            	RTS
  294:                          
  295:                          WLOGIC
  296: 06B6 E6B6  20 B3 E8      	JSR CHKDWN      ;MAYBE WE SHOULD WE INCREMENT TBLX
  297: 06B9 E6B9  E6 D3         	INC PNTR        ;BUMP CHARCTER POINTER
  298: 06BB E6BB  A5 D5         	LDA LNMX        ;
  299: 06BD E6BD  C5 D3         	CMP PNTR        ;IF LNMX IS LESS THAN PNTR
  300: 06BF E6BF  B0 3F         	BCS WLGRTS      ;BRANCH IF LNMX>=PNTR
  301: 06C1 E6C1  C9 4F         	CMP #MAXCHR-1   ;PAST MAX CHARACTERS
  302: 06C3 E6C3  F0 32         	BEQ WLOG10      ;BRANCH IF SO
  303: 06C5 E6C5  AD 92 02      	LDA AUTODN      ;SHOULD WE AUTO SCROLL DOWN?
  304: 06C8 E6C8  F0 03         	BEQ WLOG20      ;BRANCH IF NOT
  305: 06CA E6CA  4C 67 E9      	JMP BMT1        ;ELSE DECIDE WHICH WAY TO SCROLL
  306:                          
  307:                          WLOG20
  308: 06CD E6CD  A6 D6         	LDX TBLX        ;SEE IF WE SHOULD SCROLL DOWN
  309: 06CF E6CF  E0 19         	CPX #NLINES
  310: 06D1 E6D1  90 07         	BCC WLOG30      ;BRANCH IF NOT
  311: 06D3 E6D3  20 EA E8      	JSR SCROL       ;ELSE DO THE SCROL UP
  312: 06D6 E6D6  C6 D6         	DEC TBLX        ;AND ADJUST CURENT LINE#
  313: 06D8 E6D8  A6 D6         	LDX TBLX
  314: 06DA E6DA  16 D9         WLOG30	ASL LDTB1,X     ;WRAP THE LINE
  315: 06DC E6DC  56 D9         	LSR LDTB1,X
  316: 06DE E6DE  E8            	INX             ;INDEX TO NEXT LLINE
  317: 06DF E6DF  B5 D9         	LDA LDTB1,X     ;GET HIGH ORDER BYTE OF ADDRESS
  318: 06E1 E6E1  09 80         	ORA #$80        ;MAKE IT A NON-CONTINUATION LINE
  319: 06E3 E6E3  95 D9         	STA LDTB1,X     ;AND PUT IT BACK
  320: 06E5 E6E5  CA            	DEX             ;GET BACK TO CURRENT LINE
  321: 06E6 E6E6  A5 D5         	LDA LNMX        ;CONTINUE THE BYTES TAKEN OUT
  322: 06E8 E6E8  18            	CLC
  323: 06E9 E6E9  69 28         	ADC #LLEN
  324: 06EB E6EB  85 D5         	STA LNMX
  325:                          FINDST
  326: 06ED E6ED  B5 D9         	LDA LDTB1,X     ;IS THIS THE FIRST LINE?
  327: 06EF E6EF  30 03         	BMI FINX        ;BRANCH IF SO
  328: 06F1 E6F1  CA            	DEX             ;ELSE BACKUP 1
  329: 06F2 E6F2  D0 F9         	BNE FINDST
  330:                          FINX
  331: 06F4 E6F4  4C F0 E9      	JMP SETPNT      ;MAKE SURE PNT IS RIGHT
  332:                          
  333: 06F7 E6F7  C6 D6         WLOG10	DEC TBLX
  334: 06F9 E6F9  20 7C E8      	JSR NXLN
  335: 06FC E6FC  A9 00         	LDA #0
  336: 06FE E6FE  85 D3         	STA PNTR        ;POINT TO FIRST BYTE
  337: 0700 E700  60            WLGRTS	RTS
  338:                          
  339: 0701 E701  A6 D6         BKLN	LDX TBLX
  340: 0703 E703  D0 06         	BNE BKLN1
  341: 0705 E705  86 D3         	STX PNTR
  342: 0707 E707  68            	PLA
  343: 0708 E708  68            	PLA
  344: 0709 E709  D0 9D         	BNE LOOP2
  345:                          ;
  346: 070B E70B  CA            BKLN1	DEX
  347: 070C E70C  86 D6         	STX TBLX
  348: 070E E70E  20 6C E5      	JSR STUPT
  349: 0711 E711  A4 D5         	LDY LNMX
  350: 0713 E713  84 D3         	STY PNTR
  351: 0715 E715  60            	RTS
  352:                          
  353:                          ;PRINT ROUTINE
  354:                          ;
  355: 0716 E716  48            PRT	PHA
  356: 0717 E717  85 D7         	STA DATA
  357: 0719 E719  8A            	TXA
  358: 071A E71A  48            	PHA
  359: 071B E71B  98            	TYA
  360: 071C E71C  48            	PHA
  361: 071D E71D  A9 00         	LDA #0
  362: 071F E71F  85 D0         	STA CRSW
  363: 0721 E721  A4 D3         	LDY PNTR
  364: 0723 E723  A5 D7         	LDA DATA
  365: 0725 E725  10 03         	BPL @+5
  366: 0727 E727  4C D4 E7      	JMP NXTX
  367: 072A E72A  C9 0D         	CMP #$D
  368: 072C E72C  D0 03         	BNE NJT1
  369: 072E E72E  4C 91 E8      	JMP NXT1
  370: 0731 E731  C9 20         NJT1	CMP #' '
  371: 0733 E733  90 10         	BCC NTCN
  372: 0735 E735  C9 60         	CMP #$60        ;LOWER CASE?
  373: 0737 E737  90 04         	BCC NJT8        ;NO...
  374: 0739 E739  29 DF         	AND #$DF        ;YES...MAKE SCREEN LOWER
  375: 073B E73B  D0 02         	BNE NJT9        ;ALWAYS
  376: 073D E73D  29 3F         NJT8	AND #$3F
  377: 073F E73F  20 84 E6      NJT9	JSR QTSWC
  378: 0742 E742  4C 93 E6      	JMP NXT3
  379: 0745 E745  A6 D8         NTCN	LDX INSRT
  380: 0747 E747  F0 03         	BEQ CNC3X
  381: 0749 E749  4C 97 E6      	JMP NC3
  382: 074C E74C  C9 14         CNC3X	CMP #$14
  383: 074E E74E  D0 2E         	BNE NTCN1
  384: 0750 E750  98            	TYA
  385: 0751 E751  D0 06         	BNE BAK1UP
  386: 0753 E753  20 01 E7      	JSR BKLN
  387: 0756 E756  4C 73 E7      	JMP BK2
  388: 0759 E759  20 A1 E8      BAK1UP	JSR CHKBAK      ;SHOULD WE DEC TBLX
  389: 075C E75C  88            	DEY
  390: 075D E75D  84 D3         	STY PNTR
  391: 075F E75F  20 24 EA      BK1	JSR SCOLOR      ;FIX COLOR PTRS
  392: 0762 E762  C8            BK15	INY
  393: 0763 E763  B1 D1         	LDA (PNT),Y
  394: 0765 E765  88            	DEY
  395: 0766 E766  91 D1         	STA (PNT),Y
  396: 0768 E768  C8            	INY
  397: 0769 E769  B1 F3         	LDA (USER),Y
  398: 076B E76B  88            	DEY
  399: 076C E76C  91 F3         	STA (USER),Y
  400: 076E E76E  C8            	INY
  401: 076F E76F  C4 D5         	CPY LNMX
  402: 0771 E771  D0 EF         	BNE BK15
  403: 0773 E773  A9 20         BK2	LDA #' '
  404: 0775 E775  91 D1         	STA (PNT),Y 
  405: 0777 E777  AD 86 02      	LDA COLOR
  406: 077A E77A  91 F3         	STA (USER),Y
  407: 077C E77C  10 4D         	BPL JPL3
  408: 077E E77E  A6 D4         NTCN1	LDX QTSW
  409: 0780 E780  F0 03         	BEQ NC3W
  410: 0782 E782  4C 97 E6      CNC3	JMP NC3
  411: 0785 E785  C9 12         NC3W	CMP #$12
  412: 0787 E787  D0 02         	BNE NC1
  413: 0789 E789  85 C7         	STA RVS
  414: 078B E78B  C9 13         NC1	CMP #$13
  415: 078D E78D  D0 03         	BNE NC2
  416: 078F E78F  20 66 E5      	JSR NXTD
  417: 0792 E792  C9 1D         NC2	CMP #$1D
  418: 0794 E794  D0 17         	BNE NCX2
  419: 0796 E796  C8            	INY
  420: 0797 E797  20 B3 E8      	JSR CHKDWN
  421: 079A E79A  84 D3         	STY PNTR
  422: 079C E79C  88            	DEY
  423: 079D E79D  C4 D5         	CPY LNMX
  424: 079F E79F  90 09         	BCC NCZ2
  425: 07A1 E7A1  C6 D6         	DEC TBLX
  426: 07A3 E7A3  20 7C E8      	JSR NXLN
  427: 07A6 E7A6  A0 00         	LDY #0
  428: 07A8 E7A8  84 D3         JPL4	STY PNTR
  429: 07AA E7AA  4C A8 E6      NCZ2	JMP LOOP2
  430: 07AD E7AD  C9 11         NCX2	CMP #$11
  431: 07AF E7AF  D0 1D         	BNE COLR1
  432: 07B1 E7B1  18            	CLC
  433: 07B2 E7B2  98            	TYA
  434: 07B3 E7B3  69 28         	ADC #LLEN
  435: 07B5 E7B5  A8            	TAY
  436: 07B6 E7B6  E6 D6         	INC TBLX
  437: 07B8 E7B8  C5 D5         	CMP LNMX
  438: 07BA E7BA  90 EC         	BCC JPL4
  439: 07BC E7BC  F0 EA         	BEQ JPL4
  440: 07BE E7BE  C6 D6         	DEC TBLX
  441: 07C0 E7C0  E9 28         CURS10	SBC #LLEN
  442: 07C2 E7C2  90 04         	BCC GOTDWN
  443: 07C4 E7C4  85 D3         	STA PNTR
  444: 07C6 E7C6  D0 F8         	BNE CURS10
  445: 07C8 E7C8  20 7C E8      GOTDWN	JSR NXLN
  446: 07CB E7CB  4C A8 E6      JPL3	JMP LOOP2
  447: 07CE E7CE  20 CB E8      COLR1	JSR CHKCOL      ;CHECK FOR A COLOR
  448: 07D1 E7D1  4C 44 EC      	JMP LOWER       ;WAS JMP LOOP2
  449:                          
  450:                          ;CHECK COLOR
  451:                          ;
  452:                          
  453:                          ;SHIFTED KEYS
  454:                          ;
  455:                          NXTX
  456:                          KEEPIT
  457: 07D4 E7D4  29 7F         	AND #$7F
  458: 07D6 E7D6  C9 7F         	CMP #$7F
  459: 07D8 E7D8  D0 02         	BNE NXTX1
  460: 07DA E7DA  A9 5E         	LDA #$5E
  461:                          NXTX1
  462:                          NXTXA
  463: 07DC E7DC  C9 20         	CMP #$20        ;IS IT A FUNCTION KEY
  464: 07DE E7DE  90 03         	BCC UHUH
  465: 07E0 E7E0  4C 91 E6      	JMP NXT33
  466:                          UHUH
  467: 07E3 E7E3  C9 0D         	CMP #$D
  468: 07E5 E7E5  D0 03         	BNE UP5
  469: 07E7 E7E7  4C 91 E8      	JMP NXT1
  470: 07EA E7EA  A6 D4         UP5	LDX  QTSW
  471: 07EC E7EC  D0 3F         	BNE UP6
  472: 07EE E7EE  C9 14         	CMP #$14
  473: 07F0 E7F0  D0 37         	BNE UP9
  474: 07F2 E7F2  A4 D5         	LDY LNMX
  475: 07F4 E7F4  B1 D1         	LDA (PNT),Y
  476: 07F6 E7F6  C9 20         	CMP #' '
  477: 07F8 E7F8  D0 04         	BNE INS3
  478: 07FA E7FA  C4 D3         	CPY PNTR
  479: 07FC E7FC  D0 07         	BNE INS1
  480: 07FE E7FE  C0 4F         INS3	CPY #MAXCHR-1
  481: 0800 E800  F0 24         	BEQ INSEXT      ;EXIT IF LINE TOO LONG
  482: 0802 E802  20 65 E9      	JSR NEWLIN      ;SCROLL DOWN 1
  483: 0805 E805  A4 D5         INS1	LDY LNMX
  484: 0807 E807  20 24 EA      	JSR SCOLOR
  485: 080A E80A  88            INS2	DEY
  486: 080B E80B  B1 D1         	LDA (PNT),Y
  487: 080D E80D  C8            	INY
  488: 080E E80E  91 D1         	STA (PNT),Y
  489: 0810 E810  88            	DEY
  490: 0811 E811  B1 F3         	LDA (USER),Y
  491: 0813 E813  C8            	INY
  492: 0814 E814  91 F3         	STA (USER),Y
  493: 0816 E816  88            	DEY
  494: 0817 E817  C4 D3         	CPY PNTR
  495: 0819 E819  D0 EF         	BNE INS2
  496: 081B E81B  A9 20         	LDA #$20
  497: 081D E81D  91 D1         	STA (PNT),Y
  498: 081F E81F  AD 86 02      	LDA COLOR
  499: 0822 E822  91 F3         	STA (USER),Y
  500: 0824 E824  E6 D8         	INC INSRT
  501: 0826 E826  4C A8 E6      INSEXT	JMP LOOP2
  502: 0829 E829  A6 D8         UP9	LDX INSRT
  503: 082B E82B  F0 05         	BEQ UP2
  504: 082D E82D  09 40         UP6	ORA #$40
  505: 082F E82F  4C 97 E6      	JMP NC3
  506: 0832 E832  C9 11         UP2	CMP #$11
  507: 0834 E834  D0 16         	BNE NXT2
  508: 0836 E836  A6 D6         	LDX TBLX
  509: 0838 E838  F0 37         	BEQ JPL2
  510: 083A E83A  C6 D6         	DEC TBLX
  511: 083C E83C  A5 D3         	LDA PNTR
  512: 083E E83E  38            	SEC
  513: 083F E83F  E9 28         	SBC #LLEN
  514: 0841 E841  90 04         	BCC UPALIN
  515: 0843 E843  85 D3         	STA PNTR
  516: 0845 E845  10 2A         	BPL JPL2
  517: 0847 E847  20 6C E5      UPALIN	JSR STUPT
  518: 084A E84A  D0 25         	BNE JPL2
  519: 084C E84C  C9 12         NXT2	CMP #$12
  520: 084E E84E  D0 04         	BNE NXT6
  521: 0850 E850  A9 00         	LDA #0
  522: 0852 E852  85 C7         	STA RVS
  523: 0854 E854  C9 1D         NXT6	CMP #$1D
  524: 0856 E856  D0 12         	BNE NXT61
  525: 0858 E858  98            	TYA
  526: 0859 E859  F0 09         	BEQ BAKBAK
  527: 085B E85B  20 A1 E8      	JSR CHKBAK
  528: 085E E85E  88            	DEY
  529: 085F E85F  84 D3         	STY PNTR
  530: 0861 E861  4C A8 E6      	JMP LOOP2
  531: 0864 E864  20 01 E7      BAKBAK	JSR BKLN
  532: 0867 E867  4C A8 E6      	JMP LOOP2
  533: 086A E86A  C9 13         NXT61	CMP #$13
  534: 086C E86C  D0 06         	BNE SCCL
  535: 086E E86E  20 44 E5      	JSR CLSR
  536: 0871 E871  4C A8 E6      JPL2	JMP LOOP2
  537:                          SCCL
  538: 0874 E874  09 80         	ORA #$80        ;MAKE IT UPPER CASE
  539: 0876 E876  20 CB E8      	JSR CHKCOL      ;TRY FOR COLOR
  540: 0879 E879  4C 4F EC      	JMP UPPER       ;WAS JMP LOOP2
  541:                          ;
  542: 087C E87C  46 C9         NXLN	LSR LSXP
  543: 087E E87E  A6 D6         	LDX TBLX
  544: 0880 E880  E8            NXLN2	INX
  545: 0881 E881  E0 19         	CPX #NLINES     ;OFF BOTTOM?
  546: 0883 E883  D0 03         	BNE NXLN1       ;NO...
  547: 0885 E885  20 EA E8      	JSR SCROL       ;YES...SCROLL
  548: 0888 E888  B5 D9         NXLN1	LDA LDTB1,X     ;DOUBLE LINE?
  549: 088A E88A  10 F4         	BPL NXLN2       ;YES...SCROLL AGAIN
  550: 088C E88C  86 D6         	STX TBLX
  551: 088E E88E  4C 6C E5      	JMP STUPT
  552:                          NXT1
  553: 0891 E891  A2 00         	LDX #0
  554: 0893 E893  86 D8         	STX INSRT
  555: 0895 E895  86 C7         	STX RVS
  556: 0897 E897  86 D4         	STX QTSW
  557: 0899 E899  86 D3         	STX PNTR
  558: 089B E89B  20 7C E8      	JSR NXLN
  559: 089E E89E  4C A8 E6      JPL5	JMP LOOP2
  560:                          ;
  561:                          ;
  562:                          ; CHECK FOR A DECREMENT TBLX
  563:                          ;
  564: 08A1 E8A1  A2 02         CHKBAK	LDX #NWRAP
  565: 08A3 E8A3  A9 00         	LDA #0
  566: 08A5 E8A5  C5 D3         CHKLUP	CMP PNTR
  567: 08A7 E8A7  F0 07         	BEQ BACK
  568: 08A9 E8A9  18            	CLC
  569: 08AA E8AA  69 28         	ADC #LLEN
  570: 08AC E8AC  CA            	DEX
  571: 08AD E8AD  D0 F6         	BNE CHKLUP
  572: 08AF E8AF  60            	RTS
  573:                          ;
  574: 08B0 E8B0  C6 D6         BACK	DEC TBLX
  575: 08B2 E8B2  60            	RTS
  576:                          ;
  577:                          ; CHECK FOR INCREMENT TBLX
  578:                          ;
  579: 08B3 E8B3  A2 02         CHKDWN	LDX #NWRAP
  580: 08B5 E8B5  A9 27         	LDA #LLEN-1
  581: 08B7 E8B7  C5 D3         DWNCHK	CMP PNTR
  582: 08B9 E8B9  F0 07         	BEQ DNLINE
  583: 08BB E8BB  18            	CLC
  584: 08BC E8BC  69 28         	ADC #LLEN
  585: 08BE E8BE  CA            	DEX
  586: 08BF E8BF  D0 F6         	BNE DWNCHK
  587: 08C1 E8C1  60            	RTS
  588:                          ;
  589: 08C2 E8C2  A6 D6         DNLINE	LDX TBLX
  590: 08C4 E8C4  E0 19         	CPX #NLINES
  591: 08C6 E8C6  F0 02         	BEQ DWNBYE
  592: 08C8 E8C8  E6 D6         	INC TBLX
  593:                          ;
  594: 08CA E8CA  60            DWNBYE	RTS
  595:                          
  596:                          CHKCOL
  597: 08CB E8CB  A2 0F         	LDX #15         ;THERE'S 15 COLORS
  598: 08CD E8CD  DD DA E8      CHK1A	CMP COLTAB,X
  599: 08D0 E8D0  F0 04         	BEQ CHK1B
  600: 08D2 E8D2  CA            	DEX
  601: 08D3 E8D3  10 F8         	BPL CHK1A
  602: 08D5 E8D5  60            	RTS
  603:                          ;
  604:                          CHK1B
  605: 08D6 E8D6  8E 86 02      	STX COLOR       ;CHANGE THE COLOR
  606: 08D9 E8D9  60            	RTS
  607:                          
  608:                          COLTAB
  609:                          ;BLK,WHT,RED,CYAN,MAGENTA,GRN,BLUE,YELLOW
  610: 08DA E8DA  90 05 1C ...  	.BYTE $90,$05,$1C,$9F,$9C,$1E,$1F,$9E
  611: 08E2 E8E2  81 95 96 ...  	.BYTE $81,$95,$96,$97,$98,$99,$9A,$9B
  612:                          
  613:                          ; RSR MODIFY FOR VIC-40 SYSTEM
  614:                          ; RSR 12/31/81 ADD 8 MORE COLORS
 FILE: kernal.a65
   23:                          ;.include "CONKAT (JAPAN CONVERSION TABLES)
 FILE: editor2.a65
    1:                          
    2:                          ;SCREEN SCROLL ROUTINE
    3:                          ;
    4: 08EA E8EA  A5 AC         SCROL	LDA SAL
    5: 08EC E8EC  48            	PHA
    6: 08ED E8ED  A5 AD         	LDA SAH
    7: 08EF E8EF  48            	PHA
    8: 08F0 E8F0  A5 AE         	LDA EAL
    9: 08F2 E8F2  48            	PHA
   10: 08F3 E8F3  A5 AF         	LDA EAH
   11: 08F5 E8F5  48            	PHA
   12:                          ;
   13:                          ;   S C R O L L   U P
   14:                          ;
   15: 08F6 E8F6  A2 FF         SCRO0	LDX #$FF
   16: 08F8 E8F8  C6 D6         	DEC TBLX
   17: 08FA E8FA  C6 C9         	DEC LSXP
   18: 08FC E8FC  CE A5 02      	DEC LINTMP
   19: 08FF E8FF  E8            SCR10	INX             ;GOTO NEXT LINE
   20: 0900 E900  20 F0 E9      	JSR SETPNT      ;POINT TO 'TO' LINE
   21: 0903 E903  E0 18         	CPX #NLINES-1   ;DONE?
   22: 0905 E905  B0 0C         	BCS SCR41       ;BRANCH IF SO
   23:                          ;
   24: 0907 E907  BD F1 EC      	LDA LDTB2+1,X   ;SETUP FROM PNTR
   25: 090A E90A  85 AC         	STA SAL
   26: 090C E90C  B5 DA         	LDA LDTB1+1,X
   27: 090E E90E  20 C8 E9      	JSR SCRLIN      ;SCROLL THIS LINE UP1
   28: 0911 E911  30 EC         	BMI SCR10
   29:                          ;
   30:                          SCR41
   31: 0913 E913  20 FF E9      	JSR CLRLN
   32:                          ;
   33: 0916 E916  A2 00         	LDX #0          ;SCROLL HI BYTE POINTERS
   34: 0918 E918  B5 D9         SCRL5	LDA LDTB1,X
   35: 091A E91A  29 7F         	AND #$7F
   36: 091C E91C  B4 DA         	LDY LDTB1+1,X
   37: 091E E91E  10 02         	BPL SCRL3
   38: 0920 E920  09 80         	ORA #$80
   39: 0922 E922  95 D9         SCRL3	STA LDTB1,X
   40: 0924 E924  E8            	INX
   41: 0925 E925  E0 18         	CPX #NLINES-1
   42: 0927 E927  D0 EF         	BNE SCRL5
   43:                          ;
   44: 0929 E929  A5 F1         	LDA LDTB1+NLINES-1
   45: 092B E92B  09 80         	ORA #$80
   46: 092D E92D  85 F1         	STA LDTB1+NLINES-1
   47: 092F E92F  A5 D9         	LDA LDTB1       ;DOUBLE LINE?
   48: 0931 E931  10 C3         	BPL SCRO0       ;YES...SCROLL AGAIN
   49:                          ;
   50: 0933 E933  E6 D6         	INC TBLX
   51: 0935 E935  EE A5 02      	INC LINTMP
   52: 0938 E938  A9 7F         	LDA #$7F        ;CHECK FOR CONTROL KEY
   53: 093A E93A  8D 00 DC      	STA COLM        ;DROP LINE 2 ON PORT B
   54: 093D E93D  AD 01 DC      	LDA ROWS
   55: 0940 E940  C9 FB         	CMP #$FB        ;SLOW SCROLL KEY?(CONTROL)
   56: 0942 E942  08            	PHP             ;SAVE STATUS. RESTORE PORT B
   57: 0943 E943  A9 7F         	LDA #$7F        ;FOR STOP KEY CHECK
   58: 0945 E945  8D 00 DC      	STA COLM
   59: 0948 E948  28            	PLP
   60: 0949 E949  D0 0B         	BNE MLP42
   61:                          ;
   62: 094B E94B  A0 00         	LDY #0
   63: 094D E94D  EA            MLP4	NOP             ;DELAY
   64: 094E E94E  CA            	DEX
   65: 094F E94F  D0 FC         	BNE MLP4
   66: 0951 E951  88            	DEY
   67: 0952 E952  D0 F9         	BNE MLP4
   68: 0954 E954  84 C6         	STY NDX         ;CLEAR KEY QUEUE BUFFER
   69:                          ;
   70: 0956 E956  A6 D6         MLP42	LDX TBLX
   71:                          ;
   72: 0958 E958  68            PULIND	PLA             ;RESTORE OLD INDIRECTS
   73: 0959 E959  85 AF         	STA EAH
   74: 095B E95B  68            	PLA
   75: 095C E95C  85 AE         	STA EAL
   76: 095E E95E  68            	PLA
   77: 095F E95F  85 AD         	STA SAH
   78: 0961 E961  68            	PLA
   79: 0962 E962  85 AC         	STA SAL
   80: 0964 E964  60            	RTS
   81:                          
   82:                          NEWLIN
   83: 0965 E965  A6 D6         	LDX TBLX
   84: 0967 E967  E8            BMT1	INX
   85:                          ; CPX #NLINES ;EXCEDED THE NUMBER OF LINES ???
   86:                          ; BEQ BMT2 ;VIC-40 CODE
   87: 0968 E968  B5 D9         	LDA LDTB1,X     ;FIND LAST DISPLAY LINE OF THIS LINE
   88: 096A E96A  10 FB         	BPL BMT1        ;TABLE END MARK=>$FF WILL ABORT...ALSO
   89: 096C E96C  8E A5 02      BMT2	STX LINTMP      ;FOUND IT
   90:                          ;GENERATE A NEW LINE
   91: 096F E96F  E0 18         	CPX #NLINES-1   ;IS ONE LINE FROM BOTTOM?
   92: 0971 E971  F0 0E         	BEQ NEWLX       ;YES...JUST CLEAR LAST
   93: 0973 E973  90 0C         	BCC NEWLX       ;<NLINES...INSERT LINE
   94: 0975 E975  20 EA E8      	JSR SCROL       ;SCROLL EVERYTHING
   95: 0978 E978  AE A5 02      	LDX LINTMP
   96: 097B E97B  CA            	DEX
   97: 097C E97C  C6 D6         	DEC TBLX
   98: 097E E97E  4C DA E6      	JMP WLOG30
   99: 0981 E981  A5 AC         NEWLX	LDA SAL
  100: 0983 E983  48            	PHA
  101: 0984 E984  A5 AD         	LDA SAH
  102: 0986 E986  48            	PHA
  103: 0987 E987  A5 AE         	LDA EAL
  104: 0989 E989  48            	PHA
  105: 098A E98A  A5 AF         	LDA EAH
  106: 098C E98C  48            	PHA
  107: 098D E98D  A2 19         	LDX #NLINES
  108: 098F E98F  CA            SCD10	DEX
  109: 0990 E990  20 F0 E9      	JSR SETPNT      ;SET UP TO ADDR
  110: 0993 E993  EC A5 02      	CPX LINTMP
  111: 0996 E996  90 0E         	BCC SCR40
  112: 0998 E998  F0 0C         	BEQ SCR40       ;BRANCH IF FINISHED
  113: 099A E99A  BD EF EC      	LDA LDTB2-1,X   ;SET FROM ADDR
  114: 099D E99D  85 AC         	STA SAL
  115: 099F E99F  B5 D8         	LDA LDTB1-1,X
  116: 09A1 E9A1  20 C8 E9      	JSR SCRLIN      ;SCROLL THIS LINE DOWN
  117: 09A4 E9A4  30 E9         	BMI SCD10
  118:                          SCR40
  119: 09A6 E9A6  20 FF E9      	JSR CLRLN
  120: 09A9 E9A9  A2 17         	LDX #NLINES-2
  121:                          SCRD21
  122: 09AB E9AB  EC A5 02      	CPX LINTMP      ;DONE?
  123: 09AE E9AE  90 0F         	BCC SCRD22      ;BRANCH IF SO
  124: 09B0 E9B0  B5 DA         	LDA LDTB1+1,X
  125: 09B2 E9B2  29 7F         	AND #$7F
  126: 09B4 E9B4  B4 D9         	LDY LDTB1,X     ;WAS IT CONTINUED
  127: 09B6 E9B6  10 02         	BPL SCRD19      ;BRANCH IF SO
  128: 09B8 E9B8  09 80         	ORA #$80
  129: 09BA E9BA  95 DA         SCRD19	STA LDTB1+1,X
  130: 09BC E9BC  CA            	DEX
  131: 09BD E9BD  D0 EC         	BNE SCRD21
  132:                          SCRD22
  133: 09BF E9BF  AE A5 02      	LDX LINTMP
  134: 09C2 E9C2  20 DA E6      	JSR WLOG30
  135:                          ;
  136: 09C5 E9C5  4C 58 E9      	JMP PULIND      ;GO PUL OLD INDIRECTS AND RETURN
  137:                          ;
  138:                          ; SCROLL LINE FROM SAL TO PNT
  139:                          ; AND COLORS FROM EAL TO USER
  140:                          ;
  141:                          SCRLIN
  142: 09C8 E9C8  29 03         	AND #$03        ;CLEAR ANY GARBAGE STUFF
  143: 09CA E9CA  0D 88 02      	ORA HIBASE      ;PUT IN HIORDER BITS
  144: 09CD E9CD  85 AD         	STA SAL+1
  145: 09CF E9CF  20 E0 E9      	JSR TOFROM      ;COLOR TO & FROM ADDRS
  146: 09D2 E9D2  A0 27         	LDY #LLEN-1
  147:                          SCD20
  148: 09D4 E9D4  B1 AC         	LDA (SAL),Y
  149: 09D6 E9D6  91 D1         	STA (PNT),Y
  150: 09D8 E9D8  B1 AE         	LDA (EAL),Y
  151: 09DA E9DA  91 F3         	STA (USER),Y
  152: 09DC E9DC  88            	DEY
  153: 09DD E9DD  10 F5         	BPL SCD20
  154: 09DF E9DF  60            	RTS
  155:                          ;
  156:                          ; DO COLOR TO AND FROM ADDRESSES
  157:                          ; FROM CHARACTER TO AND FROM ADRS
  158:                          ;
  159:                          TOFROM
  160: 09E0 E9E0  20 24 EA      	JSR SCOLOR
  161: 09E3 E9E3  A5 AC         	LDA SAL         ;CHARACTER FROM
  162: 09E5 E9E5  85 AE         	STA EAL         ;MAKE COLOR FROM
  163: 09E7 E9E7  A5 AD         	LDA SAL+1
  164: 09E9 E9E9  29 03         	AND #$03
  165: 09EB E9EB  09 D8         	ORA #>VICCOL
  166: 09ED E9ED  85 AF         	STA EAL+1
  167: 09EF E9EF  60            	RTS
  168:                          ;
  169:                          ; SET UP PNT AND Y
  170:                          ; FROM .X
  171:                          ;
  172: 09F0 E9F0  BD F0 EC      SETPNT	LDA LDTB2,X
  173: 09F3 E9F3  85 D1         	STA PNT
  174: 09F5 E9F5  B5 D9         	LDA LDTB1,X
  175: 09F7 E9F7  29 03         	AND #$03
  176: 09F9 E9F9  0D 88 02      	ORA HIBASE
  177: 09FC E9FC  85 D2         	STA PNT+1
  178: 09FE E9FE  60            	RTS
  179:                          ;
  180:                          ; CLEAR THE LINE POINTED TO BY .X
  181:                          ;
  182: 09FF E9FF  A0 27         CLRLN	LDY #LLEN-1
  183: 0A01 EA01  20 F0 E9      	JSR SETPNT
  184: 0A04 EA04  20 24 EA      	JSR SCOLOR
  185: 0A07 EA07  20 DA E4      CLR10	JSR CPATCH      ;REVERSED ORDER FROM 901227-02
  186: 0A0A EA0A  A9 20         	LDA #$20        ;STORE A SPACE
  187: 0A0C EA0C  91 D1         	STA (PNT),Y     ;TO DISPLAY
  188: 0A0E EA0E  88            	DEY
  189: 0A0F EA0F  10 F6         	BPL CLR10
  190: 0A11 EA11  60            	RTS
  191: 0A12 EA12  EA            	NOP
  192:                          
  193:                          ;
  194:                          ;PUT A CHAR ON THE SCREEN
  195:                          ;
  196: 0A13 EA13  A8            DSPP	TAY             ;SAVE CHAR
  197: 0A14 EA14  A9 02         	LDA #2
  198: 0A16 EA16  85 CD         	STA BLNCT       ;BLINK CURSOR
  199: 0A18 EA18  20 24 EA      	JSR SCOLOR      ;SET COLOR PTR
  200: 0A1B EA1B  98            	TYA             ;RESTORE COLOR
  201: 0A1C EA1C  A4 D3         DSPP2	LDY PNTR        ;GET COLUMN
  202: 0A1E EA1E  91 D1         	STA (PNT),Y      ;CHAR TO SCREEN
  203: 0A20 EA20  8A            	TXA
  204: 0A21 EA21  91 F3         	STA (USER),Y     ;COLOR TO SCREEN
  205: 0A23 EA23  60            	RTS
  206:                          
  207: 0A24 EA24  A5 D1         SCOLOR	LDA PNT         ;GENERATE COLOR PTR
  208: 0A26 EA26  85 F3         	STA USER
  209: 0A28 EA28  A5 D2         	LDA PNT+1
  210: 0A2A EA2A  29 03         	AND #$03
  211: 0A2C EA2C  09 D8         	ORA #>VICCOL    ;VIC COLOR RAM
  212: 0A2E EA2E  85 F4         	STA USER+1
  213: 0A30 EA30  60            	RTS
  214:                          
  215: 0A31 EA31  20 EA FF      KEY	JSR $FFEA       ;UPDATE JIFFY CLOCK
  216: 0A34 EA34  A5 CC         	LDA BLNSW       ;BLINKING CRSR ?
  217: 0A36 EA36  D0 29         	BNE KEY4        ;NO
  218: 0A38 EA38  C6 CD         	DEC BLNCT       ;TIME TO BLINK ?
  219: 0A3A EA3A  D0 25         	BNE KEY4        ;NO
  220: 0A3C EA3C  A9 14         	LDA #20         ;RESET BLINK COUNTER
  221: 0A3E EA3E  85 CD         REPDO	STA BLNCT
  222: 0A40 EA40  A4 D3         	LDY PNTR        ;CURSOR POSITION
  223: 0A42 EA42  46 CF         	LSR BLNON       ;CARRY SET IF ORIGINAL CHAR
  224: 0A44 EA44  AE 87 02      	LDX GDCOL       ;GET CHAR ORIGINAL COLOR
  225: 0A47 EA47  B1 D1         	LDA (PNT),Y      ;GET CHARACTER
  226: 0A49 EA49  B0 11         	BCS KEY5        ;BRANCH IF NOT NEEDED
  227:                          ;
  228: 0A4B EA4B  E6 CF         	INC BLNON       ;SET TO 1
  229: 0A4D EA4D  85 CE         	STA GDBLN       ;SAVE ORIGINAL CHAR
  230: 0A4F EA4F  20 24 EA      	JSR SCOLOR
  231: 0A52 EA52  B1 F3         	LDA (USER),Y     ;GET ORIGINAL COLOR
  232: 0A54 EA54  8D 87 02      	STA GDCOL       ;SAVE IT
  233: 0A57 EA57  AE 86 02      	LDX COLOR       ;BLINK IN THIS COLOR
  234: 0A5A EA5A  A5 CE         	LDA GDBLN       ;WITH ORIGINAL CHARACTER
  235:                          ;
  236: 0A5C EA5C  49 80         KEY5	EOR #$80        ;BLINK IT
  237: 0A5E EA5E  20 1C EA      	JSR DSPP2       ;DISPLAY IT
  238:                          ;
  239: 0A61 EA61  A5 01         KEY4	LDA R6510       ;GET CASSETTE SWITCHES
  240: 0A63 EA63  29 10         	AND #$10        ;IS SWITCH DOWN ?
  241: 0A65 EA65  F0 0A         	BEQ KEY3        ;BRANCH IF SO
  242:                          ;
  243: 0A67 EA67  A0 00         	LDY #0
  244: 0A69 EA69  84 C0         	STY CAS1        ;CASSETTE OFF SWITCH
  245:                          ;
  246: 0A6B EA6B  A5 01         	LDA R6510
  247: 0A6D EA6D  09 20         	ORA #$20
  248: 0A6F EA6F  D0 08         	BNE KL24        ;BRANCH IF MOTOR IS OFF
  249:                          ;
  250: 0A71 EA71  A5 C0         KEY3	LDA CAS1
  251: 0A73 EA73  D0 06         	BNE KL2
  252:                          ;
  253: 0A75 EA75  A5 01         	LDA R6510
  254: 0A77 EA77  29 1F         	AND #%011111    ;TURN MOTOR ON
  255:                          ;
  256:                          KL24
  257: 0A79 EA79  85 01         	STA R6510
  258:                          ;
  259: 0A7B EA7B  20 87 EA      KL2	JSR SCNKEY      ;SCAN KEYBOARD
  260:                          ;
  261: 0A7E EA7E  AD 0D DC      KPREND	LDA D1ICR       ;CLEAR INTERUPT FLAGS
  262: 0A81 EA81  68            	PLA             ;RESTORE REGISTERS
  263: 0A82 EA82  A8            	TAY
  264: 0A83 EA83  68            	PLA
  265: 0A84 EA84  AA            	TAX
  266: 0A85 EA85  68            	PLA
  267: 0A86 EA86  40            	RTI             ;EXIT FROM IRQ ROUTINES
  268:                          
  269:                          ; ****** GENERAL KEYBOARD SCAN ******
  270:                          ;
  271: 0A87 EA87  A9 00         SCNKEY	LDA #$00
  272: 0A89 EA89  8D 8D 02      	STA SHFLAG
  273: 0A8C EA8C  A0 40         	LDY #64         ;LAST KEY INDEX
  274: 0A8E EA8E  84 CB         	STY SFDX        ;NULL KEY FOUND
  275: 0A90 EA90  8D 00 DC      	STA COLM        ;RAISE ALL LINES
  276: 0A93 EA93  AE 01 DC      	LDX ROWS        ;CHECK FOR A KEY DOWN
  277: 0A96 EA96  E0 FF         	CPX #$FF        ;NO KEYS DOWN?
  278: 0A98 EA98  F0 61         	BEQ SCNOUT      ;BRANCH IF NONE
  279: 0A9A EA9A  A8            	TAY             ;.A=0 LDY #0
  280: 0A9B EA9B  A9 81         	LDA #<MODE1
  281: 0A9D EA9D  85 F5         	STA KEYTAB
  282: 0A9F EA9F  A9 EB         	LDA #>MODE1
  283: 0AA1 EAA1  85 F6         	STA KEYTAB+1
  284: 0AA3 EAA3  A9 FE         	LDA #$FE        ;START WITH 1ST COLUMN
  285: 0AA5 EAA5  8D 00 DC      	STA COLM
  286: 0AA8 EAA8  A2 08         SCN20	LDX #8          ;8 ROW KEYBOARD
  287: 0AAA EAAA  48            	PHA             ;SAVE COLUMN OUTPUT INFO
  288: 0AAB EAAB  AD 01 DC      SCN22	LDA ROWS
  289: 0AAE EAAE  CD 01 DC      	CMP ROWS        ;DEBOUNCE KEYBOARD
  290: 0AB1 EAB1  D0 F8         	BNE SCN22
  291: 0AB3 EAB3  4A            SCN30	LSR             ;LOOK FOR KEY DOWN
  292: 0AB4 EAB4  B0 16         	BCS CKIT        ;NONE
  293: 0AB6 EAB6  48            	PHA
  294: 0AB7 EAB7  B1 F5         	LDA (KEYTAB),Y  ;GET CHAR CODE
  295: 0AB9 EAB9  C9 05         	CMP #$05
  296: 0ABB EABB  B0 0C         	BCS SPCK2       ;IF NOT SPECIAL KEY GO ON
  297: 0ABD EABD  C9 03         	CMP #$03        ;COULD IT BE A STOP KEY?
  298: 0ABF EABF  F0 08         	BEQ SPCK2       ;BRANCH IF SO
  299: 0AC1 EAC1  0D 8D 02      	ORA SHFLAG
  300: 0AC4 EAC4  8D 8D 02      	STA SHFLAG      ;PUT SHIFT BIT IN FLAG BYTE
  301: 0AC7 EAC7  10 02         	BPL CKUT
  302:                          SPCK2
  303: 0AC9 EAC9  84 CB         	STY SFDX        ;SAVE KEY NUMBER
  304: 0ACB EACB  68            CKUT	PLA
  305: 0ACC EACC  C8            CKIT	INY
  306: 0ACD EACD  C0 41         	CPY #65
  307: 0ACF EACF  B0 0B         	BCS CKIT1       ;BRANCH IF FINISHED
  308: 0AD1 EAD1  CA            	DEX
  309: 0AD2 EAD2  D0 DF         	BNE SCN30
  310: 0AD4 EAD4  38            	SEC
  311: 0AD5 EAD5  68            	PLA             ;RELOAD COLUMN INFO
  312: 0AD6 EAD6  2A            	ROL
  313: 0AD7 EAD7  8D 00 DC      	STA COLM        ;NEXT COLUMN ON KEYBOARD
  314: 0ADA EADA  D0 CC         	BNE SCN20       ;ALWAYS BRANCH
  315: 0ADC EADC  68            CKIT1	PLA             ;DUMP COLUMN OUTPUT...ALL DONE
  316: 0ADD EADD  6C 8F 02      	JMP (KEYLOG)    ;EVALUATE SHIFT FUNCTIONS
  317: 0AE0 EAE0  A4 CB         REKEY	LDY SFDX        ;GET KEY INDEX
  318: 0AE2 EAE2  B1 F5         	LDA (KEYTAB),Y  ;GET CHAR CODE
  319: 0AE4 EAE4  AA            	TAX             ;SAVE THE CHAR
  320: 0AE5 EAE5  C4 C5         	CPY LSTX        ;SAME AS PREV CHAR INDEX?
  321: 0AE7 EAE7  F0 07         	BEQ RPT10       ;YES
  322: 0AE9 EAE9  A0 10         	LDY #$10        ;NO - RESET DELAY BEFORE REPEAT
  323: 0AEB EAEB  8C 8C 02      	STY DELAY
  324: 0AEE EAEE  D0 36         	BNE CKIT2       ;ALWAYS
  325: 0AF0 EAF0  29 7F         RPT10	AND #$7F        ;UNSHIFT IT
  326: 0AF2 EAF2  2C 8A 02      	BIT RPTFLG      ;CHECK FOR REPEAT DISABLE
  327: 0AF5 EAF5  30 16         	BMI RPT20       ;YES
  328: 0AF7 EAF7  70 49         	BVS SCNRTS
  329: 0AF9 EAF9  C9 7F         	CMP #$7F        ;NO KEYS ?
  330: 0AFB EAFB  F0 29         SCNOUT	BEQ CKIT2       ;YES - GET OUT
  331: 0AFD EAFD  C9 14         	CMP #$14        ;AN INST/DEL KEY ?
  332: 0AFF EAFF  F0 0C         	BEQ RPT20       ;YES - REPEAT IT
  333: 0B01 EB01  C9 20         	CMP #$20        ;A SPACE KEY ?
  334: 0B03 EB03  F0 08         	BEQ RPT20       ;YES
  335: 0B05 EB05  C9 1D         	CMP #$1D        ;A CRSR LEFT/RIGHT ?
  336: 0B07 EB07  F0 04         	BEQ RPT20       ;YES
  337: 0B09 EB09  C9 11         	CMP #$11        ;A CRSR UP/DWN ?
  338: 0B0B EB0B  D0 35         	BNE SCNRTS      ;NO - EXIT
  339: 0B0D EB0D  AC 8C 02      RPT20	LDY DELAY       ;TIME TO REPEAT ?
  340: 0B10 EB10  F0 05         	BEQ RPT40       ;YES
  341: 0B12 EB12  CE 8C 02      	DEC DELAY
  342: 0B15 EB15  D0 2B         	BNE SCNRTS
  343: 0B17 EB17  CE 8B 02      RPT40	DEC KOUNT       ;TIME FOR NEXT REPEAT ?
  344: 0B1A EB1A  D0 26         	BNE SCNRTS      ;NO
  345: 0B1C EB1C  A0 04         	LDY #4          ;YES - RESET CTR
  346: 0B1E EB1E  8C 8B 02      	STY KOUNT
  347: 0B21 EB21  A4 C6         	LDY NDX         ;NO REPEAT IF QUEUE FULL
  348: 0B23 EB23  88            	DEY
  349: 0B24 EB24  10 1C         	BPL SCNRTS
  350:                          CKIT2
  351: 0B26 EB26  A4 CB         	LDY SFDX        ;GET INDEX OF KEY
  352: 0B28 EB28  84 C5         	STY LSTX        ;SAVE THIS INDEX TO KEY FOUND
  353: 0B2A EB2A  AC 8D 02      	LDY SHFLAG      ;UPDATE SHIFT STATUS
  354: 0B2D EB2D  8C 8E 02      	STY LSTSHF
  355: 0B30 EB30  E0 FF         CKIT3	CPX #$FF        ;A NULL KEY OR NO KEY ?
  356: 0B32 EB32  F0 0E         	BEQ SCNRTS      ;BRANCH IF SO
  357: 0B34 EB34  8A            	TXA             ;NEED X AS INDEX SO...
  358: 0B35 EB35  A6 C6         	LDX NDX         ;GET # OF CHARS IN KEY QUEUE
  359: 0B37 EB37  EC 89 02      	CPX XMAX        ;IRQ BUFFER FULL ?
  360: 0B3A EB3A  B0 06         	BCS SCNRTS      ;YES - NO MORE INSERT
  361:                          PUTQUE
  362: 0B3C EB3C  9D 77 02      	STA KEYD,X      ;PUT RAW DATA HERE
  363: 0B3F EB3F  E8            	INX
  364: 0B40 EB40  86 C6         	STX NDX         ;UPDATE KEY QUEUE COUNT
  365: 0B42 EB42  A9 7F         SCNRTS	LDA #$7F        ;SETUP PB7 FOR STOP KEY SENSE
  366: 0B44 EB44  8D 00 DC      	STA COLM
  367: 0B47 EB47  60            	RTS
  368:                          
  369:                          ;
  370:                          ; SHIFT LOGIC
  371:                          ;
  372:                          SHFLOG
  373: 0B48 EB48  AD 8D 02      	LDA SHFLAG
  374: 0B4B EB4B  C9 03         	CMP #$03        ;COMMODORE SHIFT COMBINATION?
  375: 0B4D EB4D  D0 15         	BNE KEYLG2      ;BRANCH IF NOT
  376: 0B4F EB4F  CD 8E 02      	CMP LSTSHF      ;DID I DO THIS ALREADY
  377: 0B52 EB52  F0 EE         	BEQ SCNRTS      ;BRANCH IF SO
  378: 0B54 EB54  AD 91 02      	LDA MODE
  379: 0B57 EB57  30 1D         	BMI SHFOUT      ;DONT SHIFT IF ITS MINUS
  380:                          
  381: 0B59 EB59  AD 18 D0      SWITCH	LDA VICREG+24   ;**********************************:
  382: 0B5C EB5C  49 02         	EOR #$02        ;TURN ON OTHER CASE
  383: 0B5E EB5E  8D 18 D0      	STA VICREG+24   ;POINT THE VIC THERE
  384: 0B61 EB61  4C 76 EB      	JMP SHFOUT
  385:                          
  386:                          ;
  387:                          KEYLG2
  388: 0B64 EB64  0A            	ASL
  389: 0B65 EB65  C9 08         	CMP #$08        ;WAS IT A CONTROL KEY
  390: 0B67 EB67  90 02         	BCC NCTRL       ;BRANCH IF NOT
  391: 0B69 EB69  A9 06         	LDA #6          ;ELSE USE TABLE #4
  392:                          ;
  393:                          NCTRL
  394:                          NOTKAT
  395: 0B6B EB6B  AA            	TAX
  396: 0B6C EB6C  BD 79 EB      	LDA KEYCOD,X
  397: 0B6F EB6F  85 F5         	STA KEYTAB
  398: 0B71 EB71  BD 7A EB      	LDA KEYCOD+1,X
  399: 0B74 EB74  85 F6         	STA KEYTAB+1
  400:                          SHFOUT
  401: 0B76 EB76  4C E0 EA      	JMP REKEY
  402:                          
  403:                          ; RSR 12/08/81 MODIFY FOR VIC-40
  404:                          ; RSR  2/18/82 MODIFY FOR 6526 INPUT PAD SENSE
  405:                          ; RSR  3/11/82 FIX KEYBOARD DEBOUNCE, REPAIR FILE
  406:                          ; RSR  3/11/82 MODIFY FOR COMMODORE 64
 FILE: kernal.a65
 FILE: editor3.a65
    1:                          
    2:                          KEYCOD	;KEYBOARD MODE 'DISPATCH'
    3: 0B79 EB79  81 EB         	.WORD MODE1
    4: 0B7B EB7B  C2 EB         	.WORD MODE2
    5: 0B7D EB7D  03 EC         	.WORD MODE3
    6: 0B7F EB7F  78 EC         	.WORD CONTRL    ;CONTROL KEYS
    7:                          ;
    8:                          ; COTTACONNA MODE
    9:                          ;
   10:                          ;.WORD MODE1  ;PET MODE1
   11:                          ;.WORD MODE2  ;PET MODE2
   12:                          ;.WORD CCTTA3 ;DUMMY WORD
   13:                          ;.WORD CONTRL
   14:                          ;
   15:                          ; EXTENDED KATAKANA MODE
   16:                          ;
   17:                          ;.WORD CCTTA2 ;KATAKANA CHARACTERS
   18:                          ;.WORD CCTTA3 ;LIMITED GRAPHICS
   19:                          ;.WORD CCTTA3 ;DUMMY
   20:                          ;.WORD CONTRL
   21:                          
   22:                          
   23:                          MODE1
   24:                          ;DEL,3,5,7,9,+,YEN SIGN,1
   25: 0B81 EB81  14 0D 1D ...  	.BYTE $14,$0D,$1D,$88,$85,$86,$87,$11
   26:                          ;RETURN,W,R,Y,I,P,*,LEFT ARROW
   27: 0B89 EB89  33 57 41 ...  	.BYTE $33,$57,$41,$34,$5A,$53,$45,$01
   28:                          ;RT CRSR,A,D,G,J,L,;,CTRL
   29: 0B91 EB91  35 52 44 ...  	.BYTE $35,$52,$44,$36,$43,$46,$54,$58
   30:                          ;F4,4,6,8,0,-,HOME,2
   31: 0B99 EB99  37 59 47 ...  	.BYTE $37,$59,$47,$38,$42,$48,$55,$56
   32:                          ;F1,Z,C,B,M,.,R.SHIFTT,SPACE
   33: 0BA1 EBA1  39 49 4A ...  	.BYTE $39,$49,$4A,$30,$4D,$4B,$4F,$4E
   34:                          ;F2,S,F,H,K,:,=,COM.KEY
   35: 0BA9 EBA9  2B 50 4C ...  	.BYTE $2B,$50,$4C,$2D,$2E,$3A,$40,$2C
   36:                          ;F3,E,T,U,O,@,EXP,Q
   37: 0BB1 EBB1  5C 2A 3B ...  	.BYTE $5C,$2A,$3B,$13,$01,$3D,$5E,$2F
   38:                          ;CRSR DWN,L.SHIFT,X,V,N,,,/,STOP
   39: 0BB9 EBB9  31 5F 04 ...  	.BYTE $31,$5F,$04,$32,$20,$02,$51,$03
   40: 0BC1 EBC1  FF            	.BYTE $FF        ;END OF TABLE NULL
   41:                          
   42:                          MODE2	;SHIFT
   43:                          ;INS,%,',),+,YEN,!
   44: 0BC2 EBC2  94 8D 9D ...  	.BYTE $94,$8D,$9D,$8C,$89,$8A,$8B,$91
   45:                          ;SRETURN,W,R,Y,I,P,*,SLEFT ARROW
   46: 0BCA EBCA  23 D7 C1 ...  	.BYTE $23,$D7,$C1,$24,$DA,$D3,$C5,$01
   47:                          ;LF.CRSR,A,D,G,J,L,;,CTRL
   48: 0BD2 EBD2  25 D2 C4 ...  	.BYTE $25,$D2,$C4,$26,$C3,$C6,$D4,$D8
   49:                          ;,$,&,(,      ,"
   50: 0BDA EBDA  27 D9 C7 ...  	.BYTE $27,$D9,$C7,$28,$C2,$C8,$D5,$D6
   51:                          ;F5,Z,C,B,M,.,R.SHIFT,SSPACE
   52: 0BE2 EBE2  29 C9 CA ...  	.BYTE $29,$C9,$CA,$30,$CD,$CB,$CF,$CE
   53:                          ;F6,S,F,H,K,:,=,SCOM.KEY
   54: 0BEA EBEA  DB D0 CC ...  	.BYTE $DB,$D0,$CC,$DD,$3E,$5B,$BA,$3C
   55:                          ;F7,E,T,U,O,@,PI,G
   56: 0BF2 EBF2  A9 C0 5D ...  	.BYTE $A9,$C0,$5D,$93,$01,$3D,$DE,$3F
   57:                          ;CRSR DWN,L.SHIFT,X,V,N,,,/,RUN
   58: 0BFA EBFA  21 5F 04 ...  	.BYTE $21,$5F,$04,$22,$A0,$02,$D1,$83
   59: 0C02 EC02  FF            	.BYTE $FF        ;END OF TABLE NULL
   60:                          ;
   61:                          MODE3	;LEFT WINDOW GRAHPICS
   62:                          ;INS,C10,C12,C14,9,+,POUND SIGN,C8
   63: 0C03 EC03  94 8D 9D ...  	.BYTE $94,$8D,$9D,$8C,$89,$8A,$8B,$91
   64:                          ;RETURN,W,R,Y,I,P,*,LFT.ARROW
   65: 0C0B EC0B  96 B3 B0 ...  	.BYTE $96,$B3,$B0,$97,$AD,$AE,$B1,$01
   66:                          ;LF.CRSR,A,D,G,J,L,;,CTRL
   67: 0C13 EC13  98 B2 AC ...  	.BYTE $98,$B2,$AC,$99,$BC,$BB,$A3,$BD
   68:                          ;F8,C11,C13,C15,0,-,HOME,C9
   69: 0C1B EC1B  9A B7 A5 ...  	.BYTE $9A,$B7,$A5,$9B,$BF,$B4,$B8,$BE
   70:                          ;F2,Z,C,B,M,.,R.SHIFT,SPACE
   71: 0C23 EC23  29 A2 B5 ...  	.BYTE $29,$A2,$B5,$30,$A7,$A1,$B9,$AA
   72:                          ;F4,S,F,H,K,:,=,COM.KEY
   73: 0C2B EC2B  A6 AF B6 ...  	.BYTE $A6,$AF,$B6,$DC,$3E,$5B,$A4,$3C
   74:                          ;F6,E,T,U,O,@,PI,Q
   75: 0C33 EC33  A8 DF 5D ...  	.BYTE $A8,$DF,$5D,$93,$01,$3D,$DE,$3F
   76:                          ;CRSR.UP,L.SHIFT,X,V,N,,,/,STOP
   77: 0C3B EC3B  81 5F 04 ...  	.BYTE $81,$5F,$04,$95,$A0,$02,$AB,$83
   78: 0C43 EC43  FF            	.BYTE $FF        ;END OF TABLE NULL
   79:                          ;CCTTA2 ;WAS CCTTA2 IN JAPANESE VERSION
   80:                          LOWER
   81: 0C44 EC44  C9 0E         	CMP #$0E        ;DOES HE WANT LOWER CASE?
   82: 0C46 EC46  D0 07         	BNE UPPER       ;BRANCH IF NOT
   83: 0C48 EC48  AD 18 D0      	LDA VICREG+24   ;ELSE SET VIC TO POINT TO LOWER CASE
   84: 0C4B EC4B  09 02         	ORA #$02
   85: 0C4D EC4D  D0 09         	BNE ULSET       ;JMP
   86:                          
   87:                          UPPER
   88: 0C4F EC4F  C9 8E         	CMP #$8E        ;DOES HE WANT UPPER CASE
   89: 0C51 EC51  D0 0B         	BNE LOCK        ;BRANCH IF NOT
   90: 0C53 EC53  AD 18 D0      	LDA VICREG+24   ;MAKE SURE VIC POINT TO UPPER/PET SET
   91: 0C56 EC56  29 FD         	AND #$FF-$02
   92: 0C58 EC58  8D 18 D0      ULSET	STA VICREG+24
   93: 0C5B EC5B  4C A8 E6      OUTHRE	JMP LOOP2
   94:                          
   95:                          LOCK
   96: 0C5E EC5E  C9 08         	CMP #8          ;DOES HE WANT TO LOCK IN THIS MODE?
   97: 0C60 EC60  D0 07         	BNE UNLOCK      ;BRANCH IF NOT
   98: 0C62 EC62  A9 80         	LDA #$80        ;ELSE SET LOCK SWITCH ON
   99: 0C64 EC64  0D 91 02      	ORA MODE        ;DON'T HURT ANYTHING - JUST IN CASE
  100: 0C67 EC67  30 09         	BMI LEXIT
  101:                          
  102:                          UNLOCK
  103: 0C69 EC69  C9 09         	CMP #9          ;DOES HE WANT TO UNLOCK THE KEYBOARD?
  104: 0C6B EC6B  D0 EE         	BNE OUTHRE      ;BRANCH IF NOT
  105: 0C6D EC6D  A9 7F         	LDA #$7F        ;CLEAR THE LOCK SWITCH
  106: 0C6F EC6F  2D 91 02      	AND MODE        ;DONT HURT ANYTHING
  107: 0C72 EC72  8D 91 02      LEXIT	STA MODE
  108: 0C75 EC75  4C A8 E6      	JMP LOOP2       ;GET OUT
  109:                          ;CCTTA3
  110:                          ;.BYTE $04,$FF,$FF,$FF,$FF,$FF,$E2,$9D
  111:                          ;RUN-K24-K31
  112:                          ;.BYTE $83,$01,$FF,$FF,$FF,$FF,$FF,$91
  113:                          ;K32-K39.F5
  114:                          ;.BYTE $A0,$FF,$FF,$FF,$FF,$EE,$01,$89
  115:                          ;CO.KEY,K40-K47.F6
  116:                          ;.BYTE $02,$FF,$FF,$FF,$FF,$E1,$FD,$8A
  117:                          ;K48-K55
  118:                          ;.BYTE $FF,$FF,$FF,$FF,$FF,$B0,$E0,$8B
  119:                          ;K56-K63
  120:                          ;.BYTE $F2,$F4,$F6,$FF,$F0,$ED,$93,$8C
  121:                          ;.BYTE $FF ;END OF TABLE NULL
  122:                          
  123:                          CONTRL
  124:                          ;NULL,RED,PURPLE,BLUE,RVS ,NULL,NULL,BLACK
  125: 0C78 EC78  FF FF FF ...  	.BYTE $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
  126:                          ;NULL, W  ,REVERSE, Y  , I  , P  ,NULL,MUSIC
  127: 0C80 EC80  1C 17 01 ...  	.BYTE $1C,$17,$01,$9F,$1A,$13,$05,$FF
  128: 0C88 EC88  9C 12 04 ...  	.BYTE $9C,$12,$04,$1E,$03,$06,$14,$18
  129:                          ;NULL,CYAN,GREEN,YELLOW,RVS OFF,NULL,NULL,WHITE
  130: 0C90 EC90  1F 19 07 ...  	.BYTE $1F,$19,$07,$9E,$02,$08,$15,$16
  131: 0C98 EC98  12 09 0A ...  	.BYTE $12,$09,$0A,$92,$0D,$0B,$0F,$0E
  132: 0CA0 ECA0  FF 10 0C ...  	.BYTE $FF,$10,$0C,$FF,$FF,$1B,$00,$FF
  133: 0CA8 ECA8  1C FF 1D ...  	.BYTE $1C,$FF,$1D,$FF,$FF,$1F,$1E,$FF
  134: 0CB0 ECB0  90 06 FF ...  	.BYTE $90,$06,$FF,$05,$FF,$FF,$11,$FF
  135: 0CB8 ECB8  FF            	.BYTE $FF        ;END OF TABLE NULL
  136:                          TVIC
  137: 0CB9 ECB9  00 00 00 ...  	.BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;SPRITES (0-16)
  138: 0CCA ECCA  9B 37 00 ...  	.BYTE $9B,55,0,0,0,$08,0,$14,$0F,0,0,0,0,0,0 ;DATA (17-31) RC=311
  139: 0CD9 ECD9  0E 06 01 ...  	.BYTE FCOLOR,BCOLOR,1,2,3,4,0,1,2,3,4,5,6,7 ;32-46
  140:                          ;
  141: 0CE7 ECE7  4C 4F 41 ...  RUNTB	.BYTE "LOAD",$D,"RUN",$D
  142:                          ;
  143:                          LINZ0	= VICSCN
  144:                          LINZ1	= LINZ0+LLEN
  145:                          LINZ2	= LINZ1+LLEN
  146:                          LINZ3	= LINZ2+LLEN
  147:                          LINZ4	= LINZ3+LLEN
  148:                          LINZ5	= LINZ4+LLEN
  149:                          LINZ6	= LINZ5+LLEN
  150:                          LINZ7	= LINZ6+LLEN
  151:                          LINZ8	= LINZ7+LLEN
  152:                          LINZ9	= LINZ8+LLEN
  153:                          LINZ10	= LINZ9+LLEN
  154:                          LINZ11	= LINZ10+LLEN
  155:                          LINZ12	= LINZ11+LLEN
  156:                          LINZ13	= LINZ12+LLEN
  157:                          LINZ14	= LINZ13+LLEN
  158:                          LINZ15	= LINZ14+LLEN
  159:                          LINZ16	= LINZ15+LLEN
  160:                          LINZ17	= LINZ16+LLEN
  161:                          LINZ18	= LINZ17+LLEN
  162:                          LINZ19	= LINZ18+LLEN
  163:                          LINZ20	= LINZ19+LLEN
  164:                          LINZ21	= LINZ20+LLEN
  165:                          LINZ22	= LINZ21+LLEN
  166:                          LINZ23	= LINZ22+LLEN
  167:                          LINZ24	= LINZ23+LLEN
  168:                          
  169:                          ;****** SCREEN LINES LO BYTE TABLE ******
  170:                          ;
  171:                          LDTB2
  172: 0CF0 ECF0  00            	.BYTE <LINZ0
  173: 0CF1 ECF1  28            	.BYTE <LINZ1
  174: 0CF2 ECF2  50            	.BYTE <LINZ2
  175: 0CF3 ECF3  78            	.BYTE <LINZ3
  176: 0CF4 ECF4  A0            	.BYTE <LINZ4
  177: 0CF5 ECF5  C8            	.BYTE <LINZ5
  178: 0CF6 ECF6  F0            	.BYTE <LINZ6
  179: 0CF7 ECF7  18            	.BYTE <LINZ7
  180: 0CF8 ECF8  40            	.BYTE <LINZ8
  181: 0CF9 ECF9  68            	.BYTE <LINZ9
  182: 0CFA ECFA  90            	.BYTE <LINZ10
  183: 0CFB ECFB  B8            	.BYTE <LINZ11
  184: 0CFC ECFC  E0            	.BYTE <LINZ12
  185: 0CFD ECFD  08            	.BYTE <LINZ13
  186: 0CFE ECFE  30            	.BYTE <LINZ14
  187: 0CFF ECFF  58            	.BYTE <LINZ15
  188: 0D00 ED00  80            	.BYTE <LINZ16
  189: 0D01 ED01  A8            	.BYTE <LINZ17
  190: 0D02 ED02  D0            	.BYTE <LINZ18
  191: 0D03 ED03  F8            	.BYTE <LINZ19
  192: 0D04 ED04  20            	.BYTE <LINZ20
  193: 0D05 ED05  48            	.BYTE <LINZ21
  194: 0D06 ED06  70            	.BYTE <LINZ22
  195: 0D07 ED07  98            	.BYTE <LINZ23
  196: 0D08 ED08  C0            	.BYTE <LINZ24
  197:                          
  198:                          ; RSR 12/08/81 MODIFY FOR VIC-40 KEYSCAN <== HI BOB!
  199:                          ; RSR  2/17/81 MODIFY FOR THE STINKING 6526R2 CHIP
  200:                          ; RSR  3/11/82 MODIFY FOR COMMODORE 64
  201:                          ; RSR  3/28/82 MODIFY FOR NEW PLA
  202:                          ; RSR  6/22/82 ADD 311 PLA RASTER COMPARE
 FILE: kernal.a65
 FILE: serial40.a65
    1:                          
    2:                          ;COMMAND SERIAL BUS DEVICE TO TALK
    3:                          ;
    4: 0D09 ED09  09 40         TALK	ORA #$40        ;MAKE A TALK ADR
    5: 0D0B ED0B  2C            	.BYTE $2C       ;SKIP TWO BYTES
    6:                          
    7:                          ;COMMAND SERIAL BUS DEVICE TO LISTEN
    8:                          ;
    9: 0D0C ED0C  09 20         LISTN	ORA #$20        ;MAKE A LISTEN ADR
   10: 0D0E ED0E  20 A4 F0      	JSR RSP232      ;PROTECT SELF FROM RS232 NMI'S
   11: 0D11 ED11  48            LIST1	PHA
   12:                          ;
   13:                          ;
   14: 0D12 ED12  24 94         	BIT C3P0        ;CHARACTER LEFT IN BUF?
   15: 0D14 ED14  10 0A         	BPL LIST2       ;NO...
   16:                          ;
   17:                          ;SEND BUFFERED CHARACTER
   18:                          ;
   19: 0D16 ED16  38            	SEC             ;SET EOI FLAG
   20: 0D17 ED17  66 A3         	ROR R2D2
   21:                          ;
   22: 0D19 ED19  20 40 ED      	JSR ISOUR       ;SEND LAST CHARACTER
   23:                          ;
   24: 0D1C ED1C  46 94         	LSR C3P0        ;BUFFER CLEAR FLAG
   25: 0D1E ED1E  46 A3         	LSR R2D2        ;CLEAR EOI FLAG
   26:                          ;
   27:                          ;
   28: 0D20 ED20  68            LIST2	PLA             ;TALK/LISTEN ADDRESS
   29: 0D21 ED21  85 95         	STA BSOUR
   30: 0D23 ED23  78            	SEI
   31: 0D24 ED24  20 97 EE      	JSR DATAHI
   32: 0D27 ED27  C9 3F         	CMP #$3F        ;CLKHI ONLY ON UNLISTEN
   33: 0D29 ED29  D0 03         	BNE LIST5
   34: 0D2B ED2B  20 85 EE      	JSR CLKHI
   35:                          ;
   36: 0D2E ED2E  AD 00 DD      LIST5	LDA D2PRA       ;ASSERT ATTENTION
   37: 0D31 ED31  09 08         	ORA #$08
   38: 0D33 ED33  8D 00 DD      	STA D2PRA
   39:                          ;
   40:                          
   41: 0D36 ED36  78            ISOURA	SEI
   42: 0D37 ED37  20 8E EE      	JSR CLKLO       ;SET CLOCK LINE LOW
   43: 0D3A ED3A  20 97 EE      	JSR DATAHI
   44: 0D3D ED3D  20 B3 EE      	JSR W1MS        ;DELAY 1 MS
   45:                          
   46: 0D40 ED40  78            ISOUR	SEI             ;NO IRQ'S ALLOWED
   47: 0D41 ED41  20 97 EE      	JSR DATAHI      ;MAKE SURE DATA IS RELEASED
   48: 0D44 ED44  20 A9 EE      	JSR DEBPIA      ;DATA SHOULD BE LOW
   49: 0D47 ED47  B0 64         	BCS NODEV
   50: 0D49 ED49  20 85 EE      	JSR CLKHI       ;CLOCK LINE HIGH
   51: 0D4C ED4C  24 A3         	BIT R2D2        ;EOI FLAG TEST
   52: 0D4E ED4E  10 0A         	BPL NOEOI
   53:                          ; DO THE EOI
   54: 0D50 ED50  20 A9 EE      ISR02	JSR DEBPIA      ;WAIT FOR DATA TO GO HIGH
   55: 0D53 ED53  90 FB         	BCC ISR02
   56:                          ;
   57: 0D55 ED55  20 A9 EE      ISR03	JSR DEBPIA      ;WAIT FOR DATA TO GO LOW
   58: 0D58 ED58  B0 FB         	BCS ISR03
   59:                          ;
   60: 0D5A ED5A  20 A9 EE      NOEOI	JSR DEBPIA      ;WAIT FOR DATA HIGH
   61: 0D5D ED5D  90 FB         	BCC NOEOI
   62: 0D5F ED5F  20 8E EE      	JSR CLKLO       ;SET CLOCK LOW
   63:                          ;
   64:                          ; SET TO SEND DATA
   65:                          ;
   66: 0D62 ED62  A9 08         	LDA #$08        ;COUNT 8 BITS
   67: 0D64 ED64  85 A5         	STA COUNT
   68:                          ;
   69:                          ISR01
   70: 0D66 ED66  AD 00 DD      	LDA D2PRA       ;DEBOUNCE THE BUS
   71: 0D69 ED69  CD 00 DD      	CMP D2PRA
   72: 0D6C ED6C  D0 F8         	BNE ISR01
   73: 0D6E ED6E  0A            	ASL             ;SET THE FLAGS
   74: 0D6F ED6F  90 3F         	BCC FRMERR      ;DATA MUST BE HI
   75:                          ;
   76: 0D71 ED71  66 95         	ROR BSOUR       ;NEXT BIT INTO CARRY
   77: 0D73 ED73  B0 05         	BCS ISRHI
   78: 0D75 ED75  20 A0 EE      	JSR DATALO
   79: 0D78 ED78  D0 03         	BNE ISRCLK
   80: 0D7A ED7A  20 97 EE      ISRHI	JSR DATAHI
   81: 0D7D ED7D  20 85 EE      ISRCLK	JSR CLKHI       ;CLOCK HI
   82: 0D80 ED80  EA            	NOP
   83: 0D81 ED81  EA            	NOP
   84: 0D82 ED82  EA            	NOP
   85: 0D83 ED83  EA            	NOP
   86: 0D84 ED84  AD 00 DD      	LDA D2PRA
   87: 0D87 ED87  29 DF         	AND #$FF-$20    ;DATA HIGH
   88: 0D89 ED89  09 10         	ORA #$10        ;CLOCK LOW
   89: 0D8B ED8B  8D 00 DD      	STA D2PRA
   90: 0D8E ED8E  C6 A5         	DEC COUNT
   91: 0D90 ED90  D0 D4         	BNE ISR01
   92: 0D92 ED92  A9 04         	LDA #$04        ;SET TIMER FOR 1MS
   93: 0D94 ED94  8D 07 DC      	STA D1T2H
   94: 0D97 ED97  A9 19         	LDA #TIMRB      ;TRIGGER TIMER
   95: 0D99 ED99  8D 0F DC      	STA D1CRB
   96: 0D9C ED9C  AD 0D DC      	LDA D1ICR       ;CLEAR THE TIMER FLAGS<<<<<<<<<<<<<
   97: 0D9F ED9F  AD 0D DC      ISR04	LDA D1ICR
   98: 0DA2 EDA2  29 02         	AND #$02
   99: 0DA4 EDA4  D0 0A         	BNE FRMERR
  100: 0DA6 EDA6  20 A9 EE      	JSR DEBPIA
  101: 0DA9 EDA9  B0 F4         	BCS ISR04
  102: 0DAB EDAB  58            	CLI             ;LET IRQ'S CONTINUE
  103: 0DAC EDAC  60            	RTS
  104:                          ;
  105:                          NODEV	;DEVICE NOT PRESENT ERROR
  106: 0DAD EDAD  A9 80         	LDA #$80
  107: 0DAF EDAF  2C            	.BYTE $2C
  108:                          FRMERR	;FRAMING ERROR
  109: 0DB0 EDB0  A9 03         	LDA #$03
  110: 0DB2 EDB2  20 1C FE      CSBERR	JSR UDST        ;COMMODORE SERIAL BUSS ERROR ENTRY
  111: 0DB5 EDB5  58            	CLI             ;IRQ'S WERE OFF...TURN ON
  112: 0DB6 EDB6  18            	CLC             ;MAKE SURE NO KERNAL ERROR RETURNED
  113: 0DB7 EDB7  90 4A         	BCC DLABYE      ;TURN ATN OFF ,RELEASE ALL LINES
  114:                          ;
  115:                          
  116:                          ;SEND SECONDARY ADDRESS AFTER LISTEN
  117:                          ;
  118: 0DB9 EDB9  85 95         SECND	STA BSOUR       ;BUFFER CHARACTER
  119: 0DBB EDBB  20 36 ED      	JSR ISOURA      ;SEND IT
  120:                          
  121:                          ;RELEASE ATTENTION AFTER LISTEN
  122:                          ;
  123: 0DBE EDBE  AD 00 DD      SCATN	LDA D2PRA
  124: 0DC1 EDC1  29 F7         	AND #$FF-$08
  125: 0DC3 EDC3  8D 00 DD      	STA D2PRA       ;RELEASE ATTENTION
  126: 0DC6 EDC6  60            	RTS
  127:                          
  128:                          ;TALK SECOND ADDRESS
  129:                          ;
  130: 0DC7 EDC7  85 95         TKSA	STA BSOUR       ;BUFFER CHARACTER
  131: 0DC9 EDC9  20 36 ED      	JSR ISOURA      ;SEND SECOND ADDR
  132:                          
  133:                          TKATN	;SHIFT OVER TO LISTENER
  134: 0DCC EDCC  78            	SEI             ;NO IRQ'S HERE
  135: 0DCD EDCD  20 A0 EE      	JSR DATALO      ;DATA LINE LOW
  136: 0DD0 EDD0  20 BE ED      	JSR SCATN
  137: 0DD3 EDD3  20 85 EE      	JSR CLKHI       ;CLOCK LINE HIGH JSR/RTS
  138: 0DD6 EDD6  20 A9 EE      TKATN1	JSR DEBPIA      ;WAIT FOR CLOCK TO GO LOW
  139: 0DD9 EDD9  30 FB         	BMI TKATN1
  140: 0DDB EDDB  58            	CLI             ;IRQ'S OKAY NOW
  141: 0DDC EDDC  60            	RTS
  142:                          
  143:                          ;BUFFERED OUTPUT TO SERIAL BUS
  144:                          ;
  145: 0DDD EDDD  24 94         CIOUT	BIT C3P0        ;BUFFERED CHAR?
  146: 0DDF EDDF  30 05         	BMI CI2         ;YES...SEND LAST
  147:                          ;
  148: 0DE1 EDE1  38            	SEC             ;NO...
  149: 0DE2 EDE2  66 94         	ROR C3P0        ;SET BUFFERED CHAR FLAG
  150: 0DE4 EDE4  D0 05         	BNE CI4         ;BRANCH ALWAYS
  151:                          ;
  152: 0DE6 EDE6  48            CI2	PHA             ;SAVE CURRENT CHAR
  153: 0DE7 EDE7  20 40 ED      	JSR ISOUR       ;SEND LAST CHAR
  154: 0DEA EDEA  68            	PLA             ;RESTORE CURRENT CHAR
  155: 0DEB EDEB  85 95         CI4	STA BSOUR       ;BUFFER CURRENT CHAR
  156: 0DED EDED  18            	CLC             ;CARRY-GOOD EXIT
  157: 0DEE EDEE  60            	RTS
  158:                          
  159:                          ;SEND UNTALK COMMAND ON SERIAL BUS
  160:                          ;
  161: 0DEF EDEF  78            UNTLK	SEI
  162: 0DF0 EDF0  20 8E EE      	JSR CLKLO
  163: 0DF3 EDF3  AD 00 DD      	LDA D2PRA       ;PULL ATN
  164: 0DF6 EDF6  09 08         	ORA #$08
  165: 0DF8 EDF8  8D 00 DD      	STA D2PRA
  166: 0DFB EDFB  A9 5F         	LDA #$5F        ;UNTALK COMMAND
  167: 0DFD EDFD  2C            	.BYTE $2C       ;SKIP TWO BYTES
  168:                          
  169:                          ;SEND UNLISTEN COMMAND ON SERIAL BUS
  170:                          ;
  171: 0DFE EDFE  A9 3F         UNLSN	LDA #$3F        ;UNLISTEN COMMAND
  172: 0E00 EE00  20 11 ED      	JSR LIST1       ;SEND IT
  173:                          ;
  174:                          ; RELEASE ALL LINES
  175: 0E03 EE03  20 BE ED      DLABYE	JSR SCATN       ;ALWAYS RELEASE ATN
  176:                          ; DELAY THEN RELEASE CLOCK AND DATA
  177:                          ;
  178: 0E06 EE06  8A            DLADLH	TXA             ;DELAY APPROX 60 US
  179: 0E07 EE07  A2 0A         	LDX #10
  180: 0E09 EE09  CA            DLAD00	DEX
  181: 0E0A EE0A  D0 FD         	BNE DLAD00
  182: 0E0C EE0C  AA            	TAX
  183: 0E0D EE0D  20 85 EE      	JSR CLKHI
  184: 0E10 EE10  4C 97 EE      	JMP DATAHI
  185:                          
  186:                          ;INPUT A BYTE FROM SERIAL BUS
  187:                          ;
  188:                          ACPTR
  189: 0E13 EE13  78            	SEI             ;NO IRQ ALLOWED
  190: 0E14 EE14  A9 00         	LDA #$00        ;SET EOI/ERROR FLAG
  191: 0E16 EE16  85 A5         	STA COUNT
  192: 0E18 EE18  20 85 EE      	JSR CLKHI       ;MAKE SURE CLOCK LINE IS RELEASED
  193: 0E1B EE1B  20 A9 EE      ACP00A	JSR DEBPIA      ;WAIT FOR CLOCK HIGH
  194: 0E1E EE1E  10 FB         	BPL ACP00A
  195:                          ;
  196:                          EOIACP
  197: 0E20 EE20  A9 01         	LDA #$01        ;SET TIMER 2 FOR 256US
  198: 0E22 EE22  8D 07 DC      	STA D1T2H
  199: 0E25 EE25  A9 19         	LDA #TIMRB
  200: 0E27 EE27  8D 0F DC      	STA D1CRB
  201: 0E2A EE2A  20 97 EE      	JSR DATAHI      ;DATA LINE HIGH (MAKES TIMMING MORE LIKE VIC-20
  202: 0E2D EE2D  AD 0D DC      	LDA D1ICR       ;CLEAR THE TIMER FLAGS<<<<<<<<<<<<
  203: 0E30 EE30  AD 0D DC      ACP00	LDA D1ICR
  204: 0E33 EE33  29 02         	AND #$02        ;CHECK THE TIMER
  205: 0E35 EE35  D0 07         	BNE ACP00B      ;RAN OUT.....
  206: 0E37 EE37  20 A9 EE      	JSR DEBPIA      ;CHECK THE CLOCK LINE
  207: 0E3A EE3A  30 F4         	BMI ACP00       ;NO NOT YET
  208: 0E3C EE3C  10 18         	BPL ACP01       ;YES.....
  209:                          ;
  210: 0E3E EE3E  A5 A5         ACP00B	LDA COUNT       ;CHECK FOR ERROR (TWICE THRU TIMEOUTS)
  211: 0E40 EE40  F0 05         	BEQ ACP00C
  212: 0E42 EE42  A9 02         	LDA #2
  213: 0E44 EE44  4C B2 ED      	JMP CSBERR      ; ST = 2 READ TIMEOUT
  214:                          ;
  215:                          ; TIMER RAN OUT DO AN EOI THING
  216:                          ;
  217: 0E47 EE47  20 A0 EE      ACP00C	JSR DATALO      ;DATA LINE LOW
  218: 0E4A EE4A  20 85 EE      	JSR CLKHI       ; DELAY AND THEN SET DATAHI (FIX FOR 40US C64)
  219: 0E4D EE4D  A9 40         	LDA #$40
  220: 0E4F EE4F  20 1C FE      	JSR UDST        ;OR AN EOI BIT INTO STATUS
  221: 0E52 EE52  E6 A5         	INC COUNT       ;GO AROUND AGAIN FOR ERROR CHECK ON EOI
  222: 0E54 EE54  D0 CA         	BNE EOIACP
  223:                          ;
  224:                          ; DO THE BYTE TRANSFER
  225:                          ;
  226: 0E56 EE56  A9 08         ACP01	LDA #08         ;SET UP COUNTER
  227: 0E58 EE58  85 A5         	STA COUNT
  228:                          ;
  229: 0E5A EE5A  AD 00 DD      ACP03	LDA D2PRA       ;WAIT FOR CLOCK HIGH
  230: 0E5D EE5D  CD 00 DD      	CMP D2PRA       ;DEBOUNCE
  231: 0E60 EE60  D0 F8         	BNE ACP03
  232: 0E62 EE62  0A            	ASL             ;SHIFT DATA INTO CARRY
  233: 0E63 EE63  10 F5         	BPL ACP03       ;CLOCK STILL LOW...
  234: 0E65 EE65  66 A4         	ROR BSOUR1      ;ROTATE DATA IN
  235:                          ;
  236: 0E67 EE67  AD 00 DD      ACP03A	LDA D2PRA       ;WAIT FOR CLOCK LOW
  237: 0E6A EE6A  CD 00 DD      	CMP D2PRA       ;DEBOUNCE
  238: 0E6D EE6D  D0 F8         	BNE ACP03A
  239: 0E6F EE6F  0A            	ASL  
  240: 0E70 EE70  30 F5         	BMI ACP03A
  241: 0E72 EE72  C6 A5         	DEC COUNT
  242: 0E74 EE74  D0 E4         	BNE ACP03       ;MORE BITS.....
  243:                          ;...EXIT...
  244: 0E76 EE76  20 A0 EE      	JSR DATALO      ;DATA LOW
  245: 0E79 EE79  24 90         	BIT STATUS      ;CHECK FOR EOI
  246: 0E7B EE7B  50 03         	BVC ACP04       ;NONE...
  247:                          ;
  248: 0E7D EE7D  20 06 EE      	JSR DLADLH      ;DELAY THEN SET DATA HIGH
  249:                          ;
  250: 0E80 EE80  A5 A4         ACP04	LDA BSOUR1
  251: 0E82 EE82  58            	CLI             ;IRQ IS OK
  252: 0E83 EE83  18            	CLC             ;GOOD EXIT
  253: 0E84 EE84  60            	RTS
  254:                          ;
  255:                          CLKHI	;SET CLOCK LINE HIGH (INVERTED)
  256: 0E85 EE85  AD 00 DD      	LDA D2PRA
  257: 0E88 EE88  29 EF         	AND #$FF-$10
  258: 0E8A EE8A  8D 00 DD      	STA D2PRA
  259: 0E8D EE8D  60            	RTS
  260:                          ;
  261:                          CLKLO	;SET CLOCK LINE LOW  (INVERTED)
  262: 0E8E EE8E  AD 00 DD      	LDA D2PRA
  263: 0E91 EE91  09 10         	ORA #$10
  264: 0E93 EE93  8D 00 DD      	STA D2PRA
  265: 0E96 EE96  60            	RTS
  266:                          ;
  267:                          ;
  268:                          DATAHI	;SET DATA LINE HIGH (INVERTED)
  269: 0E97 EE97  AD 00 DD      	LDA D2PRA
  270: 0E9A EE9A  29 DF         	AND #$FF-$20
  271: 0E9C EE9C  8D 00 DD      	STA D2PRA
  272: 0E9F EE9F  60            	RTS
  273:                          ;
  274:                          DATALO	;SET DATA LINE LOW  (INVERTED)
  275: 0EA0 EEA0  AD 00 DD      	LDA D2PRA
  276: 0EA3 EEA3  09 20         	ORA #$20
  277: 0EA5 EEA5  8D 00 DD      	STA D2PRA
  278: 0EA8 EEA8  60            	RTS
  279:                          ;
  280: 0EA9 EEA9  AD 00 DD      DEBPIA	LDA D2PRA       ;DEBOUNCE THE PIA
  281: 0EAC EEAC  CD 00 DD      	CMP D2PRA
  282: 0EAF EEAF  D0 F8         	BNE DEBPIA
  283: 0EB1 EEB1  0A            	ASL             ;SHIFT THE DATA BIT INTO THE CARRY...
  284: 0EB2 EEB2  60            	RTS             ;...AND THE CLOCK INTO NEG FLAG
  285:                          ;
  286:                          W1MS	;DELAY 1MS USING LOOP
  287: 0EB3 EEB3  8A            	TXA             ;SAVE .X
  288: 0EB4 EEB4  A2 B8         	LDX #200-16     ;1000US-(1000/500*8=#40US HOLDS)
  289: 0EB6 EEB6  CA            W1MS1	DEX             ;5US LOOP
  290: 0EB7 EEB7  D0 FD         	BNE W1MS1
  291: 0EB9 EEB9  AA            	TAX             ;RESTORE .X
  292: 0EBA EEBA  60            	RTS
  293:                          
  294:                          ;*******************************
  295:                          ;WRITTEN 8/11/80 BOB FAIRBAIRN
  296:                          ;TEST SERIAL0.6 8/12/80  RJF
  297:                          ;CHANGE I/O STRUCTURE 8/21/80 RJF
  298:                          ;MORE I/O CHANGES 8/24/80 RJF
  299:                          ;FINAL RELEASE INTO KERNAL 8/26/80 RJF
  300:                          ;SOME CLEAN UP 9/8/80 RSR
  301:                          ;ADD IRQ PROTECT ON ISOUR AND TKATN 9/22/80 RSR
  302:                          ;FIX UNTALK 10/7/80 RSR
  303:                          ;MODIFY FOR VIC-40 I/O SYSTEM 12/08/81 RSR
  304:                          ;ADD SEI TO (UNTLK,ISOURA,LIST2) 12/14/81 RSR
  305:                          ;MODIFY FOR 6526 FLAGS FIX ERRS 12/31/81 RSR
  306:                          ;MODIFY FOR COMMODORE 64 I/O  3/11/82 RSR
  307:                          ;CHANGE ACPTR EOI FOR BETTER RESPONSE 3/28/82 RSR
  308:                          ;CHANGE WAIT 1 MS ROUTINE FOR LESS CODE 4/8/82 RSR
  309:                          ;******************************
  310:                          
 FILE: kernal.a65
 FILE: rs232trn.a65
    1:                          
    2:                          ; RSTRAB - ENTRY FOR NMI CONTINUE ROUTINE
    3:                          ; RSTBGN - ENTRY FOR START TRANSMITTER
    4:                          ;
    5:                          ;   RSR - 8/18/80
    6:                          ;
    7:                          ; VARIABLES USED
    8:                          ;   BITTS - # OF BITS TO BE SENT (<>0 NOT DONE)
    9:                          ;   NXTBIT - BYTE CONTAINS NEXT BIT TO BE SENT
   10:                          ;   ROPRTY - BYTE CONTAINS PARITY BIT CALCULATED
   11:                          ;   RODATA - STORES DATA BYTE CURRENTLY BEING TRANSMITTED
   12:                          ;   RODBS - OUTPUT BUFFER INDEX START
   13:                          ;   RODBE - OUTPUT BUFFER INDEX END
   14:                          ;   IF RODBS=RODBE THEN BUFFER EMPTY
   15:                          ;   ROBUF - INDIRECT POINTER TO DATA BUFFER
   16:                          ;   RSSTAT - RS-232 STATUS BYTE
   17:                          ;
   18:                          ;   XXX US - NORMAL BIT PATH
   19:                          ;   XXX US - WORST CASE PARITY BIT PATH
   20:                          ;   XXX US - STOP BIT PATH
   21:                          ;   XXX US - START BIT PATH
   22:                          ;
   23: 0EBB EEBB  A5 B4         RSTRAB	LDA BITTS       ;CHECK FOR PLACE IN BYTE...
   24: 0EBD EEBD  F0 47         	BEQ RSTBGN      ;...DONE, =0 START NEXT
   25:                          ;
   26: 0EBF EEBF  30 3F         	BMI RST050      ;...DOING STOP BITS
   27:                          ;
   28: 0EC1 EEC1  46 B6         	LSR RODATA      ;SHIFT DATA INTO CARRY
   29: 0EC3 EEC3  A2 00         	LDX #00         ;PREPARE FOR A ZERO
   30: 0EC5 EEC5  90 01         	BCC RST005      ;YES...A ZERO
   31: 0EC7 EEC7  CA            	DEX             ;NO...MAKE AN $FF
   32: 0EC8 EEC8  8A            RST005	TXA             ;READY TO SEND
   33:                          ;
   34: 0EC9 EEC9  45 BD         	EOR ROPRTY      ;CALC INTO PARITY
   35: 0ECB EECB  85 BD         	STA ROPRTY
   36:                          ;
   37: 0ECD EECD  C6 B4         	DEC BITTS       ;BIT COUNT DOWN
   38: 0ECF EECF  F0 06         	BEQ RST010      ;WANT A PARITY INSTEAD
   39:                          ;
   40: 0ED1 EED1  8A            RSTEXT	TXA             ;CALC BIT WHOLE TO SEND
   41: 0ED2 EED2  29 04         	AND #$04        ;GOES OUT D2PA2
   42: 0ED4 EED4  85 B5         	STA NXTBIT
   43: 0ED6 EED6  60            	RTS
   44:                          
   45:                          ; CALCULATE PARITY
   46:                          ;  NXTBIT =0 UPON ENTRY
   47:                          ;
   48: 0ED7 EED7  A9 20         RST010	LDA #$20        ;CHECK 6551 REG BITS
   49: 0ED9 EED9  2C 94 02      	BIT M51CDR
   50: 0EDC EEDC  F0 14         	BEQ RSPNO       ;...NO PARITY, SEND A STOP
   51: 0EDE EEDE  30 1C         	BMI RST040      ;...NOT REAL PARITY
   52: 0EE0 EEE0  70 14         	BVS RST030      ;...EVEN PARITY
   53:                          ;
   54: 0EE2 EEE2  A5 BD         	LDA ROPRTY      ;CALC ODD PARITY
   55: 0EE4 EEE4  D0 01         	BNE RSPEXT      ;CORRECT GUESS
   56:                          ;
   57: 0EE6 EEE6  CA            RSWEXT	DEX             ;WRONG GUESS...ITS A ONE
   58:                          ;
   59: 0EE7 EEE7  C6 B4         RSPEXT	DEC BITTS       ;ONE STOP BIT ALWAYS
   60: 0EE9 EEE9  AD 93 02      	LDA M51CTR      ;CHECK # OF STOP BITS
   61: 0EEC EEEC  10 E3         	BPL RSTEXT      ;...ONE
   62: 0EEE EEEE  C6 B4         	DEC BITTS       ;...TWO
   63: 0EF0 EEF0  D0 DF         	BNE RSTEXT      ;JUMP
   64:                          ;
   65:                          RSPNO	;LINE TO SEND CANNOT BE PB0
   66: 0EF2 EEF2  E6 B4         	INC BITTS       ;COUNTS AS ONE STOP BIT
   67: 0EF4 EEF4  D0 F0         	BNE RSWEXT      ;JUMP TO FLIP TO ONE
   68:                          ;
   69: 0EF6 EEF6  A5 BD         RST030	LDA ROPRTY      ;EVEN PARITY
   70: 0EF8 EEF8  F0 ED         	BEQ RSPEXT      ;CORRECT GUESS...EXIT
   71: 0EFA EEFA  D0 EA         	BNE RSWEXT      ;WRONG...FLIP AND EXIT
   72:                          ;
   73: 0EFC EEFC  70 E9         RST040	BVS RSPEXT      ;WANTED SPACE
   74: 0EFE EEFE  50 E6         	BVC RSWEXT      ; WANTED MARK
   75:                          
   76:                          ; STOP BITS
   77:                          ;
   78: 0F00 EF00  E6 B4         RST050	INC BITTS       ;STOP BIT COUNT TOWARDS ZERO
   79: 0F02 EF02  A2 FF         	LDX #$FF        ;SEND STOP BIT
   80: 0F04 EF04  D0 CB         	BNE RSTEXT      ;JUMP TO EXIT
   81:                          ;
   82:                          
   83:                          ; RSTBGN - ENTRY TO START BYTE TRANS
   84:                          ;
   85: 0F06 EF06  AD 94 02      RSTBGN	LDA M51CDR      ;CHECK FOR 3/X LINE
   86: 0F09 EF09  4A            	LSR  
   87: 0F0A EF0A  90 07         	BCC RST060      ;3 LINE...NO CHECK
   88: 0F0C EF0C  2C 01 DD      	BIT D2PRB       ;CHECK FOR...
   89: 0F0F EF0F  10 1D         	BPL DSRERR      ;...DSR ERROR
   90: 0F11 EF11  50 1E         	BVC CTSERR      ;...CTS ERROR
   91:                          ;
   92:                          ; SET UP TO SEND NEXT BYTE
   93:                          ;
   94: 0F13 EF13  A9 00         RST060	LDA #0
   95: 0F15 EF15  85 BD         	STA ROPRTY      ;ZERO PARITY
   96: 0F17 EF17  85 B5         	STA NXTBIT      ;SEND START BIT
   97: 0F19 EF19  AE 98 02      	LDX BITNUM      ;GET # OF BITS
   98: 0F1C EF1C  86 B4         RST070	STX BITTS       ;BITTS=#OF BITTS+1
   99:                          ;
  100: 0F1E EF1E  AC 9D 02      RST080	LDY RODBS       ;CHECK BUFFER POINTERS
  101: 0F21 EF21  CC 9E 02      	CPY RODBE
  102: 0F24 EF24  F0 13         	BEQ RSODNE      ;ALL DONE...
  103:                          ;
  104: 0F26 EF26  B1 F9         	LDA (ROBUF),Y   ;GET DATA...
  105: 0F28 EF28  85 B6         	STA RODATA      ;...INTO BYTE BUFFER
  106: 0F2A EF2A  EE 9D 02      	INC RODBS       ;MOVE POINTER TO NEXT
  107: 0F2D EF2D  60            	RTS
  108:                          
  109:                          ; SET ERRORS
  110:                          ;
  111: 0F2E EF2E  A9 40         DSRERR	LDA #$40        ;DSR GONE ERROR
  112: 0F30 EF30  2C            	.BYTE $2C
  113: 0F31 EF31  A9 10         CTSERR	LDA #$10        ;CTS GONE ERROR
  114: 0F33 EF33  0D 97 02      	ORA RSSTAT
  115: 0F36 EF36  8D 97 02      	STA RSSTAT
  116:                          ;
  117:                          ; ERRORS TURN OFF T1
  118:                          ;
  119: 0F39 EF39  A9 01         RSODNE	LDA #$01        ;KILL T1 NMI
  120:                          ;ENTRY TO TURN OFF AN ENABLED NMI...
  121: 0F3B EF3B  8D 0D DD      OENABL	STA D2ICR       ;TOSS BAD/OLD NMI
  122: 0F3E EF3E  4D A1 02      	EOR ENABL       ;FLIP ENABLE
  123: 0F41 EF41  09 80         	ORA #$80        ;ENABLE GOOD NMI'S
  124: 0F43 EF43  8D A1 02      	STA ENABL
  125: 0F46 EF46  8D 0D DD      	STA D2ICR
  126: 0F49 EF49  60            	RTS
  127:                          
  128:                          ; BITCNT - CAL # OF BITS TO BE SENT
  129:                          ;   RETURNS #OF BITS+1
  130:                          ;
  131: 0F4A EF4A  A2 09         BITCNT	LDX #9          ;CALC WORD LENGTH
  132: 0F4C EF4C  A9 20         	LDA #$20
  133: 0F4E EF4E  2C 93 02      	BIT M51CTR
  134: 0F51 EF51  F0 01         	BEQ BIT010
  135: 0F53 EF53  CA            	DEX             ;BIT 5 HIGH IS A 7 OR 5
  136: 0F54 EF54  50 02         BIT010	BVC BIT020
  137: 0F56 EF56  CA            	DEX             ;BIT 6 HIGH IS A 6 OR 5
  138: 0F57 EF57  CA            	DEX
  139: 0F58 EF58  60            BIT020	RTS
  140:                          
  141:                          ; RSR  8/24/80 CORRECT SOME MISTAKES
  142:                          ; RSR  8/27/80 CHANGE BITNUM BASE TO #BITS+1
  143:                          ; RSR 12/11/81 MODIFY FOR VIC-40
  144:                          ; RSR  3/11/82 FIX ENABLES FOR BAD/OLD NMI'S
 FILE: kernal.a65
 FILE: rs232rcv.a65
    1:                          
    2:                          ; RSRCVR - NMI ROUTINE TO COLLECT
    3:                          ;  DATA INTO BYTES
    4:                          ;
    5:                          ; RSR 8/18/80
    6:                          ;
    7:                          ; VARIABLES USED
    8:                          ;   INBIT - INPUT BIT VALUE
    9:                          ;   BITCI - BIT COUNT IN
   10:                          ;   RINONE - FLAG FOR START BIT CHECK <>0 START BIT
   11:                          ;   RIDATA - BYTE INPUT BUFFER
   12:                          ;   RIPRTY - HOLDS BYTE INPUT PARITY
   13:                          ;   RIBUF - INDIRECT POINTER TO DATA BUFFER
   14:                          ;   RIDBE - INPUT BUFFER INDEX TO END
   15:                          ;   RIDBS - INPUT BUFFER POINTER TO START
   16:                          ;   IF RIDBE=RIDBS THEN INPUT BUFFER EMPTY
   17:                          ;
   18: 0F59 EF59  A6 A9         RSRCVR	LDX RINONE      ;CHECK FOR START BIT
   19: 0F5B EF5B  D0 33         	BNE RSRTRT      ;WAS START BIT
   20:                          ;
   21: 0F5D EF5D  C6 A8         	DEC BITCI       ;CHECK WHERE WE ARE IN INPUT...
   22: 0F5F EF5F  F0 36         	BEQ RSR030      ;HAVE A FULL BYTE
   23: 0F61 EF61  30 0D         	BMI RSR020      ;GETTING STOP BITS
   24:                          ;
   25:                          ; CALC PARITY
   26:                          ;
   27: 0F63 EF63  A5 A7         	LDA INBIT       ;GET DATA UP
   28: 0F65 EF65  45 AB         	EOR RIPRTY      ;CALC NEW PARITY
   29: 0F67 EF67  85 AB         	STA RIPRTY
   30:                          ;
   31:                          ; SHIFT DATA BIT IN
   32:                          ;
   33: 0F69 EF69  46 A7         	LSR INBIT       ;IN BIT POS 0
   34: 0F6B EF6B  66 AA         	ROR RIDATA      ;C INTO DATA
   35:                          ;
   36:                          ; EXIT
   37:                          ;
   38: 0F6D EF6D  60            RSREXT	RTS
   39:                          
   40:                          ; HAVE STOP BIT, SO STORE IN BUFFER
   41:                          ;
   42: 0F6E EF6E  C6 A8         RSR018	DEC BITCI       ;NO PARITY, DEC SO CHECK WORKS
   43: 0F70 EF70  A5 A7         RSR020	LDA INBIT       ;GET DATA...
   44: 0F72 EF72  F0 67         	BEQ RSR060      ;...ZERO, AN ERROR?
   45:                          ;
   46: 0F74 EF74  AD 93 02      	LDA M51CTR      ;CHECK FOR CORRECT # OF STOP BITS
   47: 0F77 EF77  0A            	ASL             ;CARRY TELL HOW MAY STOP BITS
   48: 0F78 EF78  A9 01         	LDA #01
   49: 0F7A EF7A  65 A8         	ADC BITCI
   50: 0F7C EF7C  D0 EF         	BNE RSREXT      ;NO..EXIT
   51:                          ;
   52:                          ; RSRABL - ENABLE TO RECIEVE A BYTE
   53:                          ;
   54: 0F7E EF7E  A9 90         RSRABL	LDA #$90        ;ENABLE FLAG FOR NEXT BYTE
   55: 0F80 EF80  8D 0D DD      	STA D2ICR       ;TOSS BAD/OLD NMI
   56: 0F83 EF83  0D A1 02      	ORA ENABL       ;MARK IN ENABLE REGISTER***********
   57: 0F86 EF86  8D A1 02      	STA ENABL       ;RE-ENABLED BY JMP OENABL
   58: 0F89 EF89  85 A9         	STA RINONE      ;FLAG FOR START BIT
   59:                          ;
   60: 0F8B EF8B  A9 02         RSRSXT	LDA #$02        ;DISABLE T2
   61: 0F8D EF8D  4C 3B EF      	JMP OENABL      ;FLIP-OFF ENABL***************
   62:                          
   63:                          ; RECIEVER START BIT CHECK
   64:                          ;
   65: 0F90 EF90  A5 A7         RSRTRT	LDA INBIT       ;CHECK IF SPACE
   66: 0F92 EF92  D0 EA         	BNE RSRABL      ;BAD...TRY AGAIN
   67: 0F94 EF94  4C D3 E4      	JMP PRTYP       ;GO TO PARITY PATCH 901227-03
   68:                          ; STA RINONE ;GOOD...DISABLE FLAG
   69:                          ; RTS ;AND EXIT
   70:                          
   71:                          ;
   72:                          ; PUT DATA IN BUFFER (AT PARITY TIME)
   73:                          ;
   74: 0F97 EF97  AC 9B 02      RSR030	LDY RIDBE       ;GET END
   75: 0F9A EF9A  C8            	INY
   76: 0F9B EF9B  CC 9C 02      	CPY RIDBS       ;HAVE WE PASSED START?
   77: 0F9E EF9E  F0 2A         	BEQ RECERR      ;YES...ERROR
   78:                          ;
   79: 0FA0 EFA0  8C 9B 02      	STY RIDBE       ;MOVE RIDBE FOWARD
   80: 0FA3 EFA3  88            	DEY
   81:                          ;
   82: 0FA4 EFA4  A5 AA         	LDA RIDATA      ;GET BYTE BUFFER UP
   83: 0FA6 EFA6  AE 98 02      	LDX BITNUM      ;SHIFT UNTILL FULL BYTE
   84: 0FA9 EFA9  E0 09         RSR031	CPX #9          ;ALWAYS 8 BITS
   85: 0FAB EFAB  F0 04         	BEQ RSR032
   86: 0FAD EFAD  4A            	LSR             ;FILL WITH ZEROS
   87: 0FAE EFAE  E8            	INX
   88: 0FAF EFAF  D0 F8         	BNE RSR031
   89:                          ;
   90: 0FB1 EFB1  91 F7         RSR032	STA (RIBUF),Y   ;DATA TO PAGE BUFFER
   91:                          ;
   92:                          ; PARITY CHECKING
   93:                          ;
   94: 0FB3 EFB3  A9 20         	LDA #$20        ;CHECK 6551 COMMAND REGISTER
   95: 0FB5 EFB5  2C 94 02      	BIT M51CDR
   96: 0FB8 EFB8  F0 B4         	BEQ RSR018      ;NO PARITY BIT SO STOP BIT
   97: 0FBA EFBA  30 B1         	BMI RSREXT      ;NO PARITY CHECK
   98:                          ;
   99:                          ; CHECK CALC PARITY
  100:                          ;
  101: 0FBC EFBC  A5 A7         	LDA INBIT
  102: 0FBE EFBE  45 AB         	EOR RIPRTY      ;PUT IN WITH PARITY
  103: 0FC0 EFC0  F0 03         	BEQ RSR050      ;EVEN PARITY
  104: 0FC2 EFC2  70 A9         	BVS RSREXT      ;ODD...OKAY SO EXIT
  105: 0FC4 EFC4  2C            	.BYTE $2C       ;SKIP TWO
  106: 0FC5 EFC5  50 A6         RSR050	BVC RSREXT      ;EVEN...OKAY SO EXIT
  107:                          ;
  108:                          ; ERRORS REPORTED
  109: 0FC7 EFC7  A9 01         	LDA #1          ;PARITY ERROR
  110: 0FC9 EFC9  2C            	.BYTE $2C
  111: 0FCA EFCA  A9 04         RECERR	LDA #$4         ;RECIEVER OVERRUN
  112: 0FCC EFCC  2C            	.BYTE $2C
  113: 0FCD EFCD  A9 80         BREAKE	LDA #$80        ;BREAK DETECTED
  114: 0FCF EFCF  2C            	.BYTE $2C
  115: 0FD0 EFD0  A9 02         FRAMEE	LDA #$02        ;FRAME ERROR
  116: 0FD2 EFD2  0D 97 02      ERR232	ORA RSSTAT
  117: 0FD5 EFD5  8D 97 02      	STA RSSTAT
  118: 0FD8 EFD8  4C 7E EF      	JMP RSRABL      ;BAD EXIT SO HANG ##????????##
  119:                          ;
  120:                          ; CHECK FOR ERRORS
  121:                          ;
  122: 0FDB EFDB  A5 AA         RSR060	LDA RIDATA      ;EXPECTING STOP...
  123: 0FDD EFDD  D0 F1         	BNE FRAMEE      ;FRAME ERROR
  124: 0FDF EFDF  F0 EC         	BEQ BREAKE      ;COULD BE A BREAK
  125:                          
  126:                          ; RSR -  8/21/80 ADD MODS
  127:                          ; RSR -  8/24/80 FIX ERRORS
  128:                          ; RSR -  8/27/80 FIX MAJOR ERRORS
  129:                          ; RSR -  8/30/80 FIX T2 ADJUST
  130:                          ; RSR - 12/11/81 MODIFY FOR VIC-40 I/O
  131:                          ; RSR -  3/11/82 FIX FOR BAD/OLD NMI'S
 FILE: kernal.a65
 FILE: rs232io.a65
    1:                          
    2:                          ; OUTPUT A FILE OVER USR PORT
    3:                          ;  USING RS232
    4:                          ;
    5: 0FE1 EFE1  85 9A         CKO232	STA DFLTO       ;SET DEFAULT OUT
    6: 0FE3 EFE3  AD 94 02      	LDA M51CDR      ;CHECK FOR 3/X LINE
    7: 0FE6 EFE6  4A            	LSR  
    8: 0FE7 EFE7  90 29         	BCC CKO100      ;3LINE...NO TURN AROUND
    9:                          ;
   10:                          ;*TURN AROUND LOGIC
   11:                          ;
   12:                          ; CHECK FOR DSR AND RTS
   13:                          ;
   14: 0FE9 EFE9  A9 02         	LDA #$02        ;BIT RTS IS ON
   15: 0FEB EFEB  2C 01 DD      	BIT D2PRB
   16: 0FEE EFEE  10 1D         	BPL CKDSRX      ;NO DSR...ERROR
   17: 0FF0 EFF0  D0 20         	BNE CKO100      ;RTS...OUTPUTING OR FULL DUPLEX
   18:                          ;
   19:                          ; CHECK FOR ACTIVE INPUT
   20:                          ;  RTS WILL BE LOW IF CURRENTLY INPUTING
   21:                          ;
   22: 0FF2 EFF2  AD A1 02      CKO020	LDA ENABL
   23: 0FF5 EFF5  29 02         	AND #$02        ;LOOK AT IER FOR T2
   24: 0FF7 EFF7  D0 F9         	BNE CKO020      ;HANG UNTILL INPUT DONE
   25:                          ;
   26:                          ; WAIT FOR CTS TO BE OFF AS SPEC REQS
   27:                          ;
   28: 0FF9 EFF9  2C 01 DD      CKO030	BIT D2PRB
   29: 0FFC EFFC  70 FB         	BVS CKO030
   30:                          ;
   31:                          ; TURN ON RTS
   32:                          ;
   33: 0FFE EFFE  AD 01 DD      	LDA D2PRB
   34: 1001 F001  09 02         	ORA #$02
   35: 1003 F003  8D 01 DD      	STA D2PRB
   36:                          ;
   37:                          ; WAIT FOR CTS TO GO ON
   38:                          ;
   39: 1006 F006  2C 01 DD      CKO040	BIT D2PRB
   40: 1009 F009  70 07         	BVS CKO100      ;DONE...
   41: 100B F00B  30 F9         	BMI CKO040      ;WE STILL HAVE DSR
   42:                          ;
   43: 100D F00D  A9 40         CKDSRX	LDA #$40        ;A DATA SET READY ERROR
   44: 100F F00F  8D 97 02      	STA RSSTAT      ;MAJOR ERROR....WILL REQUIRE REOPEN
   45:                          ;
   46: 1012 F012  18            CKO100	CLC             ;NO ERROR
   47: 1013 F013  60            	RTS
   48:                          ;
   49:                          
   50:                          ; BSO232 - OUTPUT A CHAR RS232
   51:                          ;   DATA PASSED IN T1 FROM BSOUT
   52:                          ;
   53:                          ; HANG LOOP FOR BUFFER FULL
   54:                          ;
   55: 1014 F014  20 28 F0      BSOBAD	JSR BSO100      ;KEEP TRYING TO START SYSTEM...
   56:                          ;
   57:                          ; BUFFER HANDLER
   58:                          ;
   59: 1017 F017  AC 9E 02      BSO232	LDY RODBE
   60: 101A F01A  C8            	INY
   61: 101B F01B  CC 9D 02      	CPY RODBS       ;CHECK FOR BUFFER FULL
   62: 101E F01E  F0 F4         	BEQ BSOBAD      ;HANG IF SO...TRYING TO RESTART
   63: 1020 F020  8C 9E 02      	STY RODBE       ;INDICATE NEW START
   64: 1023 F023  88            	DEY
   65: 1024 F024  A5 9E         	LDA T1          ;GET DATA...
   66: 1026 F026  91 F9         	STA (ROBUF),Y   ;STORE DATA
   67:                          ;
   68:                          ; SET UP IF NECESSARY TO OUTPUT
   69:                          ;
   70: 1028 F028  AD A1 02      BSO100	LDA ENABL       ;CHECK FOR A T1 NMI ENABLE
   71: 102B F02B  4A            	LSR             ;BIT 0
   72: 102C F02C  B0 1E         	BCS BSO120      ;RUNNING....SO EXIT
   73:                          ;
   74:                          ; SET UP T1 NMI'S
   75:                          ;
   76: 102E F02E  A9 10         BSO110	LDA #$10        ;TURN OFF TIMER TO PREVENT FALSE START...
   77: 1030 F030  8D 0E DD      	STA D2CRA
   78: 1033 F033  AD 99 02      	LDA BAUDOF      ;SET UP TIMER1
   79: 1036 F036  8D 04 DD      	STA D2T1L
   80: 1039 F039  AD 9A 02      	LDA BAUDOF+1
   81: 103C F03C  8D 05 DD      	STA D2T1H
   82: 103F F03F  A9 81         	LDA #$81
   83: 1041 F041  20 3B EF      	JSR OENABL
   84: 1044 F044  20 06 EF      	JSR RSTBGN      ;SET UP TO SEND (WILL STOP ON CTS OR DSR ERROR)
   85: 1047 F047  A9 11         	LDA #$11        ;TURN ON TIMER
   86: 1049 F049  8D 0E DD      	STA D2CRA
   87: 104C F04C  60            BSO120	RTS
   88:                          
   89:                          ; INPUT A FILE OVER USER PORT
   90:                          ;  USING RS232
   91:                          ;
   92: 104D F04D  85 99         CKI232	STA DFLTN       ;SET DEFAULT INPUT
   93:                          ;
   94: 104F F04F  AD 94 02      	LDA M51CDR      ;CHECK FOR 3/X LINE
   95: 1052 F052  4A            	LSR  
   96: 1053 F053  90 28         	BCC CKI100      ;3 LINE...NO HANDSHAKE
   97:                          ;
   98: 1055 F055  29 08         	AND #$08        ;FULL/HALF CHECK (BYTE SHIFTED ABOVE)
   99: 1057 F057  F0 24         	BEQ CKI100      ;FULL...NO HANDSHAKE
  100:                          ;
  101:                          ;*TURN AROUND LOGIC
  102:                          ;
  103:                          ; CHECK IF DSR AND NOT RTS
  104:                          ;
  105: 1059 F059  A9 02         	LDA #$02        ;BIT RTS IS ON
  106: 105B F05B  2C 01 DD      	BIT D2PRB
  107: 105E F05E  10 AD         	BPL CKDSRX      ;NO DSR...ERROR
  108: 1060 F060  F0 22         	BEQ CKI110      ;RTS LOW...IN CORRECT MODE
  109:                          ;
  110:                          ; WAIT FOR ACTIVE OUTPUT TO BE DONE
  111:                          ;
  112: 1062 F062  AD A1 02      CKI010	LDA ENABL
  113: 1065 F065  4A            	LSR             ;CHECK T1 (BIT 0)
  114: 1066 F066  B0 FA         	BCS CKI010
  115:                          ;
  116:                          ; TURN OFF RTS
  117:                          ;
  118: 1068 F068  AD 01 DD      	LDA D2PRB
  119: 106B F06B  29 FD         	AND #$FF-02
  120: 106D F06D  8D 01 DD      	STA D2PRB
  121:                          ;
  122:                          ; WAIT FOR DCD TO GO HIGH (IN SPEC)
  123:                          ;
  124: 1070 F070  AD 01 DD      CKI020	LDA D2PRB
  125: 1073 F073  29 04         	AND #$04
  126: 1075 F075  F0 F9         	BEQ CKI020
  127:                          ;
  128:                          ; ENABLE FLAG FOR RS232 INPUT
  129:                          ;
  130: 1077 F077  A9 90         CKI080	LDA #$90
  131: 1079 F079  18            	CLC             ;NO ERROR
  132: 107A F07A  4C 3B EF      	JMP OENABL      ;FLAG IN ENABL**********
  133:                          ;
  134:                          ; IF NOT 3 LINE HALF THEN...
  135:                          ;  SEE IF WE NEED TO TURN ON FLAG
  136:                          ;
  137: 107D F07D  AD A1 02      CKI100	LDA ENABL       ;CHECK FOR FLAG OR T2 ACTIVE
  138: 1080 F080  29 12         	AND #$12
  139: 1082 F082  F0 F3         	BEQ CKI080      ;NO NEED TO TURN ON
  140: 1084 F084  18            CKI110	CLC             ;NO ERROR
  141: 1085 F085  60            	RTS
  142:                          
  143:                          ; BSI232 - INPUT A CHAR RS232
  144:                          ;
  145:                          ; BUFFER HANDLER
  146:                          ;
  147: 1086 F086  AD 97 02      BSI232	LDA RSSTAT      ;GET STATUS UP TO CHANGE...
  148: 1089 F089  AC 9C 02      	LDY RIDBS       ;GET LAST BYTE ADDRESS
  149: 108C F08C  CC 9B 02      	CPY RIDBE       ;SEE IF BUFFER EMPTY
  150: 108F F08F  F0 0B         	BEQ BSI010      ;RETURN A NULL IF NO CHAR
  151:                          ;
  152: 1091 F091  29 F7         	AND #$FF-$08    ;CLEAR BUFFER EMPTY STATUS
  153: 1093 F093  8D 97 02      	STA RSSTAT
  154: 1096 F096  B1 F7         	LDA (RIBUF),Y   ;GET LAST CHAR
  155: 1098 F098  EE 9C 02      	INC RIDBS       ;INC TO NEXT POS
  156:                          ;
  157:                          ; RECEIVER ALWAYS RUNS
  158:                          ;
  159: 109B F09B  60            	RTS
  160:                          ;
  161: 109C F09C  09 08         BSI010	ORA #$08        ;SET BUFFER EMPTY STATUS
  162: 109E F09E  8D 97 02      	STA RSSTAT
  163: 10A1 F0A1  A9 00         	LDA #$0         ;RETURN A NULL
  164: 10A3 F0A3  60            	RTS
  165:                          
  166:                          ; RSP232 - PROTECT SERIAL/CASS FROM RS232 NMI'S
  167:                          ;
  168: 10A4 F0A4  48            RSP232	PHA             ;SAVE .A
  169: 10A5 F0A5  AD A1 02      	LDA ENABL       ;DOES RS232 HAVE ANY ENABLES?
  170: 10A8 F0A8  F0 11         	BEQ RSPOK       ;NO...
  171: 10AA F0AA  AD A1 02      RSPOFF	LDA ENABL       ;WAIT UNTILL DONE
  172: 10AD F0AD  29 03         	AND #%00000011  ; WITH T1 & T2
  173: 10AF F0AF  D0 F9         	BNE RSPOFF
  174: 10B1 F0B1  A9 10         	LDA #%00010000  ; DISABLE FLAG (NEED TO RENABLE IN USER CODE)
  175: 10B3 F0B3  8D 0D DD      	STA D2ICR       ;TURN OF ENABL************
  176: 10B6 F0B6  A9 00         	LDA #0
  177: 10B8 F0B8  8D A1 02      	STA ENABL       ;CLEAR ALL ENABLS
  178: 10BB F0BB  68            RSPOK	PLA             ;ALL DONE
  179: 10BC F0BC  60            	RTS
  180:                          
  181:                          ; RSR  8/24/80 ORIGINAL CODE OUT
  182:                          ; RSR  8/25/80 ORIGINAL CODE IN
  183:                          ; RSR  9/22/80 REMOVE PARALLEL REFS & FIX XLINE LOGIC
  184:                          ; RSR 12/11/81 MODIFY FOR VIC-40 I/O
  185:                          ; RSR  2/15/82 FIX SOME ENABL PROBLEMS
  186:                          ; RSR  3/31/82 FIX FLASE STARTS ON TRANSMITT
  187:                          ; RSR  5/12/82 REDUCE CODE AND FIX X-LINE CTS HOLD-OFF
 FILE: kernal.a65
 FILE: msgs.a65
    1:                          
    2: 10BD F0BD  0D 49 2F ...  MS1	.BYTE $D,"I/O ERROR ",$A3
    3: 10C9 F0C9  0D 53 45 ...  MS5	.BYTE $D,"SEARCHING",$A0
    4: 10D4 F0D4  46 4F 52      MS6	.BYTE "FOR",$A0
    5: 10D8 F0D8  0D 50 52 ...  MS7	.BYTE $D,"PRESS PLAY ON TAP",$C5
    6: 10EB F0EB  50 52 45 ...  MS8	.BYTE "PRESS RECORD & PLAY ON TAP",$C5
    7: 1106 F106  0D 4C 4F ...  MS10	.BYTE $D,"LOADIN",$C7
    8: 110E F10E  0D 53 41 ...  MS11	.BYTE $D,"SAVING",$A0
    9: 1116 F116  0D 56 45 ...  MS21	.BYTE $D,"VERIFYIN",$C7
   10: 1120 F120  0D 46 4F ...  MS17	.BYTE $D,"FOUND",$A0
   11: 1127 F127  0D 4F 4B      MS18	.BYTE $D,"OK",$8D
   12:                          ; MS34 .BYTE $D,"MONITOR",$8D
   13:                          ; MS36 .BYTE $D,"BREA",$CB
   14:                          
   15:                          ;PRINT MESSAGE TO SCREEN ONLY IF
   16:                          ;OUTPUT ENABLED
   17:                          ;
   18: 112B F12B  24 9D         SPMSG	BIT MSGFLG      ;PRINTING MESSAGES?
   19: 112D F12D  10 0D         	BPL MSG10       ;NO...
   20: 112F F12F  B9 BD F0      MSG	LDA MS1,Y
   21: 1132 F132  08            	PHP
   22: 1133 F133  29 7F         	AND #$7F
   23: 1135 F135  20 D2 FF      	JSR BSOUT
   24: 1138 F138  C8            	INY
   25: 1139 F139  28            	PLP
   26: 113A F13A  10 F3         	BPL MSG
   27: 113C F13C  18            MSG10	CLC
   28: 113D F13D  60            	RTS
   29:                          
 FILE: kernal.a65
 FILE: chanio.a65
    1:                          
    2:                          ;***************************************
    3:                          ;* GETIN -- GET CHARACTER FROM CHANNEL *
    4:                          ;*      CHANNEL IS DETERMINED BY DFLTN.*
    5:                          ;* IF DEVICE IS 0, KEYBOARD QUEUE IS   *
    6:                          ;* EXAMINED AND A CHARACTER REMOVED IF *
    7:                          ;* AVAILABLE.  IF QUEUE IS EMPTY, Z    *
    8:                          ;* FLAG IS RETURNED SET.  DEVICES 1-31 *
    9:                          ;* ADVANCE TO BASIN.                   *
   10:                          ;***************************************
   11:                          ;
   12: 113E F13E  A5 99         NGETIN	LDA DFLTN       ;CHECK DEVICE
   13: 1140 F140  D0 08         	BNE GN10        ;NOT KEYBOARD
   14:                          ;
   15: 1142 F142  A5 C6         	LDA NDX         ;QUEUE INDEX
   16: 1144 F144  F0 0F         	BEQ GN20        ;NOBODY THERE...EXIT
   17:                          ;
   18: 1146 F146  78            	SEI
   19: 1147 F147  4C B4 E5      	JMP LP2         ;GO REMOVE A CHARACTER
   20:                          ;
   21: 114A F14A  C9 02         GN10	CMP #2          ;IS IT RS-232
   22: 114C F14C  D0 18         	BNE BN10        ;NO...USE BASIN
   23:                          ;
   24: 114E F14E  84 97         GN232	STY XSAV        ;SAVE .Y, USED IN RS232
   25: 1150 F150  20 86 F0      	JSR BSI232
   26: 1153 F153  A4 97         	LDY XSAV        ;RESTORE .Y
   27: 1155 F155  18            GN20	CLC             ;GOOD RETURN
   28: 1156 F156  60            	RTS
   29:                          
   30:                          ;***************************************
   31:                          ;* BASIN-- INPUT CHARACTER FROM CHANNEL*
   32:                          ;*     INPUT DIFFERS FROM GET ON DEVICE*
   33:                          ;* #0 FUNCTION WHICH IS KEYBOARD. THE  *
   34:                          ;* SCREEN EDITOR MAKES READY AN ENTIRE *
   35:                          ;* LINE WHICH IS PASSED CHAR BY CHAR   *
   36:                          ;* UP TO THE CARRIAGE RETURN.  OTHER   *
   37:                          ;* DEVICES ARE:                        *
   38:                          ;*      0 -- KEYBOARD                  *
   39:                          ;*      1 -- CASSETTE #1               *
   40:                          ;*      2 -- RS232                     *
   41:                          ;*      3 -- SCREEN                    *
   42:                          ;*   4-31 -- SERIAL BUS                *
   43:                          ;***************************************
   44:                          ;
   45: 1157 F157  A5 99         NBASIN	LDA DFLTN       ;CHECK DEVICE
   46: 1159 F159  D0 0B         	BNE BN10        ;IS NOT KEYBOARD...
   47:                          ;
   48:                          ;INPUT FROM KEYBOARD
   49:                          ;
   50: 115B F15B  A5 D3         	LDA PNTR        ;SAVE CURRENT...
   51: 115D F15D  85 CA         	STA LSTP        ;... CURSOR COLUMN
   52: 115F F15F  A5 D6         	LDA TBLX        ;SAVE CURRENT...
   53: 1161 F161  85 C9         	STA LSXP        ;... LINE NUMBER
   54: 1163 F163  4C 32 E6      	JMP LOOP5       ;BLINK CURSOR UNTIL RETURN
   55:                          ;
   56: 1166 F166  C9 03         BN10	CMP #3          ;IS INPUT FROM SCREEN?
   57: 1168 F168  D0 09         	BNE BN20        ;NO...
   58:                          ;
   59: 116A F16A  85 D0         	STA CRSW        ;FAKE A CARRIAGE RETURN
   60: 116C F16C  A5 D5         	LDA LNMX        ;SAY WE ENDED...
   61: 116E F16E  85 C8         	STA INDX        ;...UP ON THIS LINE
   62: 1170 F170  4C 32 E6      	JMP LOOP5       ;PICK UP CHARACTERS
   63:                          ;
   64: 1173 F173  B0 38         BN20	BCS BN30        ;DEVICES >3
   65: 1175 F175  C9 02         	CMP #2          ;RS232?
   66: 1177 F177  F0 3F         	BEQ BN50
   67:                          ;
   68:                          ;INPUT FROM CASSETTE BUFFERS
   69:                          ;
   70: 1179 F179  86 97         	STX XSAV
   71: 117B F17B  20 99 F1      	JSR JTGET
   72: 117E F17E  B0 16         	BCS JTG37       ;STOP KEY/ERROR
   73: 1180 F180  48            	PHA
   74: 1181 F181  20 99 F1      	JSR JTGET
   75: 1184 F184  B0 0D         	BCS JTG36       ;STOP KEY/ERROR
   76: 1186 F186  D0 05         	BNE JTG35       ;NOT AN END OF FILE
   77: 1188 F188  A9 40         	LDA #64         ;TELL USER EOF
   78: 118A F18A  20 1C FE      	JSR UDST        ;IN STATUS
   79: 118D F18D  C6 A6         JTG35	DEC BUFPT
   80: 118F F18F  A6 97         	LDX XSAV        ;.X PRESERVED
   81: 1191 F191  68            	PLA             ;CHARACTER RETURNED
   82:                          ;C-CLEAR FROM JTGET
   83: 1192 F192  60            	RTS             ;ALL DONE
   84:                          ;
   85: 1193 F193  AA            JTG36	TAX             ;SAVE ERROR INFO
   86: 1194 F194  68            	PLA             ;TOSS DATA
   87: 1195 F195  8A            	TXA             ;RESTORE ERROR
   88: 1196 F196  A6 97         JTG37	LDX XSAV        ;RETURN
   89: 1198 F198  60            	RTS             ;ERROR RETURN C-SET FROM JTGET
   90:                          
   91:                          ;GET A CHARACTER FROM APPROPRIATE
   92:                          ;CASSETTE BUFFER
   93:                          ;
   94: 1199 F199  20 0D F8      JTGET	JSR JTP20       ;BUFFER POINTER WRAP?
   95: 119C F19C  D0 0B         	BNE JTG10       ;NO...
   96: 119E F19E  20 41 F8      	JSR RBLK        ;YES...READ NEXT BLOCK
   97: 11A1 F1A1  B0 11         	BCS BN33        ;STOP KEY PRESSED
   98: 11A3 F1A3  A9 00         	LDA #0
   99: 11A5 F1A5  85 A6         	STA BUFPT       ;POINT TO BEGIN.
  100: 11A7 F1A7  F0 F0         	BEQ JTGET       ;BRANCH ALWAYS
  101:                          ;
  102: 11A9 F1A9  B1 B2         JTG10	LDA (TAPE1),Y   ;GET CHAR FROM BUF
  103: 11AB F1AB  18            	CLC             ;GOOD RETURN
  104: 11AC F1AC  60            	RTS 
  105:                          
  106:                          ;INPUT FROM SERIAL BUS
  107:                          ;
  108: 11AD F1AD  A5 90         BN30	LDA STATUS      ;STATUS FROM LAST
  109: 11AF F1AF  F0 04         	BEQ BN35        ;WAS GOOD
  110: 11B1 F1B1  A9 0D         BN31	LDA #$D         ;BAD...ALL DONE
  111: 11B3 F1B3  18            BN32	CLC             ;VALID DATA
  112: 11B4 F1B4  60            BN33	RTS
  113:                          ;
  114: 11B5 F1B5  4C 13 EE      BN35	JMP ACPTR       ;GOOD...HANDSHAKE
  115:                          ;
  116:                          ;INPUT FROM RS232
  117:                          ;
  118: 11B8 F1B8  20 4E F1      BN50	JSR GN232       ;GET INFO
  119: 11BB F1BB  B0 F7         	BCS BN33        ;ERROR RETURN
  120: 11BD F1BD  C9 00         	CMP #00
  121: 11BF F1BF  D0 F2         	BNE BN32        ;GOOD DATA...EXIT
  122: 11C1 F1C1  AD 97 02      	LDA RSSTAT      ;CHECK FOR DSR OR DCD ERROR
  123: 11C4 F1C4  29 60         	AND #$60
  124: 11C6 F1C6  D0 E9         	BNE BN31        ;AN ERROR...EXIT WITH C/R
  125: 11C8 F1C8  F0 EE         	BEQ BN50        ;NO ERROR...STAY IN LOOP
  126:                          
  127:                          ;***************************************
  128:                          ;* BSOUT -- OUT CHARACTER TO CHANNEL   *
  129:                          ;*     DETERMINED BY VARIABLE DFLTO:   *
  130:                          ;*     0 -- INVALID                    *
  131:                          ;*     1 -- CASSETTE #1                *
  132:                          ;*     2 -- RS232                      *
  133:                          ;*     3 -- SCREEN                     *
  134:                          ;*  4-31 -- SERIAL BUS                 *
  135:                          ;***************************************
  136:                          ;
  137: 11CA F1CA  48            NBSOUT	PHA             ;PRESERVE .A
  138: 11CB F1CB  A5 9A         	LDA DFLTO       ;CHECK DEVICE
  139: 11CD F1CD  C9 03         	CMP #3          ;IS IT THE SCREEN?
  140: 11CF F1CF  D0 04         	BNE BO10        ;NO...
  141:                          ;
  142:                          ;PRINT TO CRT
  143:                          ;
  144: 11D1 F1D1  68            	PLA             ;RESTORE DATA
  145: 11D2 F1D2  4C 16 E7      	JMP PRT         ;PRINT ON CRT
  146:                          ;
  147:                          BO10
  148: 11D5 F1D5  90 04         	BCC BO20        ;DEVICE 1 OR 2
  149:                          ;
  150:                          ;PRINT TO SERIAL BUS
  151:                          ;
  152: 11D7 F1D7  68            	PLA
  153: 11D8 F1D8  4C DD ED      	JMP CIOUT
  154:                          ;
  155:                          ;PRINT TO CASSETTE DEVICES
  156:                          ;
  157: 11DB F1DB  4A            BO20	LSR             ;RS232?
  158: 11DC F1DC  68            	PLA             ;GET DATA OFF STACK...
  159:                          ;
  160: 11DD F1DD  85 9E         CASOUT	STA T1          ;PASS DATA IN T1
  161:                          ; CASOUT MUST BE ENTERED WITH CARRY SET!!!
  162:                          ;PRESERVE REGISTERS
  163:                          ;
  164: 11DF F1DF  8A            	TXA
  165: 11E0 F1E0  48            	PHA
  166: 11E1 F1E1  98            	TYA
  167: 11E2 F1E2  48            	PHA
  168: 11E3 F1E3  90 23         	BCC BO50        ;C-CLR MEANS DFLTO=2 (RS232)
  169:                          ;
  170: 11E5 F1E5  20 0D F8      	JSR JTP20       ;CHECK BUFFER POINTER
  171: 11E8 F1E8  D0 0E         	BNE JTP10       ;HAS NOT REACHED END
  172: 11EA F1EA  20 64 F8      	JSR WBLK        ;WRITE FULL BUFFER
  173: 11ED F1ED  B0 0E         	BCS RSTOR       ;ABORT ON STOP KEY
  174:                          ;
  175:                          ;PUT BUFFER TYPE BYTE
  176:                          ;
  177: 11EF F1EF  A9 02         	LDA #BDF
  178: 11F1 F1F1  A0 00         	LDY #0
  179: 11F3 F1F3  91 B2         	STA (TAPE1),Y
  180:                          ;
  181:                          ;RESET BUFFER POINTER
  182:                          ;
  183: 11F5 F1F5  C8            	INY             ;MAKE .Y=1
  184: 11F6 F1F6  84 A6         	STY BUFPT       ;BUFPT=1
  185:                          ;
  186: 11F8 F1F8  A5 9E         JTP10	LDA T1
  187: 11FA F1FA  91 B2         	STA (TAPE1),Y   ;DATA TO BUFFER
  188:                          ;
  189:                          ;RESTORE .X AND .Y
  190:                          ;
  191: 11FC F1FC  18            RSTOA	CLC             ;GOOD RETURN
  192: 11FD F1FD  68            RSTOR	PLA
  193: 11FE F1FE  A8            	TAY
  194: 11FF F1FF  68            	PLA
  195: 1200 F200  AA            	TAX
  196: 1201 F201  A5 9E         	LDA T1          ;GET .A FOR RETURN
  197: 1203 F203  90 02         	BCC RSTOR1      ;NO ERROR
  198: 1205 F205  A9 00         	LDA #00         ;STOP ERROR IF C-SET
  199: 1207 F207  60            RSTOR1	RTS
  200:                          ;
  201:                          ;OUTPUT TO RS232
  202:                          ;
  203: 1208 F208  20 17 F0      BO50	JSR BSO232      ;PASS DATA THROUGH VARIABLE T1
  204: 120B F20B  4C FC F1      	JMP RSTOA       ;GO RESTORE ALL..ALWAYS GOOD
  205:                          
  206:                          ; RSR 5/12/82 FIX BSOUT FOR NO REG AFFECT BUT ERRORS
 FILE: kernal.a65
 FILE: openchan.a65
    1:                          
    2:                          ;***************************************
    3:                          ;* CHKIN -- OPEN CHANNEL FOR INPUT     *
    4:                          ;*                                     *
    5:                          ;* THE NUMBER OF THE LOGICAL FILE TO BE*
    6:                          ;* OPENED FOR INPUT IS PASSED IN .X.   *
    7:                          ;* CHKIN SEARCHES THE LOGICAL FILE     *
    8:                          ;* TO LOOK UP DEVICE AND COMMAND INFO. *
    9:                          ;* ERRORS ARE REPORTED IF THE DEVICE   *
   10:                          ;* WAS NOT OPENED FOR INPUT ,(E.G.     *
   11:                          ;* CASSETTE WRITE FILE), OR THE LOGICAL*
   12:                          ;* FILE HAS NO REFERENCE IN THE TABLES.*
   13:                          ;* DEVICE 0, (KEYBOARD), AND DEVICE 3  *
   14:                          ;* (SCREEN), REQUIRE NO TABLE ENTRIES  *
   15:                          ;* AND ARE HANDLED SEPARATE.           *
   16:                          ;***************************************
   17:                          ;
   18: 120E F20E  20 0F F3      NCHKIN	JSR LOOKUP      ;SEE IF FILE KNOWN
   19: 1211 F211  F0 03         	BEQ JX310       ;YUP...
   20:                          ;
   21: 1213 F213  4C 01 F7      	JMP ERROR3      ;NO...FILE NOT OPEN
   22:                          ;
   23: 1216 F216  20 1F F3      JX310	JSR JZ100       ;EXTRACT FILE INFO
   24:                          ;
   25: 1219 F219  A5 BA         	LDA FA
   26: 121B F21B  F0 16         	BEQ JX320       ;IS KEYBOARD...DONE.
   27:                          ;
   28:                          ;COULD BE SCREEN, KEYBOARD, OR SERIAL
   29:                          ;
   30: 121D F21D  C9 03         	CMP #3
   31: 121F F21F  F0 12         	BEQ JX320       ;IS SCREEN...DONE.
   32: 1221 F221  B0 14         	BCS JX330       ;IS SERIAL...ADDRESS IT
   33: 1223 F223  C9 02         	CMP #2          ;RS232?
   34: 1225 F225  D0 03         	BNE JX315       ;NO...
   35:                          ;
   36: 1227 F227  4C 4D F0      	JMP CKI232
   37:                          ;
   38:                          ;SOME EXTRA CHECKS FOR TAPE
   39:                          ;
   40: 122A F22A  A6 B9         JX315	LDX SA
   41: 122C F22C  E0 60         	CPX #$60        ;IS COMMAND A READ?
   42: 122E F22E  F0 03         	BEQ JX320       ;YES...O.K....DONE
   43:                          ;
   44: 1230 F230  4C 0A F7      	JMP ERROR6      ;NOT INPUT FILE
   45:                          ;
   46: 1233 F233  85 99         JX320	STA DFLTN       ;ALL INPUT COME FROM HERE
   47:                          ;
   48: 1235 F235  18            	CLC             ;GOOD EXIT
   49: 1236 F236  60            	RTS
   50:                          ;
   51:                          ;AN SERIAL DEVICE HAS TO BE A TALKER
   52:                          ;
   53: 1237 F237  AA            JX330	TAX             ;DEVICE # FOR DFLTO
   54: 1238 F238  20 09 ED      	JSR TALK        ;TELL HIM TO TALK
   55:                          ;
   56: 123B F23B  A5 B9         	LDA SA          ;A SECOND?
   57: 123D F23D  10 06         	BPL JX340       ;YES...SEND IT
   58: 123F F23F  20 CC ED      	JSR TKATN       ;NO...LET GO
   59: 1242 F242  4C 48 F2      	JMP JX350
   60:                          ;
   61: 1245 F245  20 C7 ED      JX340	JSR TKSA        ;SEND SECOND
   62:                          ;
   63: 1248 F248  8A            JX350	TXA
   64: 1249 F249  24 90         	BIT STATUS      ;DID HE LISTEN?
   65: 124B F24B  10 E6         	BPL JX320       ;YES
   66:                          ;
   67: 124D F24D  4C 07 F7      	JMP ERROR5      ;DEVICE NOT PRESENT
   68:                          
   69:                          ;***************************************
   70:                          ;* CHKOUT -- OPEN CHANNEL FOR OUTPUT     *
   71:                          ;*                                     *
   72:                          ;* THE NUMBER OF THE LOGICAL FILE TO BE*
   73:                          ;* OPENED FOR OUTPUT IS PASSED IN .X.  *
   74:                          ;* CHKOUT SEARCHES THE LOGICAL FILE    *
   75:                          ;* TO LOOK UP DEVICE AND COMMAND INFO. *
   76:                          ;* ERRORS ARE REPORTED IF THE DEVICE   *
   77:                          ;* WAS NOT OPENED FOR INPUT ,(E.G.     *
   78:                          ;* KEYBOARD), OR THE LOGICAL FILE HAS   *
   79:                          ;* REFERENCE IN THE TABLES.             *
   80:                          ;* DEVICE 0, (KEYBOARD), AND DEVICE 3  *
   81:                          ;* (SCREEN), REQUIRE NO TABLE ENTRIES  *
   82:                          ;* AND ARE HANDLED SEPARATE.           *
   83:                          ;***************************************
   84:                          ;
   85: 1250 F250  20 0F F3      NCKOUT	JSR LOOKUP      ;IS FILE IN TABLE?
   86: 1253 F253  F0 03         	BEQ CK5         ;YES...
   87:                          ;
   88: 1255 F255  4C 01 F7      	JMP ERROR3      ;NO...FILE NOT OPEN
   89:                          ;
   90: 1258 F258  20 1F F3      CK5	JSR JZ100       ;EXTRACT TABLE INFO
   91:                          ;
   92: 125B F25B  A5 BA         	LDA FA          ;IS IT KEYBOARD?
   93: 125D F25D  D0 03         	BNE CK10        ;NO...SOMETHING ELSE.
   94:                          ;
   95: 125F F25F  4C 0D F7      CK20	JMP ERROR7      ;YES...NOT OUTPUT FILE
   96:                          ;
   97:                          ;COULD BE SCREEN,SERIAL,OR TAPES
   98:                          ;
   99: 1262 F262  C9 03         CK10	CMP #3
  100: 1264 F264  F0 0F         	BEQ CK30        ;IS SCREEN...DONE
  101: 1266 F266  B0 11         	BCS CK40        ;IS SERIAL...ADDRESS IT
  102: 1268 F268  C9 02         	CMP #2          ;RS232?
  103: 126A F26A  D0 03         	BNE CK15
  104:                          ;
  105: 126C F26C  4C E1 EF      	JMP CKO232
  106:                          ;
  107:                          ;
  108:                          ;SPECIAL TAPE CHANNEL HANDLING
  109:                          ;
  110: 126F F26F  A6 B9         CK15	LDX SA
  111: 1271 F271  E0 60         	CPX #$60        ;IS COMMAND READ?
  112: 1273 F273  F0 EA         	BEQ CK20        ;YES...ERROR
  113:                          ;
  114: 1275 F275  85 9A         CK30	STA DFLTO       ;ALL OUTPUT GOES HERE
  115:                          ;
  116: 1277 F277  18            	CLC             ;GOOD EXIT
  117: 1278 F278  60            	RTS
  118:                          ;
  119: 1279 F279  AA            CK40	TAX             ;SAVE DEVICE FOR DFLTO
  120: 127A F27A  20 0C ED      	JSR LISTN       ;TELL HIM TO LISTEN
  121:                          ;
  122: 127D F27D  A5 B9         	LDA SA          ;IS THERE A SECOND?
  123: 127F F27F  10 05         	BPL CK50        ;YES...
  124:                          ;
  125: 1281 F281  20 BE ED      	JSR SCATN       ;NO...RELEASE LINES
  126: 1284 F284  D0 03         	BNE CK60        ;BRANCH ALWAYS
  127:                          ;
  128: 1286 F286  20 B9 ED      CK50	JSR SECND       ;SEND SECOND...
  129:                          ;
  130: 1289 F289  8A            CK60	TXA
  131: 128A F28A  24 90         	BIT STATUS      ;DID HE LISTEN?
  132: 128C F28C  10 E7         	BPL CK30        ;YES...FINISH UP
  133:                          ;
  134: 128E F28E  4C 07 F7      	JMP ERROR5      ;NO...DEVICE NOT PRESENT
 FILE: kernal.a65
 FILE: close.a65
    1:                          
    2:                          ;***************************************
    3:                          ;* CLOSE -- CLOSE LOGICAL FILE       *
    4:                          ;*                                   *
    5:                          ;*     THE LOGICAL FILE NUMBER OF THE*
    6:                          ;* FILE TO BE CLOSED IS PASSED IN .A.*
    7:                          ;* KEYBOARD, SCREEN, AND FILES NOT   *
    8:                          ;* OPEN PASS STRAIGHT THROUGH. TAPE  *
    9:                          ;* FILES OPEN FOR WRITE ARE CLOSED BY*
   10:                          ;* DUMPING THE LAST BUFFER AND       *
   11:                          ;* CONDITIONALLY WRITING AN END OF   *
   12:                          ;* TAPE BLOCK.SERIAL FILES ARE CLOSED*
   13:                          ;* BY SENDING A CLOSE FILE COMMAND IF*
   14:                          ;* A SECONDARY ADDRESS WAS SPECIFIED *
   15:                          ;* IN ITS OPEN COMMAND.              *
   16:                          ;***************************************
   17:                          ;
   18: 1291 F291  20 14 F3      NCLOSE	JSR JLTLK       ;LOOK FILE UP
   19: 1294 F294  F0 02         	BEQ JX050       ;OPEN...
   20: 1296 F296  18            	CLC             ;ELSE RETURN
   21: 1297 F297  60            	RTS
   22:                          ;
   23: 1298 F298  20 1F F3      JX050	JSR JZ100       ;EXTRACT TABLE DATA
   24: 129B F29B  8A            	TXA             ;SAVE TABLE INDEX
   25: 129C F29C  48            	PHA
   26:                          ;
   27: 129D F29D  A5 BA         	LDA FA          ;CHECK DEVICE NUMBER
   28: 129F F29F  F0 50         	BEQ JX150       ;IS KEYBOARD...DONE
   29: 12A1 F2A1  C9 03         	CMP #3
   30: 12A3 F2A3  F0 4C         	BEQ JX150       ;IS SCREEN...DONE
   31: 12A5 F2A5  B0 47         	BCS JX120       ;IS SERIAL...PROCESS
   32: 12A7 F2A7  C9 02         	CMP #2          ;RS232?
   33: 12A9 F2A9  D0 1D         	BNE JX115       ;NO...
   34:                          ;
   35:                          ; RS-232 CLOSE
   36:                          ;
   37:                          ; REMOVE FILE FROM TABLES
   38: 12AB F2AB  68            	PLA
   39: 12AC F2AC  20 F2 F2      	JSR JXRMV
   40:                          ;
   41: 12AF F2AF  20 83 F4      	JSR CLN232      ;CLEAN UP RS232 FOR CLOSE
   42:                          ;
   43:                          ; DEALLOCATE BUFFERS
   44:                          ;
   45: 12B2 F2B2  20 27 FE      	JSR GETTOP      ;GET MEMSIZ
   46: 12B5 F2B5  A5 F8         	LDA RIBUF+1     ;CHECK INPUT ALLOCATION
   47: 12B7 F2B7  F0 01         	BEQ CLS010      ;NOT...ALLOCATED
   48: 12B9 F2B9  C8            	INY
   49: 12BA F2BA  A5 FA         CLS010	LDA ROBUF+1     ;CHECK OUTPUT ALLOCATION
   50: 12BC F2BC  F0 01         	BEQ CLS020
   51: 12BE F2BE  C8            	INY
   52: 12BF F2BF  A9 00         CLS020	LDA #00         ;DEALLOCATE
   53: 12C1 F2C1  85 F8         	STA RIBUF+1
   54: 12C3 F2C3  85 FA         	STA ROBUF+1
   55:                          ; FLAG TOP OF MEMORY CHANGE
   56: 12C5 F2C5  4C 7D F4      	JMP MEMTCF      ;GO SET NEW TOP
   57:                          ;
   58:                          ;CLOSE CASSETTE FILE
   59:                          ;
   60: 12C8 F2C8  A5 B9         JX115	LDA SA          ;WAS IT A TAPE READ?
   61: 12CA F2CA  29 0F         	AND #$F
   62: 12CC F2CC  F0 23         	BEQ JX150       ;YES
   63:                          ;
   64: 12CE F2CE  20 D0 F7      	JSR ZZZ         ;NO. . .IT IS WRITE
   65: 12D1 F2D1  A9 00         	LDA #0          ;END OF FILE CHARACTER
   66: 12D3 F2D3  38            	SEC             ;NEED TO SET CARRY FOR CASOUT (ELSE RS232 OUTPUT!)
   67: 12D4 F2D4  20 DD F1      	JSR CASOUT      ;PUT IN END OF FILE
   68: 12D7 F2D7  20 64 F8      	JSR WBLK
   69: 12DA F2DA  90 04         	BCC JX117       ;NO ERRORS...
   70: 12DC F2DC  68            	PLA             ;CLEAN STACK FOR ERROR
   71: 12DD F2DD  A9 00         	LDA #0          ;BREAK KEY ERROR
   72: 12DF F2DF  60            	RTS
   73:                          ;
   74: 12E0 F2E0  A5 B9         JX117	LDA SA
   75: 12E2 F2E2  C9 62         	CMP #$62        ;WRITE END OF TAPE BLOCK?
   76: 12E4 F2E4  D0 0B         	BNE JX150       ;NO...
   77:                          ;
   78: 12E6 F2E6  A9 05         	LDA #EOT
   79: 12E8 F2E8  20 6A F7      	JSR TAPEH       ;WRITE END OF TAPE BLOCK
   80: 12EB F2EB  4C F1 F2      	JMP JX150
   81:                          ;
   82:                          ;CLOSE AN SERIAL FILE
   83:                          ;
   84: 12EE F2EE  20 42 F6      JX120	JSR CLSEI
   85:                          ;
   86:                          ;ENTRY TO REMOVE A GIVE LOGICAL FILE
   87:                          ;FROM TABLE OF LOGICAL, PRIMARY,
   88:                          ;AND SECONDARY ADDRESSES
   89:                          ;
   90: 12F1 F2F1  68            JX150	PLA             ;GET TABLE INDEX OFF STACK
   91:                          ;
   92:                          ; JXRMV - ENTRY TO USE AS AN RS-232 SUBROUTINE
   93:                          ;
   94: 12F2 F2F2  AA            JXRMV	TAX
   95: 12F3 F2F3  C6 98         	DEC LDTND
   96: 12F5 F2F5  E4 98         	CPX LDTND       ;IS DELETED FILE AT END?
   97: 12F7 F2F7  F0 14         	BEQ JX170       ;YES...DONE
   98:                          ;
   99:                          ;DELETE ENTRY IN MIDDLE BY MOVING
  100:                          ;LAST ENTRY TO THAT POSITION.
  101:                          ;
  102: 12F9 F2F9  A4 98         	LDY LDTND
  103: 12FB F2FB  B9 59 02      	LDA LAT,Y
  104: 12FE F2FE  9D 59 02      	STA LAT,X
  105: 1301 F301  B9 63 02      	LDA FAT,Y
  106: 1304 F304  9D 63 02      	STA FAT,X
  107: 1307 F307  B9 6D 02      	LDA SAT,Y
  108: 130A F30A  9D 6D 02      	STA SAT,X
  109:                          ;
  110: 130D F30D  18            JX170	CLC             ;CLOSE EXIT
  111: 130E F30E  60            JX175	RTS
  112:                          
  113:                          ;LOOKUP TABLIZED LOGICAL FILE DATA
  114:                          ;
  115: 130F F30F  A9 00         LOOKUP	LDA #0
  116: 1311 F311  85 90         	STA STATUS
  117: 1313 F313  8A            	TXA
  118: 1314 F314  A6 98         JLTLK	LDX LDTND
  119: 1316 F316  CA            JX600	DEX
  120: 1317 F317  30 15         	BMI JZ101
  121: 1319 F319  DD 59 02      	CMP LAT,X
  122: 131C F31C  D0 F8         	BNE JX600
  123: 131E F31E  60            	RTS
  124:                          
  125:                          ;ROUTINE TO FETCH TABLE ENTRIES
  126:                          ;
  127: 131F F31F  BD 59 02      JZ100	LDA LAT,X
  128: 1322 F322  85 B8         	STA LA
  129: 1324 F324  BD 63 02      	LDA FAT,X
  130: 1327 F327  85 BA         	STA FA
  131: 1329 F329  BD 6D 02      	LDA SAT,X
  132: 132C F32C  85 B9         	STA SA
  133: 132E F32E  60            JZ101	RTS
  134:                          
  135:                          ; RSR  5/12/82 - MODIFY FOR CLN232
 FILE: kernal.a65
 FILE: clall.a65
    1:                          
    2:                          ;***************************************
    3:                          ;* CLALL -- CLOSE ALL LOGICAL FILES  *
    4:                          ;*      DELETES ALL TABLE ENTRIES AND*
    5:                          ;* RESTORES DEFAULT I/O CHANNELS     *
    6:                          ;* AND CLEARS IEEE PORT DEVICES      *
    7:                          ;*************************************
    8:                          ;
    9: 132F F32F  A9 00         NCLALL	LDA #0
   10: 1331 F331  85 98         	STA LDTND       ;FORGET ALL FILES
   11:                          
   12:                          ;********************************************
   13:                          ;* CLRCH -- CLEAR CHANNELS                  *
   14:                          ;*   UNLISTEN OR UNTALK IEEE DEVICES, BUT   *
   15:                          ;* LEAVE OTHERS ALONE.  DEFAULT CHANNELS    *
   16:                          ;* ARE RESTORED.                            *
   17:                          ;********************************************
   18:                          ;
   19: 1333 F333  A2 03         NCLRCH	LDX #3
   20: 1335 F335  E4 9A         	CPX DFLTO       ;IS OUTPUT CHANNEL IEEE?
   21: 1337 F337  B0 03         	BCS JX750       ;NO...
   22:                          ;
   23: 1339 F339  20 FE ED      	JSR UNLSN       ;YES...UNLISTEN IT
   24:                          ;
   25: 133C F33C  E4 99         JX750	CPX DFLTN       ;IS INPUT CHANNEL IEEE?
   26: 133E F33E  B0 03         	BCS CLALL2      ;NO...
   27:                          ;
   28: 1340 F340  20 EF ED      	JSR UNTLK       ;YES...UNTALK IT
   29:                          ;
   30:                          ;RESTORE DEFAULT VALUES
   31:                          ;
   32:                          ;
   33: 1343 F343  86 9A         CLALL2	STX DFLTO       ;OUTPUT CHAN=3=SCREEN
   34: 1345 F345  A9 00         	LDA #0
   35: 1347 F347  85 99         	STA DFLTN       ;INPUT CHAN=0=KEYBOARD
   36: 1349 F349  60            	RTS
   37:                          
 FILE: kernal.a65
 FILE: open.a65
    1:                          
    2:                          ;***********************************
    3:                          ;*                                 *
    4:                          ;* OPEN FUNCTION                   *
    5:                          ;*                                 *
    6:                          ;* CREATES AN ENTRY IN THE LOGICAL *
    7:                          ;* FILES TABLES CONSISTING OF      *
    8:                          ;* LOGICAL FILE NUMBER--LA, DEVICE *
    9:                          ;* NUMBER--FA, AND SECONDARY CMD-- *
   10:                          ;* SA.                             *
   11:                          ;*                                 *
   12:                          ;* A FILE NAME DESCRIPTOR, FNADR & *
   13:                          ;* FNLEN ARE PASSED TO THIS ROUTINE*
   14:                          ;*                                 *
   15:                          ;***********************************
   16:                          ;
   17: 134A F34A  A6 B8         NOPEN	LDX LA          ;CHECK FILE #
   18: 134C F34C  D0 03         	BNE OP98        ;IS NOT THE KEYBOARD
   19:                          ;
   20: 134E F34E  4C 0A F7      	JMP ERROR6      ;NOT INPUT FILE...
   21:                          ;
   22: 1351 F351  20 0F F3      OP98	JSR LOOKUP      ;SEE IF IN TABLE
   23: 1354 F354  D0 03         	BNE OP100       ;NOT FOUND...O.K.
   24:                          ;
   25: 1356 F356  4C FE F6      	JMP ERROR2      ;FILE OPEN
   26:                          ;
   27: 1359 F359  A6 98         OP100	LDX LDTND       ;LOGICAL DEVICE TABLE END
   28: 135B F35B  E0 0A         	CPX #10         ;MAXIMUM # OF OPEN FILES
   29: 135D F35D  90 03         	BCC OP110       ;LESS THAN 10...O.K.
   30:                          ;
   31: 135F F35F  4C FB F6      	JMP ERROR1      ;TOO MANY FILES
   32:                          ;
   33: 1362 F362  E6 98         OP110	INC LDTND       ;NEW FILE
   34: 1364 F364  A5 B8         	LDA LA
   35: 1366 F366  9D 59 02      	STA LAT,X       ;STORE LOGICAL FILE #
   36: 1369 F369  A5 B9         	LDA SA
   37: 136B F36B  09 60         	ORA #$60        ;MAKE SA AN SERIAL COMMAND
   38: 136D F36D  85 B9         	STA SA
   39: 136F F36F  9D 6D 02      	STA SAT,X       ;STORE COMMAND #
   40: 1372 F372  A5 BA         	LDA FA
   41: 1374 F374  9D 63 02      	STA FAT,X       ;STORE DEVICE #
   42:                          ;
   43:                          ;PERFORM DEVICE SPECIFIC OPEN TASKS
   44:                          ;
   45: 1377 F377  F0 5A         	BEQ OP175       ;IS KEYBOARD...DONE.
   46: 1379 F379  C9 03         	CMP #3
   47: 137B F37B  F0 56         	BEQ OP175       ;IS SCREEN...DONE.
   48: 137D F37D  90 05         	BCC OP150       ;ARE CASSETTES 1 & 2
   49:                          ;
   50: 137F F37F  20 D5 F3      	JSR OPENI       ;IS ON SERIAL...OPEN IT
   51: 1382 F382  90 4F         	BCC OP175       ;BRANCH ALWAYS...DONE
   52:                          ;
   53:                          ;PERFORM TAPE OPEN STUFF
   54:                          ;
   55: 1384 F384  C9 02         OP150	CMP #2
   56: 1386 F386  D0 03         	BNE OP152
   57:                          ;
   58: 1388 F388  4C 09 F4      	JMP OPN232
   59:                          ;
   60: 138B F38B  20 D0 F7      OP152	JSR ZZZ         ;SEE IF TAPE BUFFER
   61: 138E F38E  B0 03         	BCS OP155       ;YES
   62:                          ;
   63: 1390 F390  4C 13 F7      	JMP ERROR9      ;NO...DEALLOCATED
   64:                          ;
   65: 1393 F393  A5 B9         OP155	LDA SA
   66: 1395 F395  29 0F         	AND #$F         ;MASK OFF COMMAND
   67: 1397 F397  D0 1F         	BNE OP200       ;NON ZERO IS TAPE WRITE
   68:                          ;
   69:                          ;OPEN CASSETE TAPE FILE TO READ
   70:                          ;
   71: 1399 F399  20 17 F8      	JSR CSTE1       ;TELL "PRESS PLAY"
   72: 139C F39C  B0 36         	BCS OP180       ;STOP KEY PRESSED
   73:                          ;
   74: 139E F39E  20 AF F5      	JSR LUKING      ;TELL USER "SEARCHING"
   75:                          ;
   76: 13A1 F3A1  A5 B7         	LDA FNLEN
   77: 13A3 F3A3  F0 0A         	BEQ OP170       ;LOOKING FOR ANY FILE
   78:                          ;
   79: 13A5 F3A5  20 EA F7      	JSR FAF         ;LOOKING FOR NAMED FILE
   80: 13A8 F3A8  90 18         	BCC OP171       ;FOUND IT!!!
   81: 13AA F3AA  F0 28         	BEQ OP180       ;STOP KEY PRESSED
   82:                          ;
   83: 13AC F3AC  4C 04 F7      OP160	JMP ERROR4      ;FILE NOT FOUND
   84:                          ;
   85: 13AF F3AF  20 2C F7      OP170	JSR FAH         ;GET ANY OLD HEADER
   86: 13B2 F3B2  F0 20         	BEQ OP180       ;STOP KEY PRESSED
   87: 13B4 F3B4  90 0C         	BCC OP171       ;ALL O.K.
   88: 13B6 F3B6  B0 F4         	BCS OP160       ;FILE NOT FOUND...
   89:                          ;
   90:                          ;OPEN CASSETTE TAPE FOR WRITE
   91:                          ;
   92: 13B8 F3B8  20 38 F8      OP200	JSR CSTE2       ;TELL "PRESS PLAY AND RECORD"
   93: 13BB F3BB  B0 17         	BCS OP180       ;STOP KEY PRESSED
   94: 13BD F3BD  A9 04         	LDA #BDFH       ;DATA FILE HEADER TYPE
   95: 13BF F3BF  20 6A F7      	JSR TAPEH       ;WRITE IT
   96:                          ;
   97:                          ;FINISH OPEN FOR TAPE READ/WRITE
   98:                          ;
   99: 13C2 F3C2  A9 BF         OP171	LDA #BUFSZ-1    ;ASSUME FORCE READ
  100:                          ;
  101: 13C4 F3C4  A4 B9         	LDY SA
  102: 13C6 F3C6  C0 60         	CPY #$60        ;OPEN FOR READ?
  103: 13C8 F3C8  F0 07         	BEQ OP172
  104:                          ;
  105:                          ;SET POINTERS FOR BUFFERING DATA
  106:                          ;
  107: 13CA F3CA  A0 00         	LDY #0
  108: 13CC F3CC  A9 02         	LDA #BDF        ;TYPE FLAG FOR BLOCK
  109: 13CE F3CE  91 B2         	STA (TAPE1),Y   ;TO BEGIN OF BUFFER
  110: 13D0 F3D0  98            	TYA
  111:                          ;
  112: 13D1 F3D1  85 A6         OP172	STA BUFPT       ;POINT TO DATA
  113: 13D3 F3D3  18            OP175	CLC             ;FLAG GOOD OPEN
  114: 13D4 F3D4  60            OP180	RTS             ;EXIT IN PEACE
  115:                          
  116: 13D5 F3D5  A5 B9         OPENI	LDA SA
  117: 13D7 F3D7  30 FA         	BMI OP175       ;NO SA...DONE
  118:                          ;
  119: 13D9 F3D9  A4 B7         	LDY FNLEN
  120: 13DB F3DB  F0 F6         	BEQ OP175       ;NO FILE NAME...DONE
  121:                          ;
  122: 13DD F3DD  A9 00         	LDA #0          ;CLEAR THE SERIAL STATUS
  123: 13DF F3DF  85 90         	STA STATUS
  124:                          ;
  125: 13E1 F3E1  A5 BA         	LDA FA
  126: 13E3 F3E3  20 0C ED      	JSR LISTN       ;DEVICE LA TO LISTEN
  127:                          ;
  128: 13E6 F3E6  A5 B9         	LDA SA
  129: 13E8 F3E8  09 F0         	ORA #$F0
  130: 13EA F3EA  20 B9 ED      	JSR SECND
  131:                          ;
  132: 13ED F3ED  A5 90         	LDA STATUS      ;ANYBODY HOME?
  133: 13EF F3EF  10 05         	BPL OP35        ;YES...CONTINUE
  134:                          ;
  135:                          ;THIS ROUTINE IS CALLED BY OTHER
  136:                          ;KERNAL ROUTINES WHICH ARE CALLED
  137:                          ;DIRECTLY BY OS.  KILL RETURN
  138:                          ;ADDRESS TO RETURN TO OS.
  139:                          ;
  140: 13F1 F3F1  68            	PLA
  141: 13F2 F3F2  68            	PLA
  142: 13F3 F3F3  4C 07 F7      	JMP ERROR5      ;DEVICE NOT PRESENT
  143:                          ;
  144: 13F6 F3F6  A5 B7         OP35	LDA FNLEN
  145: 13F8 F3F8  F0 0C         	BEQ OP45        ;NO NAME...DONE SEQUENCE
  146:                          ;
  147:                          ;SEND FILE NAME OVER SERIAL
  148:                          ;
  149: 13FA F3FA  A0 00         	LDY #0
  150: 13FC F3FC  B1 BB         OP40	LDA (FNADR),Y
  151: 13FE F3FE  20 DD ED      	JSR CIOUT
  152: 1401 F401  C8            	INY
  153: 1402 F402  C4 B7         	CPY FNLEN
  154: 1404 F404  D0 F6         	BNE OP40
  155:                          ;
  156: 1406 F406  4C 54 F6      OP45	JMP CUNLSN      ;JSR UNLSN: CLC: RTS
  157:                          
  158:                          ; OPN232 - OPEN AN RS-232 OR PARALLEL PORT FILE
  159:                          ;
  160:                          ; VARIABLES INITILIZED
  161:                          ;   BITNUM - # OF BITS TO BE SENT CALC FROM M51CTR
  162:                          ;   BAUDOF - BAUD RATE FULL
  163:                          ;   RSSTAT - RS-232 STATUS REG
  164:                          ;   M51CTR - 6551 CONTROL REG
  165:                          ;   M51CDR - 6551 COMMAND REG
  166:                          ;   M51AJB - USER BAUD RATE (CLOCK/BAUD/2-100)
  167:                          ;   ENABL  - 6526 NMI ENABLES (1-NMI BIT ON)
  168:                          ;
  169: 1409 F409  20 83 F4      OPN232	JSR CLN232      ;SET UP RS232, .Y=0 ON RETURN
  170:                          ;
  171:                          ; PASS PRAMS TO M51REGS
  172:                          ;
  173: 140C F40C  8C 97 02      	STY RSSTAT      ;CLEAR STATUS
  174:                          ;
  175: 140F F40F  C4 B7         OPN020	CPY FNLEN       ;CHECK IF AT END OF FILENAME
  176: 1411 F411  F0 0A         	BEQ OPN025      ;YES...
  177:                          ;
  178: 1413 F413  B1 BB         	LDA (FNADR),Y   ;MOVE DATA
  179: 1415 F415  99 93 02      	STA M51CTR,Y    ;TO M51REGS
  180: 1418 F418  C8            	INY
  181: 1419 F419  C0 04         	CPY #4          ;ONLY 4 POSSIBLE PRAMS
  182: 141B F41B  D0 F2         	BNE OPN020
  183:                          ;
  184:                          ; CALC # OF BITS
  185:                          ;
  186: 141D F41D  20 4A EF      OPN025	JSR BITCNT
  187: 1420 F420  8E 98 02      	STX BITNUM
  188:                          ;
  189:                          ; CALC BAUD RATE
  190:                          ;
  191: 1423 F423  AD 93 02      	LDA M51CTR
  192: 1426 F426  29 0F         	AND #$0F
  193: 1428 F428  F0 1C         	BEQ OPN028
  194:                          ;
  195:                          ; CALCULATE START-TEST RATE...
  196:                          ;  DIFFERENT THAN ORIGINAL RELEASE 901227-01
  197:                          ;
  198: 142A F42A  0A            	ASL             ;GET OFFSET INTO TABLES
  199: 142B F42B  AA            	TAX
  200: 142C F42C  AD A6 02      	LDA PALNTS      ;GET TV STANDARD
  201: 142F F42F  D0 09         	BNE OPN026
  202: 1431 F431  BC C1 FE      	LDY BAUDO-1,X   ;NTSC STANDARD
  203: 1434 F434  BD C0 FE      	LDA BAUDO-2,X
  204: 1437 F437  4C 40 F4      	JMP OPN027
  205:                          ;
  206: 143A F43A  BC EB E4      OPN026	LDY BAUDOP-1,X  ;PAL STANDARD
  207: 143D F43D  BD EA E4      	LDA BAUDOP-2,X
  208: 1440 F440  8C 96 02      OPN027	STY M51AJB+1    ;HOLD START RATE IN M51AJB
  209: 1443 F443  8D 95 02      	STA M51AJB
  210: 1446 F446  AD 95 02      OPN028	LDA M51AJB      ;CALCULATE BAUD RATE
  211: 1449 F449  0A            	ASL  
  212: 144A F44A  20 2E FF      	JSR POPEN       ;GOTO PATCH AREA
  213:                          ;
  214:                          ; CHECK FOR 3/X LINE RESPONSE
  215:                          ;
  216: 144D F44D  AD 94 02      OPN030	LDA M51CDR      ;BIT 0 OF M51CDR
  217: 1450 F450  4A            	LSR  
  218: 1451 F451  90 09         	BCC OPN050      ;...3 LINE
  219:                          ;
  220:                          ; CHECK FOR X LINE PROPER STATES
  221:                          ;
  222: 1453 F453  AD 01 DD      	LDA D2PRB
  223: 1456 F456  0A            	ASL  
  224: 1457 F457  B0 03         	BCS OPN050
  225: 1459 F459  20 0D F0      	JSR CKDSRX      ;CHANGE FROM JMP TO PREVENT SYSTEM DAMAGE (901227-02)
  226:                          ;
  227:                          ; SET UP BUFFER POINTERS (DBE=DBS)
  228:                          ;
  229: 145C F45C  AD 9B 02      OPN050	LDA RIDBE
  230: 145F F45F  8D 9C 02      	STA RIDBS
  231: 1462 F462  AD 9E 02      	LDA RODBE
  232: 1465 F465  8D 9D 02      	STA RODBS
  233:                          ;
  234:                          ; ALLOCATE BUFFERS
  235:                          ;
  236: 1468 F468  20 27 FE      OPN055	JSR GETTOP      ;GET MEMSIZ
  237: 146B F46B  A5 F8         	LDA RIBUF+1     ;IN ALLOCATION...
  238: 146D F46D  D0 05         	BNE OPN060      ;ALREADY
  239: 146F F46F  88            	DEY             ;THERE GOES 256 BYTES
  240: 1470 F470  84 F8         	STY RIBUF+1
  241: 1472 F472  86 F7         	STX RIBUF
  242: 1474 F474  A5 FA         OPN060	LDA ROBUF+1     ;OUT ALLOCATION...
  243: 1476 F476  D0 05         	BNE MEMTCF      ;ALREAY
  244: 1478 F478  88            	DEY             ;THERE GOES 256 BYTES
  245: 1479 F479  84 FA         	STY ROBUF+1
  246: 147B F47B  86 F9         	STX ROBUF
  247: 147D F47D  38            MEMTCF	SEC             ;SIGNAL TOP OF MEMORY CHANGE
  248: 147E F47E  A9 F0         	LDA #$F0
  249: 1480 F480  4C 2D FE      	JMP SETTOP      ;TOP CHANGED
  250:                          ;
  251:                          ; CLN232 - CLEAN UP 232 SYSTEM FOR OPEN/CLOSE
  252:                          ;  SET UP DDRB AND CB2 FOR RS-232
  253:                          ;
  254: 1483 F483  A9 7F         CLN232	LDA #$7F        ;CLEAR NMI'S
  255: 1485 F485  8D 0D DD      	STA D2ICR
  256: 1488 F488  A9 06         	LDA #%00000110  ;DDRB
  257: 148A F48A  8D 03 DD      	STA D2DDRB
  258: 148D F48D  8D 01 DD      	STA D2PRB       ;DTR,RTS HIGH
  259: 1490 F490  A9 04         	LDA #$04        ;OUTPUT HIGH PA2
  260: 1492 F492  0D 00 DD      	ORA D2PRA
  261: 1495 F495  8D 00 DD      	STA D2PRA
  262: 1498 F498  A0 00         	LDY #00
  263: 149A F49A  8C A1 02      	STY ENABL       ;CLEAR ENABLS
  264: 149D F49D  60            	RTS
  265:                          
  266:                          ; RSR  8/25/80 - ADD RS-232 CODE
  267:                          ; RSR  8/26/80 - TOP OF MEMORY HANDLER
  268:                          ; RSR  8/29/80 - ADD FILENAME TO M51REGS
  269:                          ; RSR  9/02/80 - FIX ORDERING OF RS-232 ROUTINES
  270:                          ; RSR 12/11/81 - MODIFY FOR VIC-40 I/O
  271:                          ; RSR  2/08/82 - CLEAR STATUS IN OPENI
  272:                          ; RSR  5/12/82 - COMPACT RS232 OPEN/CLOSE CODE
  273:                          ; RSR  6/22/82 - CHANGE RS232 OPEN FOR UNIVERAL
  274:                          ; RSR  7/06/82 - CHANGE JMP CKDSRX TO PREVENT BAD BUFFERING
 FILE: kernal.a65
 FILE: load.a65
    1:                          
    2:                          ;**********************************
    3:                          ;* LOAD RAM FUNCTION              *
    4:                          ;*                                *
    5:                          ;* LOADS FROM CASSETTE 1 OR 2, OR *
    6:                          ;* SERIAL BUS DEVICES >=4 TO 31   *
    7:                          ;* AS DETERMINED BY CONTENTS OF   *
    8:                          ;* VARIABLE FA. VERIFY FLAG IN .A *
    9:                          ;*                                *
   10:                          ;* ALT LOAD IF SA=0, NORMAL SA=1  *
   11:                          ;* .X , .Y LOAD ADDRESS IF SA=0   *
   12:                          ;* .A=0 PERFORMS LOAD,<> IS VERIFY*
   13:                          ;*                                *
   14:                          ;* HIGH LOAD RETURN IN X,Y.       *
   15:                          ;*                                *
   16:                          ;**********************************
   17:                          
   18: 149E F49E  86 C3         LOADSP	STX MEMUSS      ;.X HAS LOW ALT START
   19: 14A0 F4A0  84 C4         	STY MEMUSS+1
   20: 14A2 F4A2  6C 30 03      LOAD	JMP (ILOAD)     ;MONITOR LOAD ENTRY
   21:                          ;
   22: 14A5 F4A5  85 93         NLOAD	STA VERCK       ;STORE VERIFY FLAG
   23: 14A7 F4A7  A9 00         	LDA #0
   24: 14A9 F4A9  85 90         	STA STATUS
   25:                          ;
   26: 14AB F4AB  A5 BA         	LDA FA          ;CHECK DEVICE NUMBER
   27: 14AD F4AD  D0 03         	BNE LD20
   28:                          ;
   29: 14AF F4AF  4C 13 F7      LD10	JMP ERROR9      ;BAD DEVICE #-KEYBOARD
   30:                          ;
   31: 14B2 F4B2  C9 03         LD20	CMP #3
   32: 14B4 F4B4  F0 F9         	BEQ LD10        ;DISALLOW SCREEN LOAD
   33: 14B6 F4B6  90 7B         	BCC LD100       ;HANDLE TAPES DIFFERENT
   34:                          ;
   35:                          ;LOAD FROM CBM IEEE DEVICE
   36:                          ;
   37: 14B8 F4B8  A4 B7         	LDY FNLEN       ;MUST HAVE FILE NAME
   38: 14BA F4BA  D0 03         	BNE LD25        ;YES...OK
   39:                          ;
   40: 14BC F4BC  4C 10 F7      	JMP ERROR8      ;MISSING FILE NAME
   41:                          ;
   42: 14BF F4BF  A6 B9         LD25	LDX SA          ;SAVE SA IN .X
   43: 14C1 F4C1  20 AF F5      	JSR LUKING      ;TELL USER LOOKING
   44: 14C4 F4C4  A9 60         	LDA #$60        ;SPECIAL LOAD COMMAND
   45: 14C6 F4C6  85 B9         	STA SA
   46: 14C8 F4C8  20 D5 F3      	JSR OPENI       ;OPEN THE FILE
   47:                          ;
   48: 14CB F4CB  A5 BA         	LDA FA
   49: 14CD F4CD  20 09 ED      	JSR TALK        ;ESTABLISH THE CHANNEL
   50: 14D0 F4D0  A5 B9         	LDA SA
   51: 14D2 F4D2  20 C7 ED      	JSR TKSA        ;TELL IT TO LOAD
   52:                          ;
   53: 14D5 F4D5  20 13 EE      	JSR ACPTR       ;GET FIRST BYTE
   54: 14D8 F4D8  85 AE         	STA EAL
   55:                          ;
   56: 14DA F4DA  A5 90         	LDA STATUS      ;TEST STATUS FOR ERROR
   57: 14DC F4DC  4A            	LSR  
   58: 14DD F4DD  4A            	LSR  
   59: 14DE F4DE  B0 50         	BCS LD90        ;FILE NOT FOUND...
   60: 14E0 F4E0  20 13 EE      	JSR ACPTR
   61: 14E3 F4E3  85 AF         	STA EAH
   62:                          ;
   63: 14E5 F4E5  8A            	TXA             ;FIND OUT OLD SA
   64: 14E6 F4E6  D0 08         	BNE LD30        ;SA<>0 USE DISK ADDRESS
   65: 14E8 F4E8  A5 C3         	LDA MEMUSS      ;ELSE LOAD WHERE USER WANTS
   66: 14EA F4EA  85 AE         	STA EAL
   67: 14EC F4EC  A5 C4         	LDA MEMUSS+1
   68: 14EE F4EE  85 AF         	STA EAH
   69: 14F0 F4F0  20 D2 F5      LD30	JSR LODING      ;TELL USER LOADING
   70:                          ;
   71: 14F3 F4F3  A9 FD         LD40	LDA #$FD        ;MASK OFF TIMEOUT
   72: 14F5 F4F5  25 90         	AND STATUS
   73: 14F7 F4F7  85 90         	STA STATUS
   74:                          ;
   75: 14F9 F4F9  20 E1 FF      	JSR STOP        ;STOP KEY?
   76: 14FC F4FC  D0 03         	BNE LD45        ;NO...
   77:                          ;
   78: 14FE F4FE  4C 33 F6      	JMP BREAK       ;STOP KEY PRESSED
   79:                          ;
   80: 1501 F501  20 13 EE      LD45	JSR ACPTR       ;GET BYTE OFF IEEE
   81: 1504 F504  AA            	TAX
   82: 1505 F505  A5 90         	LDA STATUS      ;WAS THERE A TIMEOUT?
   83: 1507 F507  4A            	LSR  
   84: 1508 F508  4A            	LSR  
   85: 1509 F509  B0 E8         	BCS LD40        ;YES...TRY AGAIN
   86: 150B F50B  8A            	TXA
   87: 150C F50C  A4 93         	LDY VERCK       ;PERFORMING VERIFY?
   88: 150E F50E  F0 0C         	BEQ LD50        ;NO...LOAD
   89: 1510 F510  A0 00         	LDY #0
   90: 1512 F512  D1 AE         	CMP (EAL),Y     ;VERIFY IT
   91: 1514 F514  F0 08         	BEQ LD60        ;O.K....
   92: 1516 F516  A9 10         	LDA #SPERR      ;NO GOOD...VERIFY ERROR
   93: 1518 F518  20 1C FE      	JSR UDST        ;UPDATE STATUS
   94: 151B F51B  2C            	.BYTE $2C       ;SKIP NEXT STORE
   95:                          ;
   96: 151C F51C  91 AE         LD50	STA (EAL),Y
   97: 151E F51E  E6 AE         LD60	INC EAL         ;INCREMENT STORE ADDR
   98: 1520 F520  D0 02         	BNE LD64
   99: 1522 F522  E6 AF         	INC EAH
  100: 1524 F524  24 90         LD64	BIT STATUS      ;EOI?
  101: 1526 F526  50 CB         	BVC LD40        ;NO...CONTINUE LOAD
  102:                          ;
  103: 1528 F528  20 EF ED      	JSR UNTLK       ;CLOSE CHANNEL
  104: 152B F52B  20 42 F6      	JSR CLSEI       ;CLOSE THE FILE
  105: 152E F52E  90 79         	BCC LD180       ;BRANCH ALWAYS
  106:                          ;
  107: 1530 F530  4C 04 F7      LD90	JMP ERROR4      ;FILE NOT FOUND
  108:                          ;
  109:                          ;LOAD FROM TAPE
  110:                          ;
  111: 1533 F533  4A            LD100	LSR  
  112: 1534 F534  B0 03         	BCS LD102       ;IF C-SET THEN IT'S CASSETTE
  113:                          ;
  114: 1536 F536  4C 13 F7      	JMP ERROR9      ;BAD DEVICE #
  115:                          ;
  116: 1539 F539  20 D0 F7      LD102	JSR ZZZ         ;SET POINTERS AT TAPE
  117: 153C F53C  B0 03         	BCS LD104
  118: 153E F53E  4C 13 F7      	JMP ERROR9      ;DEALLOCATED...
  119: 1541 F541  20 17 F8      LD104	JSR CSTE1       ;TELL USER ABOUT BUTTONS
  120: 1544 F544  B0 68         	BCS LD190       ;STOP KEY PRESSED?
  121: 1546 F546  20 AF F5      	JSR LUKING      ;TELL USER SEARCHING
  122:                          ;
  123: 1549 F549  A5 B7         LD112	LDA FNLEN       ;IS THERE A NAME?
  124: 154B F54B  F0 09         	BEQ LD150       ;NONE...LOAD ANYTHING
  125: 154D F54D  20 EA F7      	JSR FAF         ;FIND A FILE ON TAPE
  126: 1550 F550  90 0B         	BCC LD170       ;GOT IT!
  127: 1552 F552  F0 5A         	BEQ LD190       ;STOP KEY PRESSED
  128: 1554 F554  B0 DA         	BCS LD90        ;NOPE...END OF TAPE
  129:                          ;
  130: 1556 F556  20 2C F7      LD150	JSR FAH         ;FIND ANY HEADER
  131: 1559 F559  F0 53         	BEQ LD190       ;STOP KEY PRESSED
  132: 155B F55B  B0 D3         	BCS LD90        ;NO HEADER
  133:                          ;
  134: 155D F55D  A5 90         LD170	LDA STATUS
  135: 155F F55F  29 10         	AND #SPERR      ;MUST GOT HEADER RIGHT
  136: 1561 F561  38            	SEC
  137: 1562 F562  D0 4A         	BNE LD190       ;IS BAD
  138:                          ;
  139: 1564 F564  E0 01         	CPX #BLF        ;IS IT A MOVABLE PROGRAM...
  140: 1566 F566  F0 11         	BEQ LD178       ;YES
  141:                          ;
  142: 1568 F568  E0 03         	CPX #PLF        ;IS IT A PROGRAM
  143: 156A F56A  D0 DD         	BNE LD112       ;NO...ITS SOMETHING ELSE
  144:                          ;
  145: 156C F56C  A0 01         LD177	LDY #1          ;FIXED LOAD...
  146: 156E F56E  B1 B2         	LDA (TAPE1),Y   ;...THE ADDRESS IN THE...
  147: 1570 F570  85 C3         	STA MEMUSS      ;...BUFFER IS THE START ADDRESS
  148: 1572 F572  C8            	INY
  149: 1573 F573  B1 B2         	LDA (TAPE1),Y
  150: 1575 F575  85 C4         	STA MEMUSS+1
  151: 1577 F577  B0 04         	BCS LD179       ;JMP ..CARRY SET BY CPX'S
  152:                          ;
  153: 1579 F579  A5 B9         LD178	LDA SA          ;CHECK FOR MONITOR LOAD...
  154: 157B F57B  D0 EF         	BNE LD177       ;...YES WE WANT FIXED TYPE
  155:                          ;
  156: 157D F57D  A0 03         LD179	LDY #3          ;TAPEA - TAPESTA
  157:                          ;CARRY SET BY CPX'S
  158: 157F F57F  B1 B2         	LDA (TAPE1),Y
  159: 1581 F581  A0 01         	LDY #1
  160: 1583 F583  F1 B2         	SBC (TAPE1),Y
  161: 1585 F585  AA            	TAX             ;LOW TO .X
  162: 1586 F586  A0 04         	LDY #4
  163: 1588 F588  B1 B2         	LDA (TAPE1),Y
  164: 158A F58A  A0 02         	LDY #2
  165: 158C F58C  F1 B2         	SBC (TAPE1),Y
  166: 158E F58E  A8            	TAY             ;HIGH TO .Y
  167:                          ;
  168: 158F F58F  18            	CLC             ;EA = STA+(TAPEA-TAPESTA)
  169: 1590 F590  8A            	TXA
  170: 1591 F591  65 C3         	ADC MEMUSS      ;
  171: 1593 F593  85 AE         	STA EAL
  172: 1595 F595  98            	TYA
  173: 1596 F596  65 C4         	ADC MEMUSS+1
  174: 1598 F598  85 AF         	STA EAH
  175: 159A F59A  A5 C3         	LDA MEMUSS      ;SET UP STARTING ADDRESS
  176: 159C F59C  85 C1         	STA STAL
  177: 159E F59E  A5 C4         	LDA MEMUSS+1
  178: 15A0 F5A0  85 C2         	STA STAH
  179: 15A2 F5A2  20 D2 F5      	JSR LODING      ;TELL USER LOADING
  180: 15A5 F5A5  20 4A F8      	JSR TRD         ;DO TAPE BLOCK LOAD
  181: 15A8 F5A8  24            	.BYTE $24       ;CARRY FROM TRD
  182:                          ;
  183: 15A9 F5A9  18            LD180	CLC             ;GOOD EXIT
  184:                          ;
  185:                          ; SET UP END LOAD ADDRESS
  186:                          ;
  187: 15AA F5AA  A6 AE         	LDX EAL
  188: 15AC F5AC  A4 AF         	LDY EAH
  189:                          ;
  190: 15AE F5AE  60            LD190	RTS
  191:                          
  192:                          ;SUBROUTINE TO PRINT TO CONSOLE:
  193:                          ;
  194:                          ;SEARCHING [FOR NAME]
  195:                          ;
  196: 15AF F5AF  A5 9D         LUKING	LDA MSGFLG      ;SUPPOSED TO PRINT?
  197: 15B1 F5B1  10 1E         	BPL LD115       ;...NO
  198: 15B3 F5B3  A0 0C         	LDY #MS5-MS1    ;"SEARCHING"
  199: 15B5 F5B5  20 2F F1      	JSR MSG
  200: 15B8 F5B8  A5 B7         	LDA FNLEN
  201: 15BA F5BA  F0 15         	BEQ LD115
  202: 15BC F5BC  A0 17         	LDY #MS6-MS1    ;"FOR"
  203: 15BE F5BE  20 2F F1      	JSR MSG
  204:                          
  205:                          ;SUBROUTINE TO OUTPUT FILE NAME
  206:                          ;
  207: 15C1 F5C1  A4 B7         OUTFN	LDY FNLEN       ;IS THERE A NAME?
  208: 15C3 F5C3  F0 0C         	BEQ LD115       ;NO...DONE
  209: 15C5 F5C5  A0 00         	LDY #0
  210: 15C7 F5C7  B1 BB         LD110	LDA (FNADR),Y
  211: 15C9 F5C9  20 D2 FF      	JSR BSOUT
  212: 15CC F5CC  C8            	INY
  213: 15CD F5CD  C4 B7         	CPY FNLEN
  214: 15CF F5CF  D0 F6         	BNE LD110
  215:                          ;
  216: 15D1 F5D1  60            LD115	RTS
  217:                          
  218:                          ;SUBROUTINE TO PRINT:
  219:                          ;
  220:                          ;LOADING/VERIFING
  221:                          ;
  222: 15D2 F5D2  A0 49         LODING	LDY #MS10-MS1   ;ASSUME 'LOADING'
  223: 15D4 F5D4  A5 93         	LDA VERCK       ;CHECK FLAG
  224: 15D6 F5D6  F0 02         	BEQ LD410       ;ARE DOING LOAD
  225: 15D8 F5D8  A0 59         	LDY #MS21-MS1   ;ARE 'VERIFYING'
  226: 15DA F5DA  4C 2B F1      LD410	JMP SPMSG
  227:                          
 FILE: kernal.a65
 FILE: save.a65
    1:                          
    2:                          ;***********************************
    3:                          ;* SAVE                            *
    4:                          ;*                                 *
    5:                          ;* SAVES TO CASSETTE 1 OR 2, OR    *
    6:                          ;* IEEE DEVICES 4>=N>=31 AS SELECT-*
    7:                          ;* ED BY VARIABLE FA.              *
    8:                          ;*                                 *
    9:                          ;*START OF SAVE IS INDIRECT AT .A  *
   10:                          ;*END OF SAVE IS .X,.Y             *
   11:                          ;***********************************
   12:                          
   13: 15DD F5DD  86 AE         SAVESP	STX EAL
   14: 15DF F5DF  84 AF         	STY EAH
   15: 15E1 F5E1  AA            	TAX             ;SET UP START
   16: 15E2 F5E2  B5 00         	LDA $00,X
   17: 15E4 F5E4  85 C1         	STA STAL
   18: 15E6 F5E6  B5 01         	LDA $01,X
   19: 15E8 F5E8  85 C2         	STA STAH
   20:                          ;
   21: 15EA F5EA  6C 32 03      SAVE	JMP (ISAVE)
   22: 15ED F5ED  A5 BA         NSAVE	LDA FA  ; ***MONITOR ENTRY
   23: 15EF F5EF  D0 03         	BNE SV20
   24:                          ;
   25: 15F1 F5F1  4C 13 F7      SV10	JMP ERROR9      ;BAD DEVICE #
   26:                          ;
   27: 15F4 F5F4  C9 03         SV20	CMP #3
   28: 15F6 F5F6  F0 F9         	BEQ SV10
   29: 15F8 F5F8  90 5F         	BCC SV100
   30: 15FA F5FA  A9 61         	LDA #$61
   31: 15FC F5FC  85 B9         	STA SA
   32: 15FE F5FE  A4 B7         	LDY FNLEN
   33: 1600 F600  D0 03         	BNE SV25
   34:                          ;
   35: 1602 F602  4C 10 F7      	JMP ERROR8      ;MISSING FILE NAME
   36:                          ;
   37: 1605 F605  20 D5 F3      SV25	JSR OPENI
   38: 1608 F608  20 8F F6      	JSR SAVING
   39: 160B F60B  A5 BA         	LDA FA
   40: 160D F60D  20 0C ED      	JSR LISTN
   41: 1610 F610  A5 B9         	LDA SA
   42: 1612 F612  20 B9 ED      	JSR SECND
   43: 1615 F615  A0 00         	LDY #0
   44: 1617 F617  20 8E FB      	JSR RD300
   45: 161A F61A  A5 AC         	LDA SAL
   46: 161C F61C  20 DD ED      	JSR CIOUT
   47: 161F F61F  A5 AD         	LDA SAH
   48: 1621 F621  20 DD ED      	JSR CIOUT
   49: 1624 F624  20 D1 FC      SV30	JSR CMPSTE      ;COMPARE START TO END
   50: 1627 F627  B0 16         	BCS SV50        ;HAVE REACHED END
   51: 1629 F629  B1 AC         	LDA (SAL),Y
   52: 162B F62B  20 DD ED      	JSR CIOUT
   53: 162E F62E  20 E1 FF      	JSR STOP
   54: 1631 F631  D0 07         	BNE SV40
   55:                          ;
   56: 1633 F633  20 42 F6      BREAK	JSR CLSEI
   57: 1636 F636  A9 00         	LDA #0
   58: 1638 F638  38            	SEC
   59: 1639 F639  60            	RTS
   60:                          ;
   61: 163A F63A  20 DB FC      SV40	JSR INCSAL      ;INCREMENT CURRENT ADDR.
   62: 163D F63D  D0 E5         	BNE SV30
   63: 163F F63F  20 FE ED      SV50	JSR UNLSN
   64:                          
   65: 1642 F642  24 B9         CLSEI	BIT SA
   66: 1644 F644  30 11         	BMI CLSEI2
   67: 1646 F646  A5 BA         	LDA FA
   68: 1648 F648  20 0C ED      	JSR LISTN
   69: 164B F64B  A5 B9         	LDA SA
   70: 164D F64D  29 EF         	AND #$EF
   71: 164F F64F  09 E0         	ORA #$E0
   72: 1651 F651  20 B9 ED      	JSR SECND
   73:                          ;
   74: 1654 F654  20 FE ED      CUNLSN	JSR UNLSN       ;ENTRY FOR OPENI
   75:                          ;
   76: 1657 F657  18            CLSEI2	CLC
   77: 1658 F658  60            	RTS
   78:                          
   79: 1659 F659  4A            SV100	LSR  
   80: 165A F65A  B0 03         	BCS SV102       ;IF C-SET THEN IT'S CASSETTE
   81:                          ;
   82: 165C F65C  4C 13 F7      	JMP ERROR9      ;BAD DEVICE #
   83:                          ;
   84: 165F F65F  20 D0 F7      SV102	JSR ZZZ         ;GET ADDR OF TAPE
   85: 1662 F662  90 8D         	BCC SV10        ;BUFFER IS DEALLOCATED
   86: 1664 F664  20 38 F8      	JSR CSTE2
   87: 1667 F667  B0 25         	BCS SV115       ;STOP KEY PRESSED
   88: 1669 F669  20 8F F6      	JSR SAVING      ;TELL USER 'SAVING'
   89: 166C F66C  A2 03         SV105	LDX #PLF        ;DECIDE TYPE TO SAVE
   90: 166E F66E  A5 B9         	LDA SA          ;1-PLF 0-BLF
   91: 1670 F670  29 01         	AND #01
   92: 1672 F672  D0 02         	BNE SV106
   93: 1674 F674  A2 01         	LDX #BLF
   94: 1676 F676  8A            SV106	TXA
   95: 1677 F677  20 6A F7      	JSR TAPEH
   96: 167A F67A  B0 12         	BCS SV115       ;STOP KEY PRESSED
   97: 167C F67C  20 67 F8      	JSR TWRT
   98: 167F F67F  B0 0D         	BCS SV115       ;STOP KEY PRESSED
   99: 1681 F681  A5 B9         	LDA SA
  100: 1683 F683  29 02         	AND #2          ;WRITE END OF TAPE?
  101: 1685 F685  F0 06         	BEQ SV110       ;NO...
  102:                          ;
  103: 1687 F687  A9 05         	LDA #EOT
  104: 1689 F689  20 6A F7      	JSR TAPEH
  105: 168C F68C  24            	.BYTE $24       ;SKIP 1 BYTE
  106:                          ;
  107: 168D F68D  18            SV110	CLC
  108: 168E F68E  60            SV115	RTS
  109:                          
  110:                          ;SUBROUTINE TO OUTPUT:
  111:                          ;'SAVING <FILE NAME>'
  112:                          ;
  113: 168F F68F  A5 9D         SAVING	LDA MSGFLG
  114: 1691 F691  10 FB         	BPL SV115       ;NO PRINT
  115:                          ;
  116: 1693 F693  A0 51         	LDY #MS11-MS1   ;'SAVING'
  117: 1695 F695  20 2F F1      	JSR MSG
  118: 1698 F698  4C C1 F5      	JMP OUTFN       ;<FILE NAME>
  119:                          
 FILE: kernal.a65
 FILE: time.a65
    1:                          
    2:                          ;***********************************
    3:                          ;*                                 *
    4:                          ;* TIME                            *
    5:                          ;*                                 *
    6:                          ;*CONSISTS OF THREE FUNCTIONS:     *
    7:                          ;* (1) UDTIM-- UPDATE TIME. USUALLY*
    8:                          ;*     CALLED EVERY 60TH SECOND.   *
    9:                          ;* (2) SETTIM-- SET TIME. .Y=MSD,  *
   10:                          ;*     .X=NEXT SIGNIFICANT,.A=LSD  *
   11:                          ;* (3) RDTIM-- READ TIME. .Y=MSD,  *
   12:                          ;*     .X=NEXT SIGNIFICANT,.A=LSD  *
   13:                          ;*                                 *
   14:                          ;***********************************
   15:                          
   16:                          ;INTERRUPTS ARE COMING FROM THE 6526 TIMERS
   17:                          ;
   18: 169B F69B  A2 00         UDTIM	LDX #0          ;PRE-LOAD FOR LATER
   19:                          ;
   20:                          ;HERE WE PROCEED WITH AN INCREMENT
   21:                          ;OF THE TIME REGISTER.
   22:                          ;
   23: 169D F69D  E6 A2         UD20	INC TIME+2
   24: 169F F69F  D0 06         	BNE UD30
   25: 16A1 F6A1  E6 A1         	INC TIME+1
   26: 16A3 F6A3  D0 02         	BNE UD30
   27: 16A5 F6A5  E6 A0         	INC TIME
   28:                          ;
   29:                          ;HERE WE CHECK FOR ROLL-OVER 23:59:59
   30:                          ;AND RESET THE CLOCK TO ZERO IF TRUE
   31:                          ;
   32: 16A7 F6A7  38            UD30	SEC
   33: 16A8 F6A8  A5 A2         	LDA TIME+2
   34: 16AA F6AA  E9 01         	SBC #$01
   35: 16AC F6AC  A5 A1         	LDA TIME+1
   36: 16AE F6AE  E9 1A         	SBC #$1A
   37: 16B0 F6B0  A5 A0         	LDA TIME
   38: 16B2 F6B2  E9 4F         	SBC #$4F
   39: 16B4 F6B4  90 06         	BCC UD60
   40:                          ;
   41:                          ;TIME HAS ROLLED--ZERO REGISTER
   42:                          ;
   43: 16B6 F6B6  86 A0         	STX TIME
   44: 16B8 F6B8  86 A1         	STX TIME+1
   45: 16BA F6BA  86 A2         	STX TIME+2
   46:                          ;
   47:                          ;SET STOP KEY FLAG HERE
   48:                          ;
   49: 16BC F6BC  AD 01 DC      UD60	LDA ROWS        ;WAIT FOR IT TO SETTLE
   50: 16BF F6BF  CD 01 DC      	CMP ROWS
   51: 16C2 F6C2  D0 F8         	BNE UD60        ;STILL BOUNCING
   52: 16C4 F6C4  AA            	TAX             ;SET FLAGS...
   53: 16C5 F6C5  30 13         	BMI UD80        ;NO STOP KEY...EXIT  STOP KEY=$7F
   54: 16C7 F6C7  A2 BD         	LDX #$FF-$42    ;CHECK FOR A SHIFT KEY (C64 KEYBOARD)
   55: 16C9 F6C9  8E 00 DC      	STX COLM
   56: 16CC F6CC  AE 01 DC      UD70	LDX ROWS        ;WAIT TO SETTLE...
   57: 16CF F6CF  EC 01 DC      	CPX ROWS
   58: 16D2 F6D2  D0 F8         	BNE UD70
   59: 16D4 F6D4  8D 00 DC      	STA COLM        ;!!!!!WATCH OUT...STOP KEY .A=$7F...SAME AS COLMS WAS...
   60: 16D7 F6D7  E8            	INX             ;ANY KEY DOWN ABORTS
   61: 16D8 F6D8  D0 02         	BNE UD90        ;LEAVE SAME AS BEFORE...
   62: 16DA F6DA  85 91         UD80	STA STKEY       ;SAVE FOR OTHER ROUTINES
   63: 16DC F6DC  60            UD90	RTS
   64:                          
   65: 16DD F6DD  78            RDTIM	SEI             ;KEEP TIME FROM ROLLING
   66: 16DE F6DE  A5 A2         	LDA TIME+2      ;GET LSD
   67: 16E0 F6E0  A6 A1         	LDX TIME+1      ;GET NEXT MOST SIG.
   68: 16E2 F6E2  A4 A0         	LDY TIME        ;GET MSD
   69:                          
   70: 16E4 F6E4  78            SETTIM	SEI             ;KEEP TIME FROM CHANGING
   71: 16E5 F6E5  85 A2         	STA TIME+2      ;STORE LSD
   72: 16E7 F6E7  86 A1         	STX TIME+1      ;NEXT MOST SIGNIFICANT
   73: 16E9 F6E9  84 A0         	STY TIME        ;STORE MSD
   74: 16EB F6EB  58            	CLI
   75: 16EC F6EC  60            	RTS
   76:                          
   77:                          ; RSR 8/21/80 REMOVE CRFAC CHANGE STOP
   78:                          ; RSR 3/29/82 ADD SHIT KEY CHECK FOR COMMODORE 64
 FILE: kernal.a65
 FILE: errhndl.a65
    1:                          
    2:                          ;***************************************
    3:                          ;* STOP -- CHECK STOP KEY FLAG AND     *
    4:                          ;* RETURN Z FLAG SET IF FLAG TRUE.     *
    5:                          ;* ALSO CLOSES ACTIVE CHANNELS AND     *
    6:                          ;* FLUSHES KEYBOARD QUEUE.             *
    7:                          ;* ALSO RETURNS KEY DOWNS FROM LAST    *
    8:                          ;* KEYBOARD ROW IN .A.                 *
    9:                          ;***************************************
   10: 16ED F6ED  A5 91         NSTOP	LDA STKEY       ;VALUE OF LAST ROW
   11: 16EF F6EF  C9 7F         	CMP #$7F        ;CHECK STOP KEY POSITION
   12: 16F1 F6F1  D0 07         	BNE STOP2       ;NOT DOWN
   13: 16F3 F6F3  08            	PHP
   14: 16F4 F6F4  20 CC FF      	JSR CLRCH       ;CLEAR CHANNELS
   15: 16F7 F6F7  85 C6         	STA NDX         ;FLUSH QUEUE
   16: 16F9 F6F9  28            	PLP
   17: 16FA F6FA  60            STOP2	RTS
   18:                          
   19:                          ;************************************
   20:                          ;*                                  *
   21:                          ;* ERROR HANDLER                    *
   22:                          ;*                                  *
   23:                          ;* PRINTS KERNAL ERROR MESSAGE IF   *
   24:                          ;* BIT 6 OF MSGFLG SET.  RETURNS    *
   25:                          ;* WITH ERROR # IN .A AND CARRY.    *
   26:                          ;*                                  *
   27:                          ;************************************
   28:                          ;
   29: 16FB F6FB  A9 01         ERROR1	LDA #1          ;TOO MANY FILES
   30: 16FD F6FD  2C            	.BYTE $2C
   31: 16FE F6FE  A9 02         ERROR2	LDA #2          ;FILE OPEN
   32: 1700 F700  2C            	.BYTE $2C
   33: 1701 F701  A9 03         ERROR3	LDA #3          ;FILE NOT OPEN
   34: 1703 F703  2C            	.BYTE $2C
   35: 1704 F704  A9 04         ERROR4	LDA #4          ;FILE NOT FOUND
   36: 1706 F706  2C            	.BYTE $2C
   37: 1707 F707  A9 05         ERROR5	LDA #5          ;DEVICE NOT PRESENT
   38: 1709 F709  2C            	.BYTE $2C
   39: 170A F70A  A9 06         ERROR6	LDA #6          ;NOT INPUT FILE
   40: 170C F70C  2C            	.BYTE $2C
   41: 170D F70D  A9 07         ERROR7	LDA #7          ;NOT OUTPUT FILE
   42: 170F F70F  2C            	.BYTE $2C
   43: 1710 F710  A9 08         ERROR8	LDA #8          ;MISSING FILE NAME
   44: 1712 F712  2C            	.BYTE $2C
   45: 1713 F713  A9 09         ERROR9	LDA #9          ;BAD DEVICE #
   46:                          ;
   47: 1715 F715  48            	PHA             ;ERROR NUMBER ON STACK
   48: 1716 F716  20 CC FF      	JSR CLRCH       ;RESTORE I/O CHANNELS
   49:                          ;
   50: 1719 F719  A0 00         	LDY #MS1-MS1
   51: 171B F71B  24 9D         	BIT MSGFLG      ;ARE WE PRINTING ERROR?
   52: 171D F71D  50 0A         	BVC EREXIT      ;NO...
   53:                          ;
   54: 171F F71F  20 2F F1      	JSR MSG         ;PRINT "CBM I/O ERROR #"
   55: 1722 F722  68            	PLA
   56: 1723 F723  48            	PHA
   57: 1724 F724  09 30         	ORA #$30        ;MAKE ERROR # ASCII
   58: 1726 F726  20 D2 FF      	JSR BSOUT       ;PRINT IT
   59:                          ;
   60: 1729 F729  68            EREXIT	PLA
   61: 172A F72A  38            	SEC
   62: 172B F72B  60            	RTS
 FILE: kernal.a65
 FILE: tapefile.a65
    1:                          
    2:                          ;FAH -- FIND ANY HEADER
    3:                          ;
    4:                          ;READS TAPE DEVICE UNTIL ONE OF FOLLOWING
    5:                          ;BLOCK TYPES FOUND: BDFH--BASIC DATA
    6:                          ;FILE HEADER, BLF--BASIC LOAD FILE
    7:                          ;FOR SUCCESS CARRY IS CLEAR ON RETURN.
    8:                          ;FOR FAILURE CARRY IS SET ON RETURN.
    9:                          ;IN ADDITION ACCUMULATOR IS 0 IF STOP
   10:                          ;KEY WAS PRESSED.
   11:                          ;
   12: 172C F72C  A5 93         FAH	LDA VERCK       ;SAVE OLD VERIFY
   13: 172E F72E  48            	PHA
   14: 172F F72F  20 41 F8      	JSR RBLK        ;READ TAPE BLOCK
   15: 1732 F732  68            	PLA
   16: 1733 F733  85 93         	STA VERCK       ;RESTORE VERIFY FLAG
   17: 1735 F735  B0 32         	BCS FAH40       ;READ TERMINATED
   18:                          ;
   19: 1737 F737  A0 00         	LDY #0
   20: 1739 F739  B1 B2         	LDA (TAPE1),Y   ;GET HEADER TYPE
   21:                          ;
   22: 173B F73B  C9 05         	CMP #EOT        ;CHECK END OF TAPE?
   23: 173D F73D  F0 2A         	BEQ FAH40       ;YES...FAILURE
   24:                          ;
   25: 173F F73F  C9 01         	CMP #BLF        ;BASIC LOAD FILE?
   26: 1741 F741  F0 08         	BEQ FAH50       ;YES...SUCCESS
   27:                          ;
   28: 1743 F743  C9 03         	CMP #PLF        ;FIXED LOAD FILE?
   29: 1745 F745  F0 04         	BEQ FAH50       ;YES...SUCCESS
   30:                          ;
   31: 1747 F747  C9 04         	CMP #BDFH       ;BASIC DATA FILE?
   32: 1749 F749  D0 E1         	BNE FAH         ;NO...KEEP TRYING
   33:                          ;
   34: 174B F74B  AA            FAH50	TAX             ;RETURN FILE TYPE IN .X
   35: 174C F74C  24 9D         	BIT MSGFLG      ;PRINTING MESSAGES?
   36: 174E F74E  10 17         	BPL FAH45       ;NO...
   37:                          ;
   38: 1750 F750  A0 63         	LDY #MS17-MS1   ;PRINT "FOUND"
   39: 1752 F752  20 2F F1      	JSR MSG
   40:                          ;
   41:                          ;OUTPUT COMPLETE FILE NAME
   42:                          ;
   43: 1755 F755  A0 05         	LDY #5
   44: 1757 F757  B1 B2         FAH55	LDA (TAPE1),Y
   45: 1759 F759  20 D2 FF      	JSR BSOUT
   46: 175C F75C  C8            	INY
   47: 175D F75D  C0 15         	CPY #21
   48: 175F F75F  D0 F6         	BNE FAH55
   49:                          ;
   50: 1761 F761  A5 A1         FAH56	LDA TIME+1      ;SET UP FOR TIME OUT...
   51: 1763 F763  20 E0 E4      	JSR FPATCH      ;GOTO PATCH...
   52: 1766 F766  EA            	NOP
   53:                          ;
   54: 1767 F767  18            FAH45	CLC             ;SUCCESS FLAG
   55: 1768 F768  88            	DEY             ;MAKE NONZERO FOR OKAY RETURN
   56:                          ;
   57: 1769 F769  60            FAH40	RTS
   58:                          
   59:                          ;TAPEH--WRITE TAPE HEADER
   60:                          ;ERROR IF TAPE BUFFER DE-ALLOCATED
   61:                          ;CARRY CLEAR IF O.K.
   62:                          ;
   63: 176A F76A  85 9E         TAPEH	STA T1
   64:                          ;
   65:                          ;DETERMINE ADDRESS OF BUFFER
   66:                          ;
   67: 176C F76C  20 D0 F7      	JSR ZZZ
   68: 176F F76F  90 5E         	BCC TH40        ;BUFFER WAS DE-ALLOCATED
   69:                          ;
   70:                          ;PRESERVE START AND END ADDRESSES
   71:                          ;FOR CASE OF HEADER FOR LOAD FILE
   72:                          ;
   73: 1771 F771  A5 C2         	LDA STAH
   74: 1773 F773  48            	PHA
   75: 1774 F774  A5 C1         	LDA STAL
   76: 1776 F776  48            	PHA
   77: 1777 F777  A5 AF         	LDA EAH
   78: 1779 F779  48            	PHA
   79: 177A F77A  A5 AE         	LDA EAL
   80: 177C F77C  48            	PHA
   81:                          ;
   82:                          ;PUT BLANKS IN TAPE BUFFER
   83:                          ;
   84: 177D F77D  A0 BF         	LDY #BUFSZ-1
   85: 177F F77F  A9 20         	LDA #' '
   86: 1781 F781  91 B2         BLNK2	STA (TAPE1),Y
   87: 1783 F783  88            	DEY
   88: 1784 F784  D0 FB         	BNE BLNK2
   89:                          ;
   90:                          ;PUT BLOCK TYPE IN HEADER
   91:                          ;
   92: 1786 F786  A5 9E         	LDA T1
   93: 1788 F788  91 B2         	STA (TAPE1),Y
   94:                          ;
   95:                          ;PUT START LOAD ADDRESS IN HEADER
   96:                          ;
   97: 178A F78A  C8            	INY
   98: 178B F78B  A5 C1         	LDA STAL
   99: 178D F78D  91 B2         	STA (TAPE1),Y
  100: 178F F78F  C8            	INY
  101: 1790 F790  A5 C2         	LDA STAH
  102: 1792 F792  91 B2         	STA (TAPE1),Y
  103:                          ;
  104:                          ;PUT END LOAD ADDRESS IN HEADER
  105:                          ;
  106: 1794 F794  C8            	INY
  107: 1795 F795  A5 AE         	LDA EAL
  108: 1797 F797  91 B2         	STA (TAPE1),Y
  109: 1799 F799  C8            	INY
  110: 179A F79A  A5 AF         	LDA EAH
  111: 179C F79C  91 B2         	STA (TAPE1),Y
  112:                          ;
  113:                          ;PUT FILE NAME IN HEADER
  114:                          ;
  115: 179E F79E  C8            	INY
  116: 179F F79F  84 9F         	STY T2
  117: 17A1 F7A1  A0 00         	LDY #0
  118: 17A3 F7A3  84 9E         	STY T1
  119: 17A5 F7A5  A4 9E         TH20	LDY T1
  120: 17A7 F7A7  C4 B7         	CPY FNLEN
  121: 17A9 F7A9  F0 0C         	BEQ TH30
  122: 17AB F7AB  B1 BB         	LDA (FNADR),Y
  123: 17AD F7AD  A4 9F         	LDY T2
  124: 17AF F7AF  91 B2         	STA (TAPE1),Y
  125: 17B1 F7B1  E6 9E         	INC T1
  126: 17B3 F7B3  E6 9F         	INC T2
  127: 17B5 F7B5  D0 EE         	BNE TH20
  128:                          ;
  129:                          ;SET UP START AND END ADDRESS OF HEADER
  130:                          ;
  131: 17B7 F7B7  20 D7 F7      TH30	JSR LDAD1
  132:                          ;
  133:                          ;SET UP TIME FOR LEADER
  134:                          ;
  135: 17BA F7BA  A9 69         	LDA #$69
  136: 17BC F7BC  85 AB         	STA SHCNH
  137:                          ;
  138: 17BE F7BE  20 6B F8      	JSR TWRT2       ;WRITE HEADER ON TAPE
  139:                          ;
  140:                          ;RESTORE START AND END ADDRESS OF
  141:                          ;LOAD FILE.
  142:                          ;
  143: 17C1 F7C1  A8            	TAY             ;SAVE ERROR CODE IN .Y
  144: 17C2 F7C2  68            	PLA
  145: 17C3 F7C3  85 AE         	STA EAL
  146: 17C5 F7C5  68            	PLA 
  147: 17C6 F7C6  85 AF         	STA EAH
  148: 17C8 F7C8  68            	PLA
  149: 17C9 F7C9  85 C1         	STA STAL
  150: 17CB F7CB  68            	PLA
  151: 17CC F7CC  85 C2         	STA STAH
  152: 17CE F7CE  98            	TYA             ;RESTORE ERROR CODE FOR RETURN
  153:                          ;
  154: 17CF F7CF  60            TH40	RTS
  155:                          
  156:                          ;FUNCTION TO RETURN TAPE BUFFER
  157:                          ;ADDRESS IN TAPE1
  158:                          ;
  159: 17D0 F7D0  A6 B2         ZZZ	LDX TAPE1       ;ASSUME TAPE1
  160: 17D2 F7D2  A4 B3         	LDY TAPE1+1
  161: 17D4 F7D4  C0 02         	CPY #>BUF       ;CHECK FOR ALLOCATION...
  162:                          ;...[TAPE1+1]=0 OR 1 MEANS DEALLOCATED
  163:                          ;...C CLR => DEALLOCATED
  164: 17D6 F7D6  60            	RTS
  165:                          
  166: 17D7 F7D7  20 D0 F7      LDAD1	JSR ZZZ         ;GET PTR TO CASSETTE
  167: 17DA F7DA  8A            	TXA
  168: 17DB F7DB  85 C1         	STA STAL        ;SAVE START LOW
  169: 17DD F7DD  18            	CLC
  170: 17DE F7DE  69 C0         	ADC #BUFSZ      ;COMPUTE POINTER TO END
  171: 17E0 F7E0  85 AE         	STA EAL         ;SAVE END LOW
  172: 17E2 F7E2  98            	TYA
  173: 17E3 F7E3  85 C2         	STA STAH        ;SAVE START HIGH
  174: 17E5 F7E5  69 00         	ADC #0          ;COMPUTE POINTER TO END
  175: 17E7 F7E7  85 AF         	STA EAH         ;SAVE END HIGH
  176: 17E9 F7E9  60            	RTS
  177:                          
  178: 17EA F7EA  20 2C F7      FAF	JSR FAH         ;FIND ANY HEADER
  179: 17ED F7ED  B0 1D         	BCS FAF40       ;FAILED
  180:                          ;
  181:                          ;SUCCESS...SEE IF RIGHT NAME
  182:                          ;
  183: 17EF F7EF  A0 05         	LDY #5          ;OFFSET INTO TAPE HEADER
  184: 17F1 F7F1  84 9F         	STY T2
  185: 17F3 F7F3  A0 00         	LDY #0          ;OFFSET INTO FILE NAME
  186: 17F5 F7F5  84 9E         	STY T1
  187: 17F7 F7F7  C4 B7         FAF20	CPY FNLEN       ;COMPARE THIS MANY
  188: 17F9 F7F9  F0 10         	BEQ FAF30       ;DONE
  189:                          ;
  190: 17FB F7FB  B1 BB         	LDA (FNADR),Y
  191: 17FD F7FD  A4 9F         	LDY T2
  192: 17FF F7FF  D1 B2         	CMP (TAPE1),Y
  193: 1801 F801  D0 E7         	BNE FAF         ;MISMATCH--TRY NEXT HEADER
  194: 1803 F803  E6 9E         	INC T1
  195: 1805 F805  E6 9F         	INC T2
  196: 1807 F807  A4 9E         	LDY T1
  197: 1809 F809  D0 EC         	BNE FAF20       ;BRANCH ALWAYS
  198:                          ;
  199: 180B F80B  18            FAF30	CLC             ;SUCCESS FLAG
  200: 180C F80C  60            FAF40	RTS
  201:                          
  202:                          ; RSR  4/10/82 ADD KEY DOWN TEST IN FAH...
 FILE: kernal.a65
 FILE: tapectrl.a65
    1:                          
    2: 180D F80D  20 D0 F7      JTP20	JSR ZZZ
    3: 1810 F810  E6 A6         	INC BUFPT
    4: 1812 F812  A4 A6         	LDY BUFPT
    5: 1814 F814  C0 C0         	CPY #BUFSZ
    6: 1816 F816  60            	RTS
    7:                          
    8:                          ;STAYS IN ROUTINE D2T1LL PLAY SWITCH
    9:                          ;
   10: 1817 F817  20 2E F8      CSTE1	JSR CS10
   11: 181A F81A  F0 1A         	BEQ CS25
   12: 181C F81C  A0 1B         	LDY #MS7-MS1    ;"PRESS PLAY..."
   13: 181E F81E  20 2F F1      CS30	JSR MSG
   14: 1821 F821  20 D0 F8      CS40	JSR TSTOP       ;WATCH FOR STOP KEY
   15: 1824 F824  20 2E F8      	JSR CS10        ;WATCH CASSETTE SWITCHES
   16: 1827 F827  D0 F8         	BNE CS40
   17: 1829 F829  A0 6A         	LDY #MS18-MS1   ;"OK"
   18: 182B F82B  4C 2F F1      	JMP MSG
   19:                          
   20:                          ;SUBR RETURNS <> FOR CASSETTE SWITCH
   21:                          ;
   22: 182E F82E  A9 10         CS10	LDA #$10        ;CHECK PORT
   23: 1830 F830  24 01         	BIT R6510       ;CLOSED?...
   24: 1832 F832  D0 02         	BNE CS25        ;NO. . .
   25: 1834 F834  24 01         	BIT R6510       ;CHECK AGAIN TO DEBOUNCE
   26: 1836 F836  18            CS25	CLC             ;GOOD RETURN
   27: 1837 F837  60            	RTS
   28:                          
   29:                          ;CHECKS FOR PLAY & RECORD
   30:                          ;
   31: 1838 F838  20 2E F8      CSTE2	JSR CS10
   32: 183B F83B  F0 F9         	BEQ CS25
   33: 183D F83D  A0 2E         	LDY #MS8-MS1    ;"RECORD"
   34: 183F F83F  D0 DD         	BNE CS30
   35:                          
   36:                          ;READ HEADER BLOCK ENTRY
   37:                          ;
   38: 1841 F841  A9 00         RBLK	LDA #0
   39: 1843 F843  85 90         	STA STATUS
   40: 1845 F845  85 93         	STA VERCK
   41: 1847 F847  20 D7 F7      	JSR LDAD1
   42:                          
   43:                          ;READ LOAD BLOCK ENTRY
   44:                          ;
   45: 184A F84A  20 17 F8      TRD	JSR CSTE1       ;SAY 'PRESS PLAY'
   46: 184D F84D  B0 1F         	BCS TWRT3       ;STOP KEY PRESSED
   47: 184F F84F  78            	SEI
   48: 1850 F850  A9 00         	LDA #0          ;CLEAR FLAGS...
   49: 1852 F852  85 AA         	STA RDFLG
   50: 1854 F854  85 B4         	STA SNSW1
   51: 1856 F856  85 B0         	STA CMP0
   52: 1858 F858  85 9E         	STA PTR1
   53: 185A F85A  85 9F         	STA PTR2
   54: 185C F85C  85 9C         	STA DPSW
   55: 185E F85E  A9 90         	LDA #$90        ;ENABLE FOR CA1 IRQ...READ LINE
   56: 1860 F860  A2 0E         	LDX #14         ;POINT IRQ VECTOR TO READ
   57: 1862 F862  D0 11         	BNE TAPE        ;JMP
   58:                          
   59:                          ;WRITE HEADER BLOCK ENTRY
   60:                          ;
   61: 1864 F864  20 D7 F7      WBLK	JSR LDAD1
   62:                          ;
   63:                          ;WRITE LOAD BLOCK ENTRY
   64:                          ;
   65: 1867 F867  A9 14         TWRT	LDA #20         ;BETWEEN BLOCK SHORTS
   66: 1869 F869  85 AB         	STA SHCNH
   67: 186B F86B  20 38 F8      TWRT2	JSR CSTE2       ;SAY 'PRESS PLAY & RECORD'
   68: 186E F86E  B0 6C         TWRT3	BCS STOP3       ;STOP KEY PRESSED
   69: 1870 F870  78            	SEI
   70: 1871 F871  A9 82         	LDA #$82        ;ENABLE T2 IRQS...WRITE TIME
   71: 1873 F873  A2 08         	LDX #8          ;VECTOR IRQ TO WRTZ
   72:                          
   73:                          ;START TAPE OPERATION ENTRY POINT
   74:                          ;
   75: 1875 F875  A0 7F         TAPE	LDY #$7F        ;KILL UNWANTED IRQ'S
   76: 1877 F877  8C 0D DC      	STY D1ICR
   77: 187A F87A  8D 0D DC      	STA D1ICR       ;TURN ON WANTED
   78: 187D F87D  AD 0E DC      	LDA D1CRA       ;CALC TIMER ENABLES
   79: 1880 F880  09 19         	ORA #$19
   80: 1882 F882  8D 0F DC      	STA D1CRB       ;TURN ON T2 IRQ'S FOR CASS WRITE(ONE SHOT)
   81: 1885 F885  29 91         	AND #$91        ;SAVE TOD 50/60 INDICATION
   82: 1887 F887  8D A2 02      	STA CASTON      ;PLACE IN AUTO MODE FOR T1
   83:                          ; WAIT FOR RS-232 TO FINISH
   84: 188A F88A  20 A4 F0      	JSR RSP232
   85:                          ; DISABLE SCREEN DISPLAY
   86: 188D F88D  AD 11 D0      	LDA VICREG+17
   87: 1890 F890  29 EF         	AND #$FF-$10    ;DISABLE SCREEN
   88: 1892 F892  8D 11 D0      	STA VICREG+17
   89:                          ; MOVE IRQ TO IRQTEMP FOR CASS OPS
   90: 1895 F895  AD 14 03      	LDA CINV
   91: 1898 F898  8D 9F 02      	STA IRQTMP
   92: 189B F89B  AD 15 03      	LDA CINV+1
   93: 189E F89E  8D A0 02      	STA IRQTMP+1
   94: 18A1 F8A1  20 BD FC      	JSR BSIV        ;GO CHANGE IRQ VECTOR
   95: 18A4 F8A4  A9 02         	LDA #2          ;FSBLK STARTS AT 2
   96: 18A6 F8A6  85 BE         	STA FSBLK
   97: 18A8 F8A8  20 97 FB      	JSR NEWCH       ;PREP LOCAL COUNTERS AND FLAGS
   98: 18AB F8AB  A5 01         	LDA R6510       ;TURN MOTOR ON
   99: 18AD F8AD  29 1F         	AND #%011111    ;LOW TURNS ON
  100: 18AF F8AF  85 01         	STA R6510
  101: 18B1 F8B1  85 C0         	STA CAS1        ;FLAG INTERNAL CONTROL OF CASS MOTOR
  102: 18B3 F8B3  A2 FF         	LDX #$FF        ;DELAY BETWEEN BLOCKS
  103: 18B5 F8B5  A0 FF         TP32	LDY #$FF
  104: 18B7 F8B7  88            TP35	DEY
  105: 18B8 F8B8  D0 FD         	BNE TP35
  106: 18BA F8BA  CA            	DEX
  107: 18BB F8BB  D0 F8         	BNE TP32
  108: 18BD F8BD  58            	CLI
  109: 18BE F8BE  AD A0 02      TP40	LDA IRQTMP+1    ;CHECK FOR INTERRUPT VECTOR...
  110: 18C1 F8C1  CD 15 03      	CMP CINV+1      ;...POINTING AT KEY ROUTINE
  111: 18C4 F8C4  18            	CLC
  112: 18C5 F8C5  F0 15         	BEQ STOP3       ;...YES RETURN
  113: 18C7 F8C7  20 D0 F8      	JSR TSTOP       ;...NO CHECK FOR STOP KEY
  114:                          ;
  115:                          ; 60 HZ KEYSCAN IGNORED
  116:                          ;
  117: 18CA F8CA  20 BC F6      	JSR UD60        ; STOP KEY CHECK
  118: 18CD F8CD  4C BE F8      	JMP TP40        ;STAY IN LOOP UNTILL TAPES ARE DONE
  119:                          
  120: 18D0 F8D0  20 E1 FF      TSTOP	JSR STOP        ;STOP KEY DOWN?
  121: 18D3 F8D3  18            	CLC             ;ASSUME NO STOP
  122: 18D4 F8D4  D0 0B         	BNE STOP4       ;WE WERE RIGHT
  123:                          ;
  124:                          ;STOP KEY DOWN...
  125:                          ;
  126: 18D6 F8D6  20 93 FC      	JSR TNIF        ;TURN OFF CASSETTES
  127: 18D9 F8D9  38            	SEC             ;FAILURE FLAG
  128: 18DA F8DA  68            	PLA             ;BACK ONE SQUARE...
  129: 18DB F8DB  68            	PLA
  130:                          ;
  131:                          ; LDA #0 ;STOP KEY FLAG
  132:                          ;
  133: 18DC F8DC  A9 00         STOP3	LDA #0          ;DEALLOCATE IRQTMP
  134: 18DE F8DE  8D A0 02      	STA IRQTMP+1    ;IF C-SET THEN STOP KEY
  135: 18E1 F8E1  60            STOP4	RTS
  136:                          
  137:                          ;
  138:                          ; STT1 - SET UP TIMEOUT WATCH FOR NEXT DIPOLE
  139:                          ;
  140: 18E2 F8E2  86 B1         STT1	STX TEMP        ;.X HAS CONSTANT FOR TIMEOUT
  141: 18E4 F8E4  A5 B0         	LDA CMP0        ;CMP0*5
  142: 18E6 F8E6  0A            	ASL  
  143: 18E7 F8E7  0A            	ASL  
  144: 18E8 F8E8  18            	CLC
  145: 18E9 F8E9  65 B0         	ADC CMP0
  146: 18EB F8EB  18            	CLC 
  147: 18EC F8EC  65 B1         	ADC TEMP        ;ADJUST LONG BYTE COUNT
  148: 18EE F8EE  85 B1         	STA TEMP
  149: 18F0 F8F0  A9 00         	LDA #0
  150: 18F2 F8F2  24 B0         	BIT CMP0        ;CHECK CMP0 ...
  151: 18F4 F8F4  30 01         	BMI STT2        ;...MINUS, NO ADJUST
  152: 18F6 F8F6  2A            	ROL             ;...PLUS SO ADJUST POS
  153: 18F7 F8F7  06 B1         STT2	ASL TEMP        ;MULTIPLY CORRECTED VALUE BY 4
  154: 18F9 F8F9  2A            	ROL  
  155: 18FA F8FA  06 B1         	ASL TEMP
  156: 18FC F8FC  2A            	ROL  
  157: 18FD F8FD  AA            	TAX
  158: 18FE F8FE  AD 06 DC      STT3	LDA D1T2L       ;WATCH OUT FOR D1T2H ROLLOVER...
  159: 1901 F901  C9 16         	CMP #22         ;...TIME FOR ROUTINE...!!!...
  160: 1903 F903  90 F9         	BCC STT3        ;...TOO CLOSE SO WAIT UNTILL PAST
  161: 1905 F905  65 B1         	ADC TEMP        ;CALCULATE AND...
  162: 1907 F907  8D 04 DC      	STA D1T1L       ;...STORE ADUSTED TIME COUNT
  163: 190A F90A  8A            	TXA
  164: 190B F90B  6D 07 DC      	ADC D1T2H       ;ADJUST FOR HIGH TIME COUNT
  165: 190E F90E  8D 05 DC      	STA D1T1H
  166: 1911 F911  AD A2 02      	LDA CASTON      ;ENABLE TIMERS
  167: 1914 F914  8D 0E DC      	STA D1CRA
  168: 1917 F917  8D A4 02      	STA STUPID      ;NON-ZERO MEANS AN T1 IRQ HAS NOT OCCURED YET
  169: 191A F91A  AD 0D DC      	LDA D1ICR       ;CLEAR OLD T1 INTERRUPT
  170: 191D F91D  29 10         	AND #$10        ;CHECK FOR OLD-FLAG IRQ
  171: 191F F91F  F0 09         	BEQ STT4        ;NO...NORMAL EXIT
  172: 1921 F921  A9 F9         	LDA #>STT4      ;PUSH SIMULATED RETURN ADDRESS ON STACK
  173: 1923 F923  48            	PHA
  174: 1924 F924  A9 2A         	LDA #<STT4
  175: 1926 F926  48            	PHA
  176: 1927 F927  4C 43 FF      	JMP SIMIRQ
  177: 192A F92A  58            STT4	CLI             ;ALLOW FOR RE-ENTRY CODE
  178: 192B F92B  60            	RTS
  179:                          
  180:                          ; RSR 8/25/80 MODIFY I/O FOR MOD2 HARDWARE
  181:                          ; RSR 12/11/81 MODIFY I/O FOR VIC-40
  182:                          ; RSR 2/9/82 ADD SCREEN DISABLE FOR TAPE
  183:                          ; RSR 3/28/82 ADD T2IRQ TO START CASSETTE WRITE
  184:                          ; RSR 3/28/82 ADD CASSETTE READ TIMER1 FLAG
  185:                          ; RSR 5/11/82 CHANGE SO WE DON'T MISS ANY IRQ'S
  186:                          ; RSR 5/14/82 SIMULATE AN IRQ
 FILE: kernal.a65
 FILE: read.a65
    1:                          
    2:                          ; VARIABLES USED IN CASSETTE READ ROUTINES
    3:                          ;
    4:                          ;  REZ - COUNTS ZEROS (IF Z THEN CORRECT # OF DIPOLES)
    5:                          ;  RER - FLAGS ERRORS (IF Z THEN NO ERROR)
    6:                          ;  DIFF - USED TO PRESERVE SYNO (OUTSIDE OF BIT ROUTINES)
    7:                          ;  SYNO - FLAGS IF WE HAVE BLOCK SYNC (16 ZERO DIPOLES)
    8:                          ;  SNSW1 - FLAGS IF WE HAVE BYTE SYNC (A LONGLONG)
    9:                          ;  DATA - HOLDS MOST RECENT DIPOLE BIT VALUE
   10:                          ;  MYCH - HOLDS INPUT BYTE BEING BUILT
   11:                          ;  FIRT - USED TO INDICATE WHICH HALF OF DIPOLE WE'RE IN
   12:                          ;  SVXT - TEMP USED TO ADJUST SOFTWARE SERVO
   13:                          ;  TEMP - USED TO HOLD DIPOLE TIME DURING TYPE CALCULATIONS
   14:                          ;  PRTY - HOLDS CURRENT CALCULATED PARITY BIT
   15:                          ;  PRP - HAS COMBINED ERROR VALUES FROM BIT ROUTINES
   16:                          ;  FSBLK - INDICATE WHICH BLOCK WE'RE LOOKING AT (0 TO EXIT)
   17:                          ;  SHCNL - HOLDS FSBLK, USED TO DIRECT ROUTINES, BECAUSE OF EXIT CASE
   18:                          ;  RDFLG - HOLDS FUNCTION MODE
   19:                          ;     MI - WAITING FOR BLOCK SYNC
   20:                          ;     VS - IN DATA BLOCK READING DATA
   21:                          ;     NE - WAITING FOR BYTE SYNC
   22:                          ;  SAL - INDIRECT TO DATA STORAGE AREA
   23:                          ;  SHCNH - LEFT OVER FROM DEBUGGING
   24:                          ;  BAD - STORAGE SPACE FOR BAD READ LOCATIONS (BOTTOM OF STACK)
   25:                          ;  PTR1 - COUNT OF READ LOCATIONS IN ERROR (POINTER INTO BAD, MAX 61)
   26:                          ;  PTR2 - COUNT OF RE-READ LOCATIONS (POINTER INTO BAD, DURING RE-READ)
   27:                          ;  VERCHK - VERIFY OR LOAD FLAG (Z - LOADING)
   28:                          ;  CMP0 - SOFTWARE SERVO (+/- ADJUST TO TIME CALCS)
   29:                          ;  DPSW - IF NZ THEN EXPECTING LL/L COMBINATION THAT ENDS A BYTE
   30:                          ;  PCNTR - COUNTS DOWN FROM 8-0 FOR DATA THEN TO FF FOR PARITY
   31:                          ;  STUPID - HOLD INDICATOR (NZ - NO T1IRQ YET) FOR T1IRQ
   32:                          ;  KIKA26 - HOLDS OLD D1ICR AFTER CLEAR ON READ
   33:                          ;
   34:                          
   35: 192C F92C  AE 07 DC      READ	LDX D1T2H       ;GET TIME SINCE LAST INTERRUPT
   36: 192F F92F  A0 FF         	LDY #$FF        ;COMPUTE COUNTER DIFFERENCE
   37: 1931 F931  98            	TYA
   38: 1932 F932  ED 06 DC      	SBC D1T2L
   39: 1935 F935  EC 07 DC      	CPX D1T2H       ;CHECK FOR TIMER HIGH ROLLOVER...
   40: 1938 F938  D0 F2         	BNE READ        ;...YES THEN RECOMPUTE
   41: 193A F93A  86 B1         	STX TEMP
   42: 193C F93C  AA            	TAX
   43: 193D F93D  8C 06 DC      	STY D1T2L       ;RELOAD TIMER2 (COUNT DOWN FROM $FFFF)
   44: 1940 F940  8C 07 DC      	STY D1T2H
   45: 1943 F943  A9 19         	LDA #$19        ;ENABLE TIMER
   46: 1945 F945  8D 0F DC      	STA D1CRB
   47: 1948 F948  AD 0D DC      	LDA D1ICR       ;CLEAR READ INTERRUPT
   48: 194B F94B  8D A3 02      	STA KIKA26      ;SAVE FOR LATTER
   49: 194E F94E  98            	TYA
   50: 194F F94F  E5 B1         	SBC TEMP        ;CALCULATE HIGH
   51: 1951 F951  86 B1         	STX TEMP
   52: 1953 F953  4A            	LSR             ;MOVE TWO BITS FROM HIGH TO TEMP
   53: 1954 F954  66 B1         	ROR TEMP
   54: 1956 F956  4A            	LSR  
   55: 1957 F957  66 B1         	ROR TEMP
   56: 1959 F959  A5 B0         	LDA CMP0        ;CALC MIN PULSE VALUE
   57: 195B F95B  18            	CLC
   58: 195C F95C  69 3C         	ADC #60
   59: 195E F95E  C5 B1         	CMP TEMP        ;IF PULSE LESS THAN MIN...
   60: 1960 F960  B0 4A         	BCS RDBK        ;...THEN IGNORE AS NOISE
   61: 1962 F962  A6 9C         	LDX DPSW        ;CHECK IF LAST BIT...
   62: 1964 F964  F0 03         	BEQ RJDJ        ;...NO THEN CONTINUE
   63: 1966 F966  4C 60 FA      	JMP RADJ        ;...YES THEN GO FINISH BYTE
   64:                          
   65: 1969 F969  A6 A3         RJDJ	LDX PCNTR       ;IF 9 BITS READ...
   66: 196B F96B  30 1B         	BMI JRAD2       ;... THEN GOTO ENDING
   67: 196D F96D  A2 00         	LDX #0          ;SET BIT VALUE TO ZERO
   68: 196F F96F  69 30         	ADC #48         ;ADD UP TO HALF WAY BETWEEN...
   69: 1971 F971  65 B0         	ADC CMP0        ;...SHORT PULSE AND SYNC PULSE
   70: 1973 F973  C5 B1         	CMP TEMP        ;CHECK FOR SHORT...
   71: 1975 F975  B0 1C         	BCS RADX2       ;...YES IT'S A SHORT
   72: 1977 F977  E8            	INX             ;SET BIT VALUE TO ONE
   73: 1978 F978  69 26         	ADC #38         ;MOVE TO MIDDLE OF HIGH
   74: 197A F97A  65 B0         	ADC CMP0
   75: 197C F97C  C5 B1         	CMP TEMP        ;CHECK FOR ONE...
   76: 197E F97E  B0 17         	BCS RADL        ;...YES IT'S A ONE
   77: 1980 F980  69 2C         	ADC #44         ;MOVE TO LONGLONG
   78: 1982 F982  65 B0         	ADC CMP0
   79: 1984 F984  C5 B1         	CMP TEMP        ;CHECK FOR LONGLONG...
   80: 1986 F986  90 03         	BCC SRER        ;...GREATER THAN IS ERROR
   81: 1988 F988  4C 10 FA      JRAD2	JMP RAD2        ;...IT'S A LONGLONG
   82:                          
   83: 198B F98B  A5 B4         SRER	LDA SNSW1       ;IF NOT SYNCRONIZED...
   84: 198D F98D  F0 1D         	BEQ RDBK        ;...THEN NO ERROR
   85: 198F F98F  85 A8         	STA RER         ;...ELSE FLAG RER
   86: 1991 F991  D0 19         	BNE RDBK        ;JMP
   87:                          
   88: 1993 F993  E6 A9         RADX2	INC REZ         ;COUNT REZ UP ON ZEROS
   89: 1995 F995  B0 02         	BCS RAD5        ;JMP
   90: 1997 F997  C6 A9         RADL	DEC REZ         ;COUNT REZ DOWN ON ONES
   91: 1999 F999  38            RAD5	SEC             ;CALC ACTUAL VALUE FOR COMPARE STORE
   92: 199A F99A  E9 13         	SBC #19
   93: 199C F99C  E5 B1         	SBC TEMP        ;SUBTRACT INPUT VALUE FROM CONSTANT...
   94: 199E F99E  65 92         	ADC SVXT        ;...ADD DIFFERENCE TO TEMP STORAGE...
   95: 19A0 F9A0  85 92         	STA SVXT        ;...USED LATER TO ADJUST SOFT SERVO
   96: 19A2 F9A2  A5 A4         	LDA FIRT        ;FLIP DIPOLE FLAG
   97: 19A4 F9A4  49 01         	EOR #1
   98: 19A6 F9A6  85 A4         	STA FIRT
   99: 19A8 F9A8  F0 2B         	BEQ RAD3        ;SECOND HALF OF DIPOLE
  100: 19AA F9AA  86 D7         	STX DATA        ;FIRST HALF SO STORE ITS VALUE
  101:                          
  102: 19AC F9AC  A5 B4         RDBK	LDA SNSW1       ;IF NO BYTE START...
  103: 19AE F9AE  F0 22         	BEQ RADBK       ;...THEN RETURN
  104: 19B0 F9B0  AD A3 02      	LDA KIKA26      ;CHECK TO SEE IF TIMER1 IRQD US...
  105: 19B3 F9B3  29 01         	AND #$01
  106: 19B5 F9B5  D0 05         	BNE RADKX       ;...YES
  107: 19B7 F9B7  AD A4 02      	LDA STUPID      ;CHECK FOR OLD T1IRQ
  108: 19BA F9BA  D0 16         	BNE RADBK       ;NO...SO EXIT
  109:                          ;
  110: 19BC F9BC  A9 00         RADKX	LDA #0          ;...YES, SET DIPOLE FLAG FOR FIRST HALF
  111: 19BE F9BE  85 A4         	STA FIRT
  112: 19C0 F9C0  8D A4 02      	STA STUPID      ;SET T1IRQ FLAG
  113: 19C3 F9C3  A5 A3         	LDA PCNTR       ;CHECK WHERE WE ARE IN BYTE...
  114: 19C5 F9C5  10 30         	BPL RAD4        ;...DOING DATA
  115: 19C7 F9C7  30 BF         	BMI JRAD2       ;...PROCESS PARITY
  116:                          
  117: 19C9 F9C9  A2 A6         RADP	LDX #166        ;SET UP FOR LONGLONG TIMEOUT
  118: 19CB F9CB  20 E2 F8      	JSR STT1
  119: 19CE F9CE  A5 9B         	LDA PRTY        ;IF PARITY NOT EVEN...
  120: 19D0 F9D0  D0 B9         	BNE SRER        ;...THEN GO SET ERROR
  121: 19D2 F9D2  4C BC FE      RADBK	JMP PREND       ;GO RESTORE REGS AND RTI
  122:                          
  123: 19D5 F9D5  A5 92         RAD3	LDA SVXT        ;ADJUST THE SOFTWARE SERVO (CMP0)
  124: 19D7 F9D7  F0 07         	BEQ ROUT1       ;NO ADJUST
  125: 19D9 F9D9  30 03         	BMI ROUT2       ;ADJUST FOR MORE BASE TIME
  126: 19DB F9DB  C6 B0         	DEC CMP0        ;ADJUST FOR LESS BASE TIME
  127: 19DD F9DD  2C            	.BYTE $2C       ;SKIP TWO BYTES
  128: 19DE F9DE  E6 B0         ROUT2	INC CMP0
  129: 19E0 F9E0  A9 00         ROUT1	LDA #0          ;CLEAR DIFFERENCE VALUE
  130: 19E2 F9E2  85 92         	STA SVXT
  131:                          ;CHECK FOR CONSECUTIVE LIKE VALUES IN DIPOLE...
  132: 19E4 F9E4  E4 D7         	CPX DATA
  133: 19E6 F9E6  D0 0F         	BNE RAD4        ;...NO, GO PROCESS INFO
  134: 19E8 F9E8  8A            	TXA             ;...YES SO CHECK THE VALUES...
  135: 19E9 F9E9  D0 A0         	BNE SRER        ;IF THEY WERE ONES THEN  ERROR
  136:                          ; CONSECUTIVE ZEROS
  137: 19EB F9EB  A5 A9         	LDA REZ         ;...CHECK HOW MANY ZEROS HAVE HAPPENED
  138: 19ED F9ED  30 BD         	BMI RDBK        ;...IF MANY DON'T CHECK
  139: 19EF F9EF  C9 10         	CMP #16         ;... DO WE HAVE 16 YET?...
  140: 19F1 F9F1  90 B9         	BCC RDBK        ;....NO SO CONTINUE
  141: 19F3 F9F3  85 96         	STA SYNO        ;....YES SO FLAG SYNO (BETWEEN BLOCKS)
  142: 19F5 F9F5  B0 B5         	BCS RDBK        ;JMP
  143:                          
  144: 19F7 F9F7  8A            RAD4	TXA             ;MOVE READ DATA TO .A
  145: 19F8 F9F8  45 9B         	EOR PRTY        ;CALCULATE PARITY
  146: 19FA F9FA  85 9B         	STA PRTY
  147: 19FC F9FC  A5 B4         	LDA SNSW1       ;REAL DATA?...
  148: 19FE F9FE  F0 D2         	BEQ RADBK       ;...NO SO FORGET BY EXITING
  149: 1A00 FA00  C6 A3         	DEC PCNTR       ;DEC BIT COUNT
  150: 1A02 FA02  30 C5         	BMI RADP        ;IF MINUS THEN  TIME FOR PARITY
  151: 1A04 FA04  46 D7         	LSR DATA        ;SHIFT BIT FROM DATA...
  152: 1A06 FA06  66 BF         	ROR MYCH        ;...INTO BYTE STORAGE (MYCH) BUFFER
  153: 1A08 FA08  A2 DA         	LDX #218        ;SET UP FOR NEXT DIPOLE
  154: 1A0A FA0A  20 E2 F8      	JSR STT1
  155: 1A0D FA0D  4C BC FE      	JMP PREND       ;RESTORE REGS AND RTI
  156:                          
  157:                          ; RAD2 - LONGLONG HANDLER (COULD BE A LONG ONE)
  158: 1A10 FA10  A5 96         RAD2	LDA SYNO        ;HAVE WE GOTTEN BLOCK SYNC...
  159: 1A12 FA12  F0 04         	BEQ RAD2Y       ;...NO
  160: 1A14 FA14  A5 B4         	LDA SNSW1       ;CHECK IF WE'VE HAD A REAL BYTE START...
  161: 1A16 FA16  F0 07         	BEQ RAD2X       ;...NO
  162: 1A18 FA18  A5 A3         RAD2Y	LDA PCNTR       ;ARE WE AT END OF BYTE...
  163: 1A1A FA1A  30 03         	BMI RAD2X       ;YES...GO ADJUST FOR LONGLONG
  164: 1A1C FA1C  4C 97 F9      	JMP RADL        ;...NO SO TREAT IT AS A LONG ONE READ
  165:                          
  166: 1A1F FA1F  46 B1         RAD2X	LSR TEMP        ;ADJUST TIMEOUT FOR...
  167: 1A21 FA21  A9 93         	LDA #147        ;...LONGLONG PULSE VALUE
  168: 1A23 FA23  38            	SEC
  169: 1A24 FA24  E5 B1         	SBC TEMP
  170: 1A26 FA26  65 B0         	ADC CMP0
  171: 1A28 FA28  0A            	ASL  
  172: 1A29 FA29  AA            	TAX             ;AND SET TIMEOUT FOR LAST BIT
  173: 1A2A FA2A  20 E2 F8      	JSR STT1
  174: 1A2D FA2D  E6 9C         	INC DPSW        ;SET BIT THROW AWAY FLAG
  175: 1A2F FA2F  A5 B4         	LDA SNSW1       ;IF BYTE SYNCRONIZED....
  176: 1A31 FA31  D0 11         	BNE RADQ2       ;...THEN SKIP TO PASS CHAR
  177: 1A33 FA33  A5 96         	LDA SYNO        ;THROWS OUT DATA UNTILL BLOCK SYNC...
  178: 1A35 FA35  F0 26         	BEQ RDBK2       ;...NO BLOCK SYNC
  179: 1A37 FA37  85 A8         	STA RER         ;FLAG DATA AS ERROR
  180: 1A39 FA39  A9 00         	LDA #0          ;KILL 16 SYNC FLAG
  181: 1A3B FA3B  85 96         	STA SYNO
  182: 1A3D FA3D  A9 81         	LDA #$81        ;SET UP FOR TIMER1 INTERRUPTS
  183: 1A3F FA3F  8D 0D DC      	STA D1ICR
  184: 1A42 FA42  85 B4         	STA SNSW1       ;FLAG THAT WE HAVE BYTE SYNCRONIZED
  185:                          ;
  186: 1A44 FA44  A5 96         RADQ2	LDA SYNO        ;SAVE SYNO STATUS
  187: 1A46 FA46  85 B5         	STA DIFF
  188: 1A48 FA48  F0 09         	BEQ RADK        ;NO BLOCK SYNC, NO BYTE LOOKING
  189: 1A4A FA4A  A9 00         	LDA #0          ;TURN OFF BYTE SYNC SWITCH
  190: 1A4C FA4C  85 B4         	STA SNSW1
  191: 1A4E FA4E  A9 01         	LDA #$01        ;DISABLE TIMER1 INTERRUPTS
  192: 1A50 FA50  8D 0D DC      	STA D1ICR
  193: 1A53 FA53  A5 BF         RADK	LDA MYCH        ;PASS CHARACTER TO BYTE ROUTINE
  194: 1A55 FA55  85 BD         	STA OCHAR
  195: 1A57 FA57  A5 A8         	LDA RER         ;COMBINE ERROR VALUES WITH ZERO COUNT...
  196: 1A59 FA59  05 A9         	ORA REZ
  197: 1A5B FA5B  85 B6         	STA PRP         ;...AND SAVE IN PRP
  198: 1A5D FA5D  4C BC FE      RDBK2	JMP PREND       ;GO BACK AND GET LAST BYTE
  199:                          
  200: 1A60 FA60  20 97 FB      RADJ	JSR NEWCH       ;FINISH BYTE, CLR FLAGS
  201: 1A63 FA63  85 9C         	STA DPSW        ;CLEAR BIT THROW AWAY FLAG
  202: 1A65 FA65  A2 DA         	LDX #218        ;INITILIZE FOR NEXT DIPOLE
  203: 1A67 FA67  20 E2 F8      	JSR STT1
  204: 1A6A FA6A  A5 BE         	LDA FSBLK       ;CHECK FOR LAST VALUE
  205: 1A6C FA6C  F0 02         	BEQ RD15
  206: 1A6E FA6E  85 A7         	STA SHCNL
  207:                          
  208:                          ;*************************************************
  209:                          ;* BYTE HANDLER OF CASSETTE READ                 *
  210:                          ;*                                               *
  211:                          ;* THIS PORTION OF IN LINE CODE IS PASSED THE    *
  212:                          ;* BYTE ASSEMBLED FROM READING TAPE IN OCHAR.    *
  213:                          ;* RER IS SET IF THE BYTE READ IS IN ERROR.      *
  214:                          ;* REZ IS SET IF THE INTERRUPT PROGRAM IS READING*
  215:                          ;* ZEROS.  RDFLG TELLS US WHAT WE ARE DOING.     *
  216:                          ;* BIT 7 SAYS TO IGNORE BYTES UNTIL REZ IS SET   *
  217:                          ;* BIT 6 SAYS TO LOAD THE BYTE. OTHERWISE RDFLG  *
  218:                          ;* IS A COUNTDOWN AFTER SYNC.  IF VERCK IS SET   *
  219:                          ;* WE DO A COMPARE INSTEAD OF A STORE AND SET    *
  220:                          ;* STATUS.  FSBLK COUNTS THE TWO BLOCKS. PTR1 IS *
  221:                          ;* INDEX TO ERROR TABLE FOR PASS1.  PTR2 IS INDEX*
  222:                          ;* TO CORRECTION TABLE FOR PASS2.                *
  223:                          ;*************************************************
  224:                          ;
  225:                          SPERR=16
  226:                          CKERR=32
  227:                          SBERR=4
  228:                          LBERR=8
  229:                          ;
  230: 1A70 FA70  A9 0F         RD15	LDA #$F
  231:                          ;
  232: 1A72 FA72  24 AA         	BIT RDFLG       ;TEST FUNCTION MODE
  233: 1A74 FA74  10 17         	BPL RD20        ;NOT WAITING FOR ZEROS
  234:                          ;
  235: 1A76 FA76  A5 B5         	LDA DIFF        ;ZEROS YET?
  236: 1A78 FA78  D0 0C         	BNE RD12        ;YES...WAIT FOR SYNC
  237: 1A7A FA7A  A6 BE         	LDX FSBLK       ;IS PASS OVER?
  238: 1A7C FA7C  CA            	DEX             ;...IF FSBLK ZERO THEN NO ERROR (FIRST GOOD)
  239: 1A7D FA7D  D0 0B         	BNE RD10        ;NO...
  240:                          ;
  241: 1A7F FA7F  A9 08         	LDA #LBERR
  242: 1A81 FA81  20 1C FE      	JSR UDST        ;YES...LONG BLOCK ERROR
  243: 1A84 FA84  D0 04         	BNE RD10        ;BRANCH ALWAYS
  244:                          ;
  245: 1A86 FA86  A9 00         RD12	LDA #0
  246: 1A88 FA88  85 AA         	STA RDFLG       ;NEW MODE IS WAIT FOR SYNC
  247: 1A8A FA8A  4C BC FE      RD10	JMP PREND       ;EXIT...DONE
  248:                          ;
  249: 1A8D FA8D  70 31         RD20	BVS RD60        ;WE ARE LOADING
  250: 1A8F FA8F  D0 18         	BNE RD200       ;WE ARE SYNCING
  251:                          ;
  252: 1A91 FA91  A5 B5         	LDA DIFF        ;DO WE HAVE BLOCK SYNC...
  253: 1A93 FA93  D0 F5         	BNE RD10        ;...YES, EXIT
  254: 1A95 FA95  A5 B6         	LDA PRP         ;IF FIRST BYTE HAS ERROR...
  255: 1A97 FA97  D0 F1         	BNE RD10        ;...THEN SKIP (EXIT)
  256: 1A99 FA99  A5 A7         	LDA SHCNL       ;MOVE FSBLK TO CARRY...
  257: 1A9B FA9B  4A            	LSR  
  258: 1A9C FA9C  A5 BD         	LDA OCHAR       ; SHOULD BE A HEADER COUNT CHAR
  259: 1A9E FA9E  30 03         	BMI RD22        ;IF NEG THEN FIRSTBLOCK DATA
  260: 1AA0 FAA0  90 18         	BCC RD40        ;...EXPECTING FIRSTBLOCK DATA...YES
  261: 1AA2 FAA2  18            	CLC
  262: 1AA3 FAA3  B0 15         RD22	BCS RD40        ;EXPECTING SECOND BLOCK?...YES
  263: 1AA5 FAA5  29 0F         	AND #$F         ;MASK OFF HIGH STORE HEADER COUNT...
  264: 1AA7 FAA7  85 AA         	STA RDFLG       ;...IN MODE FLAG (HAVE CORRECT BLOCK)
  265: 1AA9 FAA9  C6 AA         RD200	DEC RDFLG       ;WAIT UNTILL WE GET REAL DATA...
  266: 1AAB FAAB  D0 DD         	BNE RD10        ;...9876543210 REAL
  267: 1AAD FAAD  A9 40         	LDA #$40        ;NEXT UP IS REAL DATA...
  268: 1AAF FAAF  85 AA         	STA RDFLG       ;...SET DATA MODE
  269: 1AB1 FAB1  20 8E FB      	JSR RD300       ;GO SETUP ADDRESS POINTERS
  270: 1AB4 FAB4  A9 00         	LDA #0          ;DEBUG CODE##################################################
  271: 1AB6 FAB6  85 AB         	STA SHCNH
  272: 1AB8 FAB8  F0 D0         	BEQ RD10        ;JMP TO CONTINUE
  273:                          
  274: 1ABA FABA  A9 80         RD40	LDA #$80        ;WE WANT TO...
  275: 1ABC FABC  85 AA         	STA RDFLG       ;IGNORE BYTES MODE
  276: 1ABE FABE  D0 CA         	BNE RD10        ;JMP
  277:                          
  278: 1AC0 FAC0  A5 B5         RD60	LDA DIFF        ;CHECK FOR END OF BLOCK...
  279: 1AC2 FAC2  F0 0A         	BEQ RD70        ;...OKAY
  280:                          ;
  281: 1AC4 FAC4  A9 04         	LDA #SBERR      ;SHORT BLOCK ERROR
  282: 1AC6 FAC6  20 1C FE      	JSR UDST
  283: 1AC9 FAC9  A9 00         	LDA #0          ;FORCE RDFLG FOR AN END
  284: 1ACB FACB  4C 4A FB      	JMP RD161
  285:                          
  286: 1ACE FACE  20 D1 FC      RD70	JSR CMPSTE      ;CHECK FOR END OF STORAGE AREA
  287: 1AD1 FAD1  90 03         	BCC @+5         ;NOT DONE YET
  288: 1AD3 FAD3  4C 48 FB      	JMP RD160
  289: 1AD6 FAD6  A6 A7         	LDX SHCNL       ;CHECK WHICH PASS...
  290: 1AD8 FAD8  CA            	DEX
  291: 1AD9 FAD9  F0 2D         	BEQ RD58        ;...SECOND PASS
  292: 1ADB FADB  A5 93         	LDA VERCK       ;CHECK IF LOAD OR VERIFY...
  293: 1ADD FADD  F0 0C         	BEQ RD80        ;...LOADING
  294: 1ADF FADF  A0 00         	LDY #0          ;...JUST VERIFYING
  295: 1AE1 FAE1  A5 BD         	LDA OCHAR
  296: 1AE3 FAE3  D1 AC         	CMP (SAL),Y      ;COMPARE WITH DATA IN PET
  297: 1AE5 FAE5  F0 04         	BEQ RD80        ;...GOOD SO CONTINUE
  298: 1AE7 FAE7  A9 01         	LDA #1          ;...BAD SO FLAG...
  299: 1AE9 FAE9  85 B6         	STA PRP         ;...AS AN ERROR
  300:                          
  301:                          ; STORE BAD LOCATIONS FOR SECOND PASS RE-TRY
  302: 1AEB FAEB  A5 B6         RD80	LDA PRP         ;CHK FOR ERRORS...
  303: 1AED FAED  F0 4B         	BEQ RD59        ;...NO ERRORS
  304: 1AEF FAEF  A2 3D         	LDX #61         ;MAX ALLOWED IS 30
  305: 1AF1 FAF1  E4 9E         	CPX PTR1        ;ARE WE AT MAX?...
  306: 1AF3 FAF3  90 3E         	BCC RD55        ;...YES, FLAG AS SECOND PASS ERROR
  307: 1AF5 FAF5  A6 9E         	LDX PTR1        ;GET INDEX INTO BAD...
  308: 1AF7 FAF7  A5 AD         	LDA SAH         ;...AND STORE THE BAD LOCATION
  309: 1AF9 FAF9  9D 01 01      	STA BAD+1,X     ;...IN BAD TABLE
  310: 1AFC FAFC  A5 AC         	LDA SAL
  311: 1AFE FAFE  9D 00 01      	STA BAD,X
  312: 1B01 FB01  E8            	INX             ;ADVANCE POINTER TO NEXT
  313: 1B02 FB02  E8            	INX
  314: 1B03 FB03  86 9E         	STX PTR1
  315: 1B05 FB05  4C 3A FB      	JMP RD59        ;GO STORE CHARACTER
  316:                          
  317:                          ; CHECK BAD TABLE FOR RE-TRY (SECOND PASS)
  318: 1B08 FB08  A6 9F         RD58	LDX PTR2        ;HAVE WE DONE ALL IN THE TABLE?...
  319: 1B0A FB0A  E4 9E         	CPX PTR1
  320: 1B0C FB0C  F0 35         	BEQ RD90        ;...YES
  321: 1B0E FB0E  A5 AC         	LDA SAL         ;SEE IF THIS IS NEXT IN THE TABLE...
  322: 1B10 FB10  DD 00 01      	CMP BAD,X
  323: 1B13 FB13  D0 2E         	BNE RD90        ;...NO
  324: 1B15 FB15  A5 AD         	LDA SAH
  325: 1B17 FB17  DD 01 01      	CMP BAD+1,X
  326: 1B1A FB1A  D0 27         	BNE RD90        ;...NO
  327: 1B1C FB1C  E6 9F         	INC PTR2        ;WE FOUND NEXT ONE, SO ADVANCE POINTER
  328: 1B1E FB1E  E6 9F         	INC PTR2
  329: 1B20 FB20  A5 93         	LDA VERCK       ;DOING A LOAD OR VERIFY?...
  330: 1B22 FB22  F0 0B         	BEQ RD52        ;...LOADING
  331: 1B24 FB24  A5 BD         	LDA OCHAR       ;...VERIFYING, SO CHECK
  332: 1B26 FB26  A0 00         	LDY #0
  333: 1B28 FB28  D1 AC         	CMP (SAL),Y
  334: 1B2A FB2A  F0 17         	BEQ RD90        ;...OKAY
  335: 1B2C FB2C  C8            	INY             ;MAKE .Y= 1
  336: 1B2D FB2D  84 B6         	STY PRP         ;FLAG IT AS AN ERROR
  337:                          
  338: 1B2F FB2F  A5 B6         RD52	LDA PRP         ;A SECOND PASS ERROR?...
  339: 1B31 FB31  F0 07         	BEQ RD59        ;...NO
  340:                          ;SECOND PASS ERR
  341: 1B33 FB33  A9 10         RD55	LDA #SPERR
  342: 1B35 FB35  20 1C FE      	JSR UDST
  343: 1B38 FB38  D0 09         	BNE RD90        ;JMP
  344:                          
  345: 1B3A FB3A  A5 93         RD59	LDA VERCK       ;LOAD OR VERIFY?...
  346: 1B3C FB3C  D0 05         	BNE RD90        ;...VERIFY, DON'T STORE
  347: 1B3E FB3E  A8            	TAY             ;MAKE Y ZERO
  348: 1B3F FB3F  A5 BD         	LDA OCHAR
  349: 1B41 FB41  91 AC         	STA (SAL),Y      ;STORE CHARACTER
  350: 1B43 FB43  20 DB FC      RD90	JSR INCSAL      ;INCREMENT ADDR.
  351: 1B46 FB46  D0 43         	BNE RD180       ;BRANCH ALWAYS
  352:                          
  353: 1B48 FB48  A9 80         RD160	LDA #$80        ;SET MODE SKIP NEXT DATA
  354: 1B4A FB4A  85 AA         RD161	STA RDFLG
  355:                          ;
  356:                          ; MODIFY FOR C64 6526'S
  357:                          ;
  358: 1B4C FB4C  78            	SEI             ;PROTECT CLEARING OF T1 INFORMATION
  359: 1B4D FB4D  A2 01         	LDX #$01
  360: 1B4F FB4F  8E 0D DC      	STX D1ICR       ;CLEAR T1 ENABLE...
  361: 1B52 FB52  AE 0D DC      	LDX D1ICR       ;CLEAR THE INTERRUPT
  362: 1B55 FB55  A6 BE         	LDX FSBLK       ;DEC FSBLK FOR NEXT PASS...
  363: 1B57 FB57  CA            	DEX
  364: 1B58 FB58  30 02         	BMI RD167       ;WE ARE DONE...FSBLK=0
  365: 1B5A FB5A  86 BE         	STX FSBLK       ;...ELSE FSBLK=NEXT
  366: 1B5C FB5C  C6 A7         RD167	DEC SHCNL       ;DEC PASS CALC...
  367: 1B5E FB5E  F0 08         	BEQ RD175       ;...ALL DONE
  368: 1B60 FB60  A5 9E         	LDA PTR1        ;CHECK FOR FIRST PASS ERRORS...
  369: 1B62 FB62  D0 27         	BNE RD180       ;...YES SO CONTINUE
  370: 1B64 FB64  85 BE         	STA FSBLK       ;CLEAR FSBLK IF NO ERRORS...
  371: 1B66 FB66  F0 23         	BEQ RD180       ;JMP TO EXIT
  372:                          
  373: 1B68 FB68  20 93 FC      RD175	JSR TNIF        ;READ IT ALL...EXIT
  374: 1B6B FB6B  20 8E FB      	JSR RD300       ;RESTORE SAL & SAH
  375: 1B6E FB6E  A0 00         	LDY #0          ;SET SHCNH TO ZERO...
  376: 1B70 FB70  84 AB         	STY SHCNH       ;...USED TO CALC PARITY BYTE
  377:                          ;
  378:                          ;COMPUTE PARITY OVER LOAD
  379:                          ;
  380: 1B72 FB72  B1 AC         VPRTY	LDA (SAL),Y      ;CALC BLOCK BCC
  381: 1B74 FB74  45 AB         	EOR SHCNH
  382: 1B76 FB76  85 AB         	STA SHCNH
  383: 1B78 FB78  20 DB FC      	JSR INCSAL      ;INCREMENT ADDRESS
  384: 1B7B FB7B  20 D1 FC      	JSR CMPSTE      ;TEST AGAINST END
  385: 1B7E FB7E  90 F2         	BCC VPRTY       ;NOT DONE YET...
  386: 1B80 FB80  A5 AB         	LDA SHCNH       ;CHECK FOR BCC CHAR MATCH...
  387: 1B82 FB82  45 BD         	EOR OCHAR
  388: 1B84 FB84  F0 05         	BEQ RD180       ;...YES, EXIT
  389:                          ;CHKSUM ERROR
  390: 1B86 FB86  A9 20         	LDA #CKERR
  391: 1B88 FB88  20 1C FE      	JSR UDST
  392: 1B8B FB8B  4C BC FE      RD180	JMP PREND
  393:                          
  394: 1B8E FB8E  A5 C2         RD300	LDA STAH        ; RESTORE STARTING ADDRESS...
  395: 1B90 FB90  85 AD         	STA SAH         ;...POINTERS (SAH & SAL)
  396: 1B92 FB92  A5 C1         	LDA STAL
  397: 1B94 FB94  85 AC         	STA SAL
  398: 1B96 FB96  60            	RTS
  399:                          
  400: 1B97 FB97  A9 08         NEWCH	LDA #8          ;SET UP FOR 8 BITS+PARITY
  401: 1B99 FB99  85 A3         	STA PCNTR
  402: 1B9B FB9B  A9 00         	LDA #0          ;INITILIZE...
  403: 1B9D FB9D  85 A4         	STA FIRT        ;..DIPOLE COUNTER
  404: 1B9F FB9F  85 A8         	STA RER         ;..ERROR FLAG
  405: 1BA1 FBA1  85 9B         	STA PRTY        ;..PARITY BIT
  406: 1BA3 FBA3  85 A9         	STA REZ         ;..ZERO COUNT
  407: 1BA5 FBA5  60            	RTS             ;.A=0 ON RETURN
  408:                          
  409:                          ; RSR 7/31/80 ADD COMMENTS
  410:                          ; RSR 3/28/82 MODIFY FOR C64 (ADD STUPID/COMMENTS)
  411:                          ; RSR 3/29/82 PUT BLOCK T1IRQ CONTROL
  412:                          ; RSR 5/11/82 MODIFY C64 STUPID CODE
 FILE: kernal.a65
 FILE: write.a65
    1:                          
    2:                          ; CASSETTE INFO - FSBLK IS BLOCK COUNTER FOR RECORD
    3:                          ;       FSBLK = 2 -FIRST HEADER
    4:                          ;             = 1 -FIRST DATA
    5:                          ;             = 0 -SECOND DATA
    6:                          ;
    7:                          ; WRITE - TOGGLE WRITE BIT ACCORDING TO LSB IN OCHAR
    8:                          ;
    9: 1BA6 FBA6  A5 BD         WRITE	LDA OCHAR       ;SHIFT BIT TO WRITE INTO CARRY
   10: 1BA8 FBA8  4A            	LSR  
   11: 1BA9 FBA9  A9 60         	LDA #96         ;...C CLR WRITE SHORT
   12: 1BAB FBAB  90 02         	BCC WRT1
   13: 1BAD FBAD  A9 B0         WRTW	LDA #176        ;...C SET WRITE LONG
   14: 1BAF FBAF  A2 00         WRT1	LDX #0          ;SET AND STORE TIME
   15: 1BB1 FBB1  8D 06 DC      WRTX	STA D1T2L
   16: 1BB4 FBB4  8E 07 DC      	STX D1T2H
   17: 1BB7 FBB7  AD 0D DC      	LDA D1ICR       ;CLEAR IRQ
   18: 1BBA FBBA  A9 19         	LDA #$19        ;ENABLE TIMER (ONE-SHOT)
   19: 1BBC FBBC  8D 0F DC      	STA D1CRB
   20: 1BBF FBBF  A5 01         	LDA R6510       ;TOGGLE WRITE BIT
   21: 1BC1 FBC1  49 08         	EOR #$08
   22: 1BC3 FBC3  85 01         	STA R6510
   23: 1BC5 FBC5  29 08         	AND #$08        ;LEAVE ONLY WRITE BIT
   24: 1BC7 FBC7  60            	RTS
   25:                          ;
   26: 1BC8 FBC8  38            WRTL3	SEC             ;FLAG PRP FOR END OF BLOCK
   27: 1BC9 FBC9  66 B6         	ROR PRP
   28: 1BCB FBCB  30 3C         	BMI WRT3        ; JMP
   29:                          ;
   30:                          ; WRTN - CALLED AT THE END OF EACH BYTE
   31:                          ;   TO WRITE A LONG RER    REZ
   32:                          ;              HHHHHHLLLLLLHHHLLL...
   33:                          ;
   34: 1BCD FBCD  A5 A8         WRTN	LDA RER         ;CHECK FOR ONE LONG
   35: 1BCF FBCF  D0 12         	BNE WRTN1
   36: 1BD1 FBD1  A9 10         	LDA #16         ;WRITE A LONG BIT
   37: 1BD3 FBD3  A2 01         	LDX #1
   38: 1BD5 FBD5  20 B1 FB      	JSR WRTX
   39: 1BD8 FBD8  D0 2F         	BNE WRT3
   40: 1BDA FBDA  E6 A8         	INC RER
   41: 1BDC FBDC  A5 B6         	LDA PRP         ;IF END OF BLOCK(BIT SET BY WRTL3)...
   42: 1BDE FBDE  10 29         	BPL WRT3        ;...NO END CONTINUE
   43: 1BE0 FBE0  4C 57 FC      	JMP WRNC        ;...END ...FINISH OFF
   44:                          ;
   45: 1BE3 FBE3  A5 A9         WRTN1	LDA REZ         ;CHECK FOR A ONE BIT
   46: 1BE5 FBE5  D0 09         	BNE WRTN2
   47: 1BE7 FBE7  20 AD FB      	JSR WRTW
   48: 1BEA FBEA  D0 1D         	BNE WRT3
   49: 1BEC FBEC  E6 A9         	INC REZ
   50: 1BEE FBEE  D0 19         	BNE WRT3
   51:                          ;
   52: 1BF0 FBF0  20 A6 FB      WRTN2	JSR WRITE
   53: 1BF3 FBF3  D0 14         	BNE WRT3        ;ON BIT LOW EXIT
   54: 1BF5 FBF5  A5 A4         	LDA FIRT        ;CHECK FOR FIRST OF DIPOLE
   55: 1BF7 FBF7  49 01         	EOR #1
   56: 1BF9 FBF9  85 A4         	STA FIRT
   57: 1BFB FBFB  F0 0F         	BEQ WRT2        ;DIPOLE DONE
   58: 1BFD FBFD  A5 BD         	LDA OCHAR       ;FLIPS BIT FOR COMPLEMENTARY RIGHT
   59: 1BFF FBFF  49 01         	EOR #1
   60: 1C01 FC01  85 BD         	STA OCHAR
   61: 1C03 FC03  29 01         	AND #1          ;TOGGLE PARITY
   62: 1C05 FC05  45 9B         	EOR PRTY
   63: 1C07 FC07  85 9B         	STA PRTY
   64: 1C09 FC09  4C BC FE      WRT3	JMP PREND       ;RESTORE REGS AND RTI EXIT
   65:                          ;
   66: 1C0C FC0C  46 BD         WRT2	LSR OCHAR       ;MOVE TO NEXT BIT
   67: 1C0E FC0E  C6 A3         	DEC PCNTR       ;DEC COUNTER FOR # OF BITS
   68: 1C10 FC10  A5 A3         	LDA PCNTR       ;CHECK FOR 8 BITS SENT...
   69: 1C12 FC12  F0 3A         	BEQ WRT4        ;...IF YES MOVE IN PARITY
   70: 1C14 FC14  10 F3         	BPL WRT3        ;...ELSE SEND REST
   71:                          ;
   72: 1C16 FC16  20 97 FB      WRTS	JSR NEWCH       ;CLEAN UP COUNTERS
   73: 1C19 FC19  58            	CLI             ;ALLOW FOR INTERRUPTS TO NEST
   74: 1C1A FC1A  A5 A5         	LDA CNTDN       ;ARE WE WRITING HEADER COUNTERS?...
   75: 1C1C FC1C  F0 12         	BEQ WRT6        ;...NO
   76:                          ; WRITE HEADER COUNTERS (9876543210 TO HELP WITH READ)
   77: 1C1E FC1E  A2 00         	LDX #0          ;CLEAR BCC
   78: 1C20 FC20  86 D7         	STX DATA
   79: 1C22 FC22  C6 A5         WRTS1	DEC CNTDN
   80: 1C24 FC24  A6 BE         	LDX FSBLK       ;CHECK FOR FIRST BLOCK HEADER
   81: 1C26 FC26  E0 02         	CPX #2
   82: 1C28 FC28  D0 02         	BNE WRT61       ;...NO
   83: 1C2A FC2A  09 80         	ORA #$80        ;...YES MARK FIRST BLOCK HEADER
   84: 1C2C FC2C  85 BD         WRT61	STA OCHAR       ;WRITE CHARACTERS IN HEADER
   85: 1C2E FC2E  D0 D9         	BNE WRT3
   86:                          ;
   87: 1C30 FC30  20 D1 FC      WRT6	JSR CMPSTE      ;COMPARE START:END
   88: 1C33 FC33  90 0A         	BCC WRT7        ;NOT DONE
   89: 1C35 FC35  D0 91         	BNE WRTL3       ;GO MARK END
   90: 1C37 FC37  E6 AD         	INC SAH
   91: 1C39 FC39  A5 D7         	LDA DATA        ;WRITE OUT BCC
   92: 1C3B FC3B  85 BD         	STA OCHAR
   93: 1C3D FC3D  B0 CA         	BCS WRT3        ;JMP
   94:                          ;
   95: 1C3F FC3F  A0 00         WRT7	LDY #0          ;GET NEXT CHARACTER
   96: 1C41 FC41  B1 AC         	LDA (SAL),Y
   97: 1C43 FC43  85 BD         	STA OCHAR       ;STORE IN OUTPUT CHARACTER
   98: 1C45 FC45  45 D7         	EOR DATA        ;UPDATE BCC
   99: 1C47 FC47  85 D7         	STA DATA
  100: 1C49 FC49  20 DB FC      	JSR INCSAL      ;INCREMENT FETCH ADDRESS
  101: 1C4C FC4C  D0 BB         	BNE WRT3        ;BRANCH ALWAYS
  102:                          ;
  103: 1C4E FC4E  A5 9B         WRT4	LDA PRTY        ;MOVE PARITY INTO OCHAR...
  104: 1C50 FC50  49 01         	EOR #1
  105: 1C52 FC52  85 BD         	STA OCHAR       ;...TO BE WRITTEN AS NEXT BIT
  106: 1C54 FC54  4C BC FE      WRTBK	JMP PREND       ;RESTORE REGS AND RTI EXIT
  107:                          ;
  108: 1C57 FC57  C6 BE         WRNC	DEC FSBLK       ;CHECK FOR END
  109: 1C59 FC59  D0 03         	BNE WREND       ;...BLOCK ONLY
  110: 1C5B FC5B  20 CA FC      	JSR TNOF        ;...WRITE, SO TURN OFF MOTOR
  111: 1C5E FC5E  A9 50         WREND	LDA #80         ;PUT 80 CASSETTE SYNCS AT END
  112: 1C60 FC60  85 A7         	STA SHCNL
  113: 1C62 FC62  A2 08         	LDX #8
  114: 1C64 FC64  78            	SEI
  115: 1C65 FC65  20 BD FC      	JSR BSIV        ;SET VECTOR TO WRITE ZEROS
  116: 1C68 FC68  D0 EA         	BNE WRTBK       ;JMP
  117:                          ;
  118: 1C6A FC6A  A9 78         WRTZ	LDA #120        ;WRITE LEADING ZEROS FOR SYNC
  119: 1C6C FC6C  20 AF FB      	JSR WRT1
  120: 1C6F FC6F  D0 E3         	BNE WRTBK
  121: 1C71 FC71  C6 A7         	DEC SHCNL       ;CHECK IF DONE WITH LOW SYNC...
  122: 1C73 FC73  D0 DF         	BNE WRTBK       ;...NO
  123: 1C75 FC75  20 97 FB      	JSR NEWCH       ;...YES CLEAR UP COUNTERS
  124: 1C78 FC78  C6 AB         	DEC SHCNH       ;CHECK IF DONE WITH SYNC...
  125: 1C7A FC7A  10 D8         	BPL WRTBK       ;...NO
  126: 1C7C FC7C  A2 0A         	LDX #10         ;...YES SO SET VECTOR FOR DATA
  127: 1C7E FC7E  20 BD FC      	JSR BSIV
  128: 1C81 FC81  58            	CLI
  129: 1C82 FC82  E6 AB         	INC SHCNH       ;ZERO SHCNH
  130: 1C84 FC84  A5 BE         	LDA FSBLK       ;IF DONE THEN...
  131: 1C86 FC86  F0 30         	BEQ STKY        ;...GOTO SYSTEM RESTORE
  132: 1C88 FC88  20 8E FB      	JSR RD300
  133: 1C8B FC8B  A2 09         	LDX #9          ;SET UP FOR HEADER COUNT
  134: 1C8D FC8D  86 A5         	STX CNTDN
  135: 1C8F FC8F  86 B6         	STX PRP         ;CLEAR ENDOF BLOCK FLAG
  136: 1C91 FC91  D0 83         	BNE WRTS        ;JMP
  137:                          ;
  138: 1C93 FC93  08            TNIF	PHP             ;CLEAN UP INTERRUPTS AND RESTORE PIA'S
  139: 1C94 FC94  78            	SEI
  140: 1C95 FC95  AD 11 D0      	LDA VICREG+17   ;UNLOCK VIC
  141: 1C98 FC98  09 10         	ORA #$10        ;ENABLE DISPLAY
  142: 1C9A FC9A  8D 11 D0      	STA VICREG+17
  143: 1C9D FC9D  20 CA FC      	JSR TNOF        ;TURN OFF MOTOR
  144: 1CA0 FCA0  A9 7F         	LDA #$7F        ;CLEAR INTERRUPTS
  145: 1CA2 FCA2  8D 0D DC      	STA D1ICR
  146: 1CA5 FCA5  20 DD FD      	JSR IOKEYS      ;RESTORE KEYBOARD IRQ FROM TIMMER1
  147: 1CA8 FCA8  AD A0 02      	LDA IRQTMP+1    ;RESTORE KEYBOARD INTERRUPT VECTOR
  148: 1CAB FCAB  F0 09         	BEQ TNIQ        ;NO IRQ (IRQ VECTOR CANNOT BE Z-PAGE)
  149: 1CAD FCAD  8D 15 03      	STA CINV+1
  150: 1CB0 FCB0  AD 9F 02      	LDA IRQTMP
  151: 1CB3 FCB3  8D 14 03      	STA CINV
  152: 1CB6 FCB6  28            TNIQ	PLP
  153: 1CB7 FCB7  60            	RTS
  154:                          ;
  155: 1CB8 FCB8  20 93 FC      STKY	JSR TNIF        ;GO RESTORE SYSTEM INTERRUPTS
  156: 1CBB FCBB  F0 97         	BEQ WRTBK       ;CAME FOR CASSETTE IRQ SO RTI
  157:                          ;
  158:                          ; BSIV - SUBROUTINE TO CHANGE IRQ VECTORS
  159:                          ;  ENTRYS - .X = 8 WRITE ZEROS TO TAPE
  160:                          ;           .X = 10 WRITE DATA TO TAPE
  161:                          ;           .X = 12 RESTORE TO KEYSCAN
  162:                          ;           .X = 14 READ DATA FROM TAPE
  163:                          ;
  164: 1CBD FCBD  BD 93 FD      BSIV	LDA BSIT-8,X    ;MOVE IRQ VECTORS, TABLE TO INDIRECT
  165: 1CC0 FCC0  8D 14 03      	STA CINV
  166: 1CC3 FCC3  BD 94 FD      	LDA BSIT+1-8,X
  167: 1CC6 FCC6  8D 15 03      	STA CINV+1
  168: 1CC9 FCC9  60            	RTS
  169:                          ;
  170: 1CCA FCCA  A5 01         TNOF	LDA R6510       ;TURN OFF CASSETTE MOTOR
  171: 1CCC FCCC  09 20         	ORA #$20        ;
  172: 1CCE FCCE  85 01         	STA R6510
  173: 1CD0 FCD0  60            	RTS
  174:                          
  175:                          ;COMPARE START AND END LOAD/SAVE
  176:                          ;ADDRESSES.  SUBROUTINE CALLED BY
  177:                          ;TAPE READ, SAVE, TAPE WRITE
  178:                          ;
  179: 1CD1 FCD1  38            CMPSTE	SEC
  180: 1CD2 FCD2  A5 AC         	LDA SAL
  181: 1CD4 FCD4  E5 AE         	SBC EAL
  182: 1CD6 FCD6  A5 AD         	LDA SAH
  183: 1CD8 FCD8  E5 AF         	SBC EAH
  184: 1CDA FCDA  60            	RTS
  185:                          
  186:                          ;INCREMENT ADDRESS POINTER SAL
  187:                          ;
  188: 1CDB FCDB  E6 AC         INCSAL	INC SAL
  189: 1CDD FCDD  D0 02         	BNE INCR
  190: 1CDF FCDF  E6 AD         	INC SAH
  191: 1CE1 FCE1  60            INCR	RTS
  192:                          
  193:                          ; RSR 7/28/80 ADD COMMENTS
  194:                          ; RSR 8/4/80 CHANGED I/O FOR VIXEN
  195:                          ; RSR 8/21/80 CHANGED I/O FOR VIXEN MOD
  196:                          ; RSR 8/25/80 CHANGED I/O FOR VIXEN MOD2
  197:                          ; RSR 12/11/81 MODIFY I/O FOR VIC-40
  198:                          ; RSR 2/9/82 ADD VIC TURN ON, REPLACE SAH WITH PRP
 FILE: kernal.a65
 FILE: init.a65
    1:                          
    2:                          ; START - SYSTEM RESET
    3:                          ; WILL GOTO ROM AT $8000...
    4:                          ; IF LOCS $8004-$8008
    5:                          ; = 'CBM80'
    6:                          ;    ^^^  > THESE HAVE MSB SET
    7:                          ; KERNAL EXPECTS...
    8:                          ; $8000- .WORD INITILIZE (HARD START)
    9:                          ; $8002- .WORD PANIC (WARM START)
   10:                          ; ... ELSE BASIC SYSTEM USED
   11:                          ; ******************TESTING ONLY***************
   12:                          ; USE AUTO DISK/CASSETTE LOAD WHEN DEVELOPED...
   13:                          ;
   14: 1CE2 FCE2  A2 FF         START	LDX #$FF
   15: 1CE4 FCE4  78            	SEI
   16: 1CE5 FCE5  9A            	TXS
   17: 1CE6 FCE6  D8            	CLD
   18: 1CE7 FCE7  20 02 FD      	JSR A0INT       ;TEST FOR $A0 ROM IN
   19: 1CEA FCEA  D0 03         	BNE START1
   20: 1CEC FCEC  6C 00 80      	JMP ($8000)     ; GO INIT AS $A000 ROM WANTS
   21: 1CEF FCEF  8E 16 D0      START1	STX VICREG+22   ;SET UP REFRESH (.X=<5)
   22: 1CF2 FCF2  20 A3 FD      	JSR IOINIT      ;GO INITILIZE I/O DEVICES
   23: 1CF5 FCF5  20 50 FD      	JSR RAMTAS      ;GO RAM TEST AND SET
   24: 1CF8 FCF8  20 15 FD      	JSR RESTOR      ;GO SET UP OS VECTORS
   25:                          ;
   26: 1CFB FCFB  20 5B FF      	JSR PCINT       ;GO INITILIZE SCREEN NEWXXX
   27: 1CFE FCFE  58            	CLI             ;INTERRUPTS OKAY NOW
   28: 1CFF FCFF  6C 00 A0      	JMP ($A000)     ;GO TO BASIC SYSTEM
   29:                          
   30:                          ; A0INT - TEST FOR AN $8000 ROM
   31:                          ;  RETURNS Z - $8000 IN
   32:                          ;
   33: 1D02 FD02  A2 05         A0INT	LDX #TBLA0E-TBLA0R ;CHECK FOR $8000
   34: 1D04 FD04  BD 0F FD      A0IN1	LDA TBLA0R-1,X
   35: 1D07 FD07  DD 03 80      	CMP $8004-1,X
   36: 1D0A FD0A  D0 03         	BNE A0IN2
   37: 1D0C FD0C  CA            	DEX
   38: 1D0D FD0D  D0 F5         	BNE A0IN1
   39: 1D0F FD0F  60            A0IN2	RTS
   40:                          ;
   41: 1D10 FD10  C3 C2 CD      TBLA0R	.BYTE $C3,$C2,$CD,"80" ;..CBM80..
   42:                          TBLA0E
   43:                          
   44:                          ; RESTOR - SET KERNAL INDIRECTS AND VECTORS (SYSTEM)
   45:                          ;
   46: 1D15 FD15  A2 30         RESTOR	LDX #<VECTSS
   47: 1D17 FD17  A0 FD         	LDY #>VECTSS
   48: 1D19 FD19  18            	CLC
   49:                          ;
   50:                          ; VECTOR - SET KERNAL INDIRECT AND VECTORS (USER)
   51:                          ;
   52: 1D1A FD1A  86 C3         VECTOR	STX TMP2
   53: 1D1C FD1C  84 C4         	STY TMP2+1
   54: 1D1E FD1E  A0 1F         	LDY #VECTSE-VECTSS-1
   55: 1D20 FD20  B9 14 03      MOVOS1	LDA CINV,Y      ;GET FROM STORAGE
   56: 1D23 FD23  B0 02         	BCS MOVOS2      ;C...WANT STORAGE TO USER
   57: 1D25 FD25  B1 C3         	LDA (TMP2),Y    ;...WANT USER TO STORAGE
   58: 1D27 FD27  91 C3         MOVOS2	STA (TMP2),Y    ;PUT IN USER
   59: 1D29 FD29  99 14 03      	STA CINV,Y      ;PUT IN STORAGE
   60: 1D2C FD2C  88            	DEY
   61: 1D2D FD2D  10 F1         	BPL MOVOS1
   62: 1D2F FD2F  60            	RTS
   63:                          ;
   64: 1D30 FD30  31 EA 66      VECTSS	.WORD KEY,TIMB,NNMI
   65: 1D36 FD36  4A F3 91      	.WORD NOPEN,NCLOSE,NCHKIN
   66: 1D3C FD3C  50 F2 33      	.WORD NCKOUT,NCLRCH,NBASIN
   67: 1D42 FD42  CA F1 ED      	.WORD NBSOUT,NSTOP,NGETIN
   68: 1D48 FD48  2F F3 66      	.WORD NCLALL,TIMB ;GOTO BREAK ON A USRCMD JMP
   69: 1D4C FD4C  A5 F4 ED      	.WORD NLOAD,NSAVE
   70:                          VECTSE
   71:                          
   72:                          ; RAMTAS - MEMORY SIZE CHECK AND SET
   73:                          ;
   74: 1D50 FD50  A9 00         RAMTAS	LDA #0          ;ZERO LOW MEMORY
   75: 1D52 FD52  A8            	TAY             ;START AT 0002
   76: 1D53 FD53  99 02 00      RAMTZ0	STA $0002,Y     ;ZERO PAGE
   77: 1D56 FD56  99 00 02      	STA $0200,Y     ;USER BUFFERS AND VARS
   78: 1D59 FD59  99 00 03      	STA $0300,Y     ;SYSTEM SPACE AND USER SPACE
   79: 1D5C FD5C  C8            	INY
   80: 1D5D FD5D  D0 F4         	BNE RAMTZ0
   81:                          ;
   82:                          ;ALLOCATE TAPE BUFFERS
   83:                          ;
   84: 1D5F FD5F  A2 3C         	LDX #<TBUFFR
   85: 1D61 FD61  A0 03         	LDY #>TBUFFR
   86: 1D63 FD63  86 B2         	STX TAPE1
   87: 1D65 FD65  84 B3         	STY TAPE1+1
   88:                          ;
   89:                          ; SET TOP OF MEMORY
   90:                          ;
   91:                          RAMTBT
   92: 1D67 FD67  A8            	TAY             ;MOVE $00 TO .Y
   93: 1D68 FD68  A9 03         	LDA #3          ;SET HIGH INITAL INDEX
   94: 1D6A FD6A  85 C2         	STA TMP0+1
   95:                          ;
   96: 1D6C FD6C  E6 C2         RAMTZ1	INC TMP0+1      ;MOVE INDEX THRU MEMORY
   97: 1D6E FD6E  B1 C1         RAMTZ2	LDA (TMP0),Y    ;GET PRESENT DATA
   98: 1D70 FD70  AA            	TAX             ;SAVE IN .X
   99: 1D71 FD71  A9 55         	LDA #$55        ;DO A $55,$AA TEST
  100: 1D73 FD73  91 C1         	STA (TMP0),Y
  101: 1D75 FD75  D1 C1         	CMP (TMP0),Y
  102: 1D77 FD77  D0 0F         	BNE SIZE
  103: 1D79 FD79  2A            	ROL  
  104: 1D7A FD7A  91 C1         	STA (TMP0),Y
  105: 1D7C FD7C  D1 C1         	CMP (TMP0),Y
  106: 1D7E FD7E  D0 08         	BNE SIZE
  107: 1D80 FD80  8A            	TXA             ;RESTORE OLD DATA
  108: 1D81 FD81  91 C1         	STA (TMP0),Y
  109: 1D83 FD83  C8            	INY
  110: 1D84 FD84  D0 E8         	BNE RAMTZ2
  111: 1D86 FD86  F0 E4         	BEQ RAMTZ1
  112:                          ;
  113: 1D88 FD88  98            SIZE	TYA             ;SET TOP OF MEMORY
  114: 1D89 FD89  AA            	TAX
  115: 1D8A FD8A  A4 C2         	LDY TMP0+1
  116: 1D8C FD8C  18            	CLC
  117: 1D8D FD8D  20 2D FE      	JSR SETTOP
  118: 1D90 FD90  A9 08         	LDA #$08        ;SET BOTTOM OF MEMORY
  119: 1D92 FD92  8D 82 02      	STA MEMSTR+1    ;ALWAYS AT $0800
  120: 1D95 FD95  A9 04         	LDA #$04        ;SCREEN ALWAYS AT $400
  121: 1D97 FD97  8D 88 02      	STA HIBASE      ;SET BASE OF SCREEN
  122: 1D9A FD9A  60            	RTS
  123:                          
  124: 1D9B FD9B  6A FC CD ...  BSIT	.WORD WRTZ,WRTN,KEY,READ ;TABLE OF INDIRECTS FOR CASSETTE IRQ'S
  125:                          
  126:                          ; IOINIT - INITILIZE IO DEVICES
  127:                          ;
  128: 1DA3 FDA3  A9 7F         IOINIT	LDA #$7F        ;KILL INTERRUPTS
  129: 1DA5 FDA5  8D 0D DC      	STA D1ICR
  130: 1DA8 FDA8  8D 0D DD      	STA D2ICR
  131: 1DAB FDAB  8D 00 DC      	STA D1PRA       ;TURN ON STOP KEY
  132: 1DAE FDAE  A9 08         	LDA #%00001000  ;SHUT OFF TIMERS
  133: 1DB0 FDB0  8D 0E DC      	STA D1CRA
  134: 1DB3 FDB3  8D 0E DD      	STA D2CRA
  135: 1DB6 FDB6  8D 0F DC      	STA D1CRB
  136: 1DB9 FDB9  8D 0F DD      	STA D2CRB
  137:                          ; CONFIGURE PORTS
  138: 1DBC FDBC  A2 00         	LDX #$00        ;SET UP KEYBOARD INPUTS
  139: 1DBE FDBE  8E 03 DC      	STX D1DDRB      ;KEYBOARD INPUTS
  140: 1DC1 FDC1  8E 03 DD      	STX D2DDRB      ;USER PORT (NO RS-232)
  141: 1DC4 FDC4  8E 18 D4      	STX SIDREG+24   ;TURN OFF SID
  142: 1DC7 FDC7  CA            	DEX
  143: 1DC8 FDC8  8E 02 DC      	STX D1DDRA      ;KEYBOARD OUTPUTS
  144: 1DCB FDCB  A9 07         	LDA #%00000111  ;SET SERIAL/VA14/15 (CLKHI)
  145: 1DCD FDCD  8D 00 DD      	STA D2PRA
  146: 1DD0 FDD0  A9 3F         	LDA #%00111111  ;SET SERIAL IN/OUT, VA14/15OUT
  147: 1DD2 FDD2  8D 02 DD      	STA D2DDRA
  148:                          ;
  149:                          ; SET UP THE 6510 LINES
  150:                          ;
  151: 1DD5 FDD5  A9 E7         	LDA #%11100111  ;MOTOR ON, HIRAM LOWRAM CHAREN HIGH
  152: 1DD7 FDD7  85 01         	STA R6510
  153: 1DD9 FDD9  A9 2F         	LDA #%00101111  ;MTR OUT,SW IN,WR OUT,CONTROL OUT
  154: 1DDB FDDB  85 00         	STA D6510
  155:                          ;
  156:                          ;JSR CLKHI ;CLKHI TO RELEASE SERIAL DEVICES  ^
  157:                          ;
  158: 1DDD FDDD  AD A6 02      IOKEYS	LDA PALNTS      ;PAL OR NTSC
  159: 1DE0 FDE0  F0 0A         	BEQ IO010       ;NTSC
  160: 1DE2 FDE2  A9 25         	LDA #<SIXTYP
  161: 1DE4 FDE4  8D 04 DC      	STA D1T1L
  162: 1DE7 FDE7  A9 40         	LDA #>SIXTYP
  163: 1DE9 FDE9  4C F3 FD      	JMP IO020
  164: 1DEC FDEC  A9 95         IO010	LDA #<SIXTY     ;KEYBOARD SCAN IRQ'S
  165: 1DEE FDEE  8D 04 DC      	STA D1T1L
  166: 1DF1 FDF1  A9 42         	LDA #>SIXTY
  167: 1DF3 FDF3  8D 05 DC      IO020	STA D1T1H
  168: 1DF6 FDF6  4C 6E FF      	JMP PIOKEY      ;PATCH IOKEYS
  169:                          ; LDA #$81 ;ENABLE T1 IRQ'S
  170:                          ; STA D1ICR
  171:                          ; LDA D1CRA
  172:                          ; AND #$80 ;SAVE ONLY TOD BIT
  173:                          ; ORA #%00010001 ;ENABLE TIMER1
  174:                          ; STA D1CRA
  175:                          ; JMP CLKLO ;RELEASE THE CLOCK LINE
  176:                          ;
  177:                          ; SIXTY HERTZ VALUES
  178:                          ;
  179:                          SIXTY	= 17045         ;NTSC
  180:                          SIXTYP	= 16421         ;PAL
  181:                          
  182: 1DF9 FDF9  85 B7         SETNAM	STA FNLEN
  183: 1DFB FDFB  86 BB         	STX FNADR
  184: 1DFD FDFD  84 BC         	STY FNADR+1
  185: 1DFF FDFF  60            	RTS
  186:                          
  187: 1E00 FE00  85 B8         SETLFS	STA LA
  188: 1E02 FE02  86 BA         	STX FA
  189: 1E04 FE04  84 B9         	STY SA
  190: 1E06 FE06  60            	RTS
  191:                          
  192: 1E07 FE07  A5 BA         READSS	LDA FA          ;SEE WHICH DEVICES' TO READ
  193: 1E09 FE09  C9 02         	CMP #2          ;IS IT RS-232?
  194: 1E0B FE0B  D0 0D         	BNE READST      ;NO...READ SERIAL/CASS
  195: 1E0D FE0D  AD 97 02      	LDA RSSTAT      ;YES...GET RS-232 UP
  196: 1E10 FE10  48            	PHA
  197: 1E11 FE11  A9 00         	LDA #00         ;CLEAR RS232 STATUS WHEN READ
  198: 1E13 FE13  8D 97 02      	STA RSSTAT
  199: 1E16 FE16  68            	PLA
  200: 1E17 FE17  60            	RTS
  201: 1E18 FE18  85 9D         SETMSG	STA MSGFLG
  202: 1E1A FE1A  A5 90         READST	LDA STATUS
  203: 1E1C FE1C  05 90         UDST	ORA STATUS
  204: 1E1E FE1E  85 90         	STA STATUS
  205: 1E20 FE20  60            	RTS
  206:                          
  207: 1E21 FE21  8D 85 02      SETTMO	STA TIMOUT
  208: 1E24 FE24  60            	RTS
  209:                          
  210: 1E25 FE25  90 06         MEMTOP	BCC SETTOP
  211:                          ;
  212:                          ;CARRY SET--READ TOP OF MEMORY
  213:                          ;
  214: 1E27 FE27  AE 83 02      GETTOP	LDX MEMSIZ
  215: 1E2A FE2A  AC 84 02      	LDY MEMSIZ+1
  216:                          ;
  217:                          ;CARRY CLEAR--SET TOP OF MEMORY
  218:                          ;
  219: 1E2D FE2D  8E 83 02      SETTOP	STX MEMSIZ
  220: 1E30 FE30  8C 84 02      	STY MEMSIZ+1
  221: 1E33 FE33  60            	RTS
  222:                          
  223:                          ;MANAGE BOTTOM OF MEMORY
  224:                          ;
  225: 1E34 FE34  90 06         MEMBOT	BCC SETBOT
  226:                          ;
  227:                          ;CARRY SET--READ BOTTOM OF MEMORY
  228:                          ;
  229: 1E36 FE36  AE 81 02      	LDX MEMSTR
  230: 1E39 FE39  AC 82 02      	LDY MEMSTR+1
  231:                          ;
  232:                          ;CARRY CLEAR--SET BOTTOM OF MEMORY
  233:                          ;
  234: 1E3C FE3C  8E 81 02      SETBOT	STX MEMSTR
  235: 1E3F FE3F  8C 82 02      	STY MEMSTR+1
  236: 1E42 FE42  60            	RTS
  237:                          
  238:                          ; RSR 8/5/80 CHANGE IO STRUCTURE
  239:                          ; RSR 8/15/80 ADD MEMORY TEST
  240:                          ; RSR 8/21/80 CHANGE I/O FOR MOD
  241:                          ; RSR 8/25/80 CHANGE I/O FOR MOD2
  242:                          ; RSR 8/29/80 CHANGE RAMTEST FOR HARDWARE MISTAKE
  243:                          ; RSR 9/22/80 CHANGE SO RAM HANG RS232 STATUS READ
  244:                          ; RSR 5/12/82 CHANGE START1 ORDER TO REMOVE DISK PROBLEM
  245:                          ; RSR 6/21/82 MODIFY FOR UNIVERSAL
 FILE: kernal.a65
 FILE: rs232nmi.a65
    1:                          
    2: 1E43 FE43  78            NMI	SEI             ;NO IRQ'S ALLOWED...
    3: 1E44 FE44  6C 18 03      	JMP (NMINV)     ;...COULD MESS UP CASSETTES
    4: 1E47 FE47  48            NNMI	PHA
    5: 1E48 FE48  8A            	TXA
    6: 1E49 FE49  48            	PHA
    7: 1E4A FE4A  98            	TYA
    8: 1E4B FE4B  48            	PHA
    9: 1E4C FE4C  A9 7F         NNMI10	LDA #$7F        ;DISABLE ALL NMI'S
   10: 1E4E FE4E  8D 0D DD      	STA D2ICR
   11: 1E51 FE51  AC 0D DD      	LDY D2ICR       ;CHECK IF REAL NMI...
   12: 1E54 FE54  30 1C         	BMI NNMI20      ;NO...RS232/OTHER
   13:                          ;
   14: 1E56 FE56  20 02 FD      NNMI18	JSR A0INT       ;CHECK IF $A0 IN...NO .Y
   15: 1E59 FE59  D0 03         	BNE NNMI19      ;...NO
   16: 1E5B FE5B  6C 02 80      	JMP ($8002)     ;...YES
   17:                          ;
   18:                          ; CHECK FOR STOP KEY DOWN
   19:                          ;
   20:                          NNMI19
   21: 1E5E FE5E  20 BC F6      	JSR UD60        ;NO .Y
   22: 1E61 FE61  20 E1 FF      	JSR STOP        ;NO .Y
   23: 1E64 FE64  D0 0C         	BNE NNMI20      ;NO STOP KEY...TEST FOR RS232
   24:                          ;
   25:                          ; TIMB - WHERE SYSTEM GOES ON A BRK INSTRUCTION
   26:                          ;
   27: 1E66 FE66  20 15 FD      TIMB	JSR RESTOR      ;RESTORE SYSTEM INDIRECTS
   28: 1E69 FE69  20 A3 FD      	JSR IOINIT      ;RESTORE I/O FOR BASIC
   29: 1E6C FE6C  20 18 E5      	JSR CINT        ;RESTORE SCREEN FOR BASIC
   30: 1E6F FE6F  6C 02 A0      	JMP ($A002)     ;...NO, SO BASIC WARM START
   31:                          
   32:                          ; DISABLE NMI'S UNTILL READY
   33:                          ;  SAVE ON STACK
   34:                          ;
   35: 1E72 FE72  98            NNMI20	TYA             ;.Y SAVED THROUGH RESTORE
   36: 1E73 FE73  2D A1 02      	AND ENABL       ;SHOW ONLY ENABLES
   37: 1E76 FE76  AA            	TAX             ;SAVE IN .X FOR LATTER
   38:                          ;
   39:                          ; T1 NMI CHECK - TRANSMITT A BIT
   40:                          ;
   41: 1E77 FE77  29 01         	AND #$01        ;CHECK FOR T1
   42: 1E79 FE79  F0 28         	BEQ NNMI30      ;NO...
   43:                          ;
   44: 1E7B FE7B  AD 00 DD      	LDA D2PRA
   45: 1E7E FE7E  29 FB         	AND #$FF-$04    ;FIX FOR CURRENT I/O
   46: 1E80 FE80  05 B5         	ORA NXTBIT      ;LOAD DATA AND...
   47: 1E82 FE82  8D 00 DD      	STA D2PRA       ;...SEND IT
   48:                          ;
   49: 1E85 FE85  AD A1 02      	LDA ENABL       ;RESTORE NMI'S
   50: 1E88 FE88  8D 0D DD      	STA D2ICR       ;READY FOR NEXT...
   51:                          ;
   52:                          ; BECAUSE OF 6526 ICR STRUCTURE...
   53:                          ;  HANDLE ANOTHER NMI AS A SUBROUTINE
   54:                          ;
   55: 1E8B FE8B  8A            	TXA             ;TEST FOR ANOTHER NMI
   56: 1E8C FE8C  29 12         	AND #$12        ;TEST FOR T2 OR FLAG
   57: 1E8E FE8E  F0 0D         	BEQ NNMI25
   58: 1E90 FE90  29 02         	AND #$02        ;CHECK FOR T2
   59: 1E92 FE92  F0 06         	BEQ NNMI22      ;MUST BE A FLAG
   60:                          ;
   61: 1E94 FE94  20 D6 FE      	JSR T2NMI       ;HANDLE A NORMAL BIT IN...
   62: 1E97 FE97  4C 9D FE      	JMP NNMI25      ;...THEN CONTINUE OUTPUT
   63:                          ;
   64: 1E9A FE9A  20 07 FF      NNMI22	JSR FLNMI       ;HANDLE A START BIT...
   65:                          ;
   66: 1E9D FE9D  20 BB EE      NNMI25	JSR RSTRAB      ;GO CALC INFO (CODE COULD BE IN LINE)
   67: 1EA0 FEA0  4C B6 FE      	JMP NMIRTI
   68:                          ;
   69:                          
   70:                          ; T2 NMI CHECK - RECIEVE A BIT
   71:                          ;
   72: 1EA3 FEA3  8A            NNMI30	TXA
   73: 1EA4 FEA4  29 02         	AND #$02        ;MASK TO T2
   74: 1EA6 FEA6  F0 06         	BEQ NNMI40      ;NO...
   75:                          ;
   76: 1EA8 FEA8  20 D6 FE      	JSR T2NMI       ;HANDLE INTERRUPT
   77: 1EAB FEAB  4C B6 FE      	JMP NMIRTI
   78:                          
   79:                          ; FLAG NMI HANDLER - RECIEVE A START BIT
   80:                          ;
   81: 1EAE FEAE  8A            NNMI40	TXA             ;CHECK FOR EDGE
   82: 1EAF FEAF  29 10         	AND #$10        ;ON FLAG...
   83: 1EB1 FEB1  F0 03         	BEQ NMIRTI      ;NO...
   84:                          ;
   85: 1EB3 FEB3  20 07 FF      	JSR FLNMI       ;START BIT ROUTINE
   86:                          
   87: 1EB6 FEB6  AD A1 02      NMIRTI	LDA ENABL       ;RESTORE NMI'S
   88: 1EB9 FEB9  8D 0D DD      	STA D2ICR
   89: 1EBC FEBC  68            PREND	PLA             ;BECAUSE OF MISSING SCREEN EDITOR
   90: 1EBD FEBD  A8            	TAY
   91: 1EBE FEBE  68            	PLA
   92: 1EBF FEBF  AA            	TAX
   93: 1EC0 FEC0  68            	PLA
   94: 1EC1 FEC1  40            	RTI
   95:                          
   96:                          ; BAUDO TABLE CONTAINS VALUES
   97:                          ;  FOR 14.31818E6/14/BAUD RATE/2 (NTSC)
   98:                          ;
   99: 1EC2 FEC2  C1 27         BAUDO	.WORD 10277-CBIT ; 50 BAUD
  100: 1EC4 FEC4  3E 1A         	.WORD 6818-CBIT  ;   75   BAUD
  101: 1EC6 FEC6  C5 11         	.WORD 4649-CBIT  ;  110   BAUD
  102: 1EC8 FEC8  74 0E         	.WORD 3800-CBIT  ;  134.6 BAUD
  103: 1ECA FECA  ED 0C         	.WORD 3409-CBIT  ;  150   BAUD
  104: 1ECC FECC  45 06         	.WORD 1705-CBIT  ;  300   BAUD
  105: 1ECE FECE  F0 02         	.WORD 852-CBIT   ;  600   BAUD
  106: 1ED0 FED0  46 01         	.WORD 426-CBIT   ; 1200   BAUD
  107: 1ED2 FED2  B8 00         	.WORD 284-CBIT   ; 1800   BAUD
  108: 1ED4 FED4  71 00         	.WORD 213-CBIT   ; 2400   BAUD
  109:                          ;
  110:                          ; CBIT - AN ADJUSTMENT TO MAKE NEXT T2 HIT NEAR CENTER
  111:                          ;   OF THE NEXT BIT.
  112:                          ;   APROX THE TIME TO SERVICE A CB1 NMI
  113:                          CBIT	=100            ;CYCLES
  114:                          
  115:                          ; T2NMI - SUBROUTINE TO HANDLE AN RS232
  116:                          ;  BIT INPUT.
  117:                          ;
  118: 1ED6 FED6  AD 01 DD      T2NMI	LDA D2PRB       ;GET DATA IN
  119: 1ED9 FED9  29 01         	AND #01         ;MASK OFF...
  120: 1EDB FEDB  85 A7         	STA INBIT       ;...SAVE FOR LATTER
  121:                          ;
  122:                          ; UPDATE T2 FOR MID BIT CHECK
  123:                          ;   (WORST CASE <213 CYCLES TO HERE)
  124:                          ;   (CALC 125 CYCLES+43-66 DEAD)
  125:                          ;
  126: 1EDD FEDD  AD 06 DD      	LDA D2T2L       ;CALC NEW TIME & CLR NMI
  127: 1EE0 FEE0  E9 1C         	SBC #22+6
  128: 1EE2 FEE2  6D 99 02      	ADC BAUDOF
  129: 1EE5 FEE5  8D 06 DD      	STA D2T2L
  130: 1EE8 FEE8  AD 07 DD      	LDA D2T2H
  131: 1EEB FEEB  6D 9A 02      	ADC BAUDOF+1
  132: 1EEE FEEE  8D 07 DD      	STA D2T2H
  133:                          ;
  134: 1EF1 FEF1  A9 11         	LDA #$11        ;ENABLE TIMER
  135: 1EF3 FEF3  8D 0F DD      	STA D2CRB
  136:                          ;
  137: 1EF6 FEF6  AD A1 02      	LDA ENABL       ;RESTORE NMI'S EARLY...
  138: 1EF9 FEF9  8D 0D DD      	STA D2ICR
  139:                          ;
  140: 1EFC FEFC  A9 FF         	LDA #$FF        ;ENABLE COUNT FROM $FFFF
  141: 1EFE FEFE  8D 06 DD      	STA D2T2L
  142: 1F01 FF01  8D 07 DD      	STA D2T2H
  143:                          ;
  144: 1F04 FF04  4C 59 EF      	JMP RSRCVR      ;GO SHIFT IN...
  145:                          
  146:                          ; FLNMI - SUBROUTINE TO HANDLE THE
  147:                          ;  START BIT TIMING..
  148:                          ;
  149:                          ; CHECK FOR NOISE ?
  150:                          ;
  151:                          FLNMI
  152:                          ;
  153:                          ; GET HALF BIT RATE VALUE
  154:                          ;
  155: 1F07 FF07  AD 95 02      	LDA M51AJB
  156: 1F0A FF0A  8D 06 DD      	STA D2T2L
  157: 1F0D FF0D  AD 96 02      	LDA M51AJB+1
  158: 1F10 FF10  8D 07 DD      	STA D2T2H
  159:                          ;
  160: 1F13 FF13  A9 11         	LDA #$11        ;ENABLE TIMER
  161: 1F15 FF15  8D 0F DD      	STA D2CRB
  162:                          ;
  163: 1F18 FF18  A9 12         	LDA #$12        ;DISABLE FLAG, ENABLE T2
  164: 1F1A FF1A  4D A1 02      	EOR ENABL
  165: 1F1D FF1D  8D A1 02      	STA ENABL
  166:                          ;ORA #$82
  167:                          ;STA D2ICR
  168:                          ;
  169: 1F20 FF20  A9 FF         	LDA #$FF        ;PRESET FOR COUNT DOWN
  170: 1F22 FF22  8D 06 DD      	STA D2T2L
  171: 1F25 FF25  8D 07 DD      	STA D2T2H
  172:                          ;
  173: 1F28 FF28  AE 98 02      	LDX BITNUM      ;GET #OF BITS IN
  174: 1F2B FF2B  86 A8         	STX BITCI       ;PUT IN RCVRCNT
  175: 1F2D FF2D  60            	RTS
  176:                          ;
  177:                          ; POPEN - PATCHES OPEN RS232 FOR UNIVERSAL KERNAL
  178:                          ;
  179: 1F2E FF2E  AA            POPEN	TAX             ;WE'RE CALCULATING BAUD RATE
  180: 1F2F FF2F  AD 96 02      	LDA M51AJB+1    ; M51AJB=FREQ/BAUD/2-100
  181: 1F32 FF32  2A            	ROL  
  182: 1F33 FF33  A8            	TAY
  183: 1F34 FF34  8A            	TXA
  184: 1F35 FF35  69 C8         	ADC #CBIT+CBIT
  185: 1F37 FF37  8D 99 02      	STA BAUDOF
  186: 1F3A FF3A  98            	TYA
  187: 1F3B FF3B  69 00         	ADC #0
  188: 1F3D FF3D  8D 9A 02      	STA BAUDOF+1
  189: 1F40 FF40  60            	RTS
  190: 1F41 FF41  EA            	NOP
  191: 1F42 FF42  EA            	NOP
  192:                          
  193:                          ; RSR  8/02/80 - ROUTINE FOR PANIC
  194:                          ; RSR  8/08/80 - PANIC & STOP KEY
  195:                          ; RSR  8/12/80 - CHANGE FOR A0INT A SUBROUTINE
  196:                          ; RSR  8/19/80 - ADD RS-232 CHECKS
  197:                          ; RSR  8/21/80 - MODIFY RS-232
  198:                          ; RSR  8/29/80 - CHANGE PANIC ORDER FOR JACK
  199:                          ; RSR  8/30/80 - ADD T2
  200:                          ; RSR  9/22/80 - ADD 1800 BAUD OPPS!
  201:                          ; RSR 12/08/81 - MODIFY FOR VIC-40 SYSTEM
  202:                          ; RSR 12/11/81 - CONTINUE MODIFICATIONS (VIC-40)
  203:                          ; RSR 12/14/81 - MODIFY FOR 6526 TIMER ADJUST
  204:                          ; RSR  2/09/82 - FIX ENABLE FOR FLAG NMI
  205:                          ; RSR  2/16/82 - REWRITE FOR 6526 PROBLEMS
  206:                          ; RSR  3/11/82 - CHANGE NMI RENABLE, FIX RESTORE
  207:                          ; RSR  3/29/82 - ENABLES ARE ALWAYS OR'ED WITH $80
  208:                          ; RSR  6/21/82 - ADD OPEN PATCH
 FILE: kernal.a65
 FILE: irqfile.a65
    1:                          
    2:                          ; SIMIRQ - SIMULATE AN IRQ (FOR CASSETTE READ)
    3:                          ;  ENTER BY A JSR SIMIRQ
    4:                          ;
    5: 1F43 FF43  08            SIMIRQ	PHP
    6: 1F44 FF44  68            	PLA             ;FIX THE BREAK FLAG
    7: 1F45 FF45  29 EF         	AND #$EF
    8: 1F47 FF47  48            	PHA
    9:                          ; PULS - CHECKS FOR REAL IRQ'S OR BREAKS
   10:                          ;
   11: 1F48 FF48  48            PULS	PHA
   12: 1F49 FF49  8A            	TXA
   13: 1F4A FF4A  48            	PHA
   14: 1F4B FF4B  98            	TYA
   15: 1F4C FF4C  48            	PHA
   16: 1F4D FF4D  BA            	TSX
   17: 1F4E FF4E  BD 04 01      	LDA $104,X      ;GET OLD P STATUS
   18: 1F51 FF51  29 10         	AND #$10        ;BREAK FLAG?
   19: 1F53 FF53  F0 03         	BEQ PULS1       ;...NO
   20: 1F55 FF55  6C 16 03      	JMP (CBINV)     ;...YES...BREAK INSTR
   21: 1F58 FF58  6C 14 03      PULS1	JMP (CINV)      ;...IRQ
   22:                          
   23:                          
   24:                          ; PCINT - ADD UNIVERSAL TO CINIT
   25:                          ;
   26: 1F5B FF5B  20 18 E5      PCINT	JSR CINT
   27: 1F5E FF5E  AD 12 D0      P0010	LDA VICREG+18   ;CHECK RASTER COMPARE FOR ZERO
   28: 1F61 FF61  D0 FB         	BNE P0010       ;IF IT'S ZERO THEN CHECK VALUE...
   29: 1F63 FF63  AD 19 D0      	LDA VICREG+25   ;GET RASTER IRQ VALUE
   30: 1F66 FF66  29 01         	AND #$01
   31: 1F68 FF68  8D A6 02      	STA PALNTS      ;PLACE IN PAL/NTSC INDICATOR
   32: 1F6B FF6B  4C DD FD      	JMP IOKEYS
   33:                          ;
   34:                          ; PIOKEY - ADD UNIVERSAL TO IOKEYS
   35:                          ;
   36: 1F6E FF6E  A9 81         PIOKEY	LDA #$81        ;ENABLE T1 IRQ'S
   37: 1F70 FF70  8D 0D DC      	STA D1ICR
   38: 1F73 FF73  AD 0E DC      	LDA D1CRA
   39: 1F76 FF76  29 80         	AND #$80        ;SAVE ONLY TOD BIT
   40: 1F78 FF78  09 11         	ORA #%00010001  ;ENABLE TIMER1
   41: 1F7A FF7A  8D 0E DC      	STA D1CRA
   42:                          .if FLAG_FIX_FF7E
   43-                          	JMP CLKHI       ;RELEASE THE CLOCK LINE***901227-03***
   44:                          .else
   45: 1F7D FF7D  4C 8E EE      	JMP CLKLO
   46:                          .endif
   47:                          
 FILE: kernal.a65
 FILE: vectors.a65
    1:                          	.org $FF80
    2: 1F80 FF80  03            	.BYTE 3         ;RELEASE NUMBER OF C64 KERNAL
    3: 1F81 FF81  4C 5B FF      	JMP PCINT
    4: 1F84 FF84  4C A3 FD      	JMP IOINIT
    5: 1F87 FF87  4C 50 FD      	JMP RAMTAS
    6:                          	.org $FF8A      ;NEW VECTORS FOR BASIC
    7: 1F8A FF8A  4C 15 FD      	JMP RESTOR      ;RESTORE VECTORS TO INITIAL SYSTEM
    8: 1F8D FF8D  4C 1A FD      	JMP VECTOR      ;CHANGE VECTORS FOR USER
    9:                          	.org $FF90
   10: 1F90 FF90  4C 18 FE      	JMP SETMSG      ;CONTROL O.S. MESSAGES
   11: 1F93 FF93  4C B9 ED      	JMP SECND       ;SEND SA AFTER LISTEN
   12: 1F96 FF96  4C C7 ED      	JMP TKSA        ;SEND SA AFTER TALK
   13: 1F99 FF99  4C 25 FE      	JMP MEMTOP      ;SET/READ TOP OF MEMORY
   14: 1F9C FF9C  4C 34 FE      	JMP MEMBOT      ;SET/READ BOTTOM OF MEMORY
   15: 1F9F FF9F  4C 87 EA      	JMP SCNKEY      ;SCAN KEYBOARD
   16: 1FA2 FFA2  4C 21 FE      	JMP SETTMO      ;SET TIMEOUT IN IEEE
   17: 1FA5 FFA5  4C 13 EE      	JMP ACPTR       ;HANDSHAKE IEEE BYTE IN
   18: 1FA8 FFA8  4C DD ED      	JMP CIOUT       ;HANDSHAKE IEEE BYTE OUT
   19: 1FAB FFAB  4C EF ED      	JMP UNTLK       ;SEND UNTALK OUT IEEE
   20: 1FAE FFAE  4C FE ED      	JMP UNLSN       ;SEND UNLISTEN OUT IEEE
   21: 1FB1 FFB1  4C 0C ED      	JMP LISTN       ;SEND LISTEN OUT IEEE
   22: 1FB4 FFB4  4C 09 ED      	JMP TALK        ;SEND TALK OUT IEEE
   23: 1FB7 FFB7  4C 07 FE      	JMP READSS      ;RETURN I/O STATUS BYTE
   24: 1FBA FFBA  4C 00 FE      	JMP SETLFS      ;SET LA, FA, SA
   25: 1FBD FFBD  4C F9 FD      	JMP SETNAM      ;SET LENGTH AND FN ADR
   26: 1FC0 FFC0  6C 1A 03      OPEN	JMP (IOPEN)     ;OPEN LOGICAL FILE
   27: 1FC3 FFC3  6C 1C 03      CLOSE	JMP (ICLOSE)    ;CLOSE LOGICAL FILE
   28: 1FC6 FFC6  6C 1E 03      CHKIN	JMP (ICHKIN)    ;OPEN CHANNEL IN
   29: 1FC9 FFC9  6C 20 03      CKOUT	JMP (ICKOUT)    ;OPEN CHANNEL OUT
   30: 1FCC FFCC  6C 22 03      CLRCH	JMP (ICLRCH)    ;CLOSE I/O CHANNEL
   31: 1FCF FFCF  6C 24 03      BASIN	JMP (IBASIN)    ;INPUT FROM CHANNEL
   32: 1FD2 FFD2  6C 26 03      BSOUT	JMP (IBSOUT)    ;OUTPUT TO CHANNEL
   33: 1FD5 FFD5  4C 9E F4      	JMP LOADSP      ;LOAD FROM FILE
   34: 1FD8 FFD8  4C DD F5      	JMP SAVESP      ;SAVE TO FILE
   35: 1FDB FFDB  4C E4 F6      	JMP SETTIM      ;SET INTERNAL CLOCK
   36: 1FDE FFDE  4C DD F6      	JMP RDTIM       ;READ INTERNAL CLOCK
   37: 1FE1 FFE1  6C 28 03      STOP	JMP (ISTOP)     ;SCAN STOP KEY
   38: 1FE4 FFE4  6C 2A 03      GETIN	JMP (IGETIN)    ;GET CHAR FROM Q
   39: 1FE7 FFE7  6C 2C 03      CLALL	JMP (ICLALL)    ;CLOSE ALL FILES
   40: 1FEA FFEA  4C 9B F6      	JMP UDTIM       ;INCREMENT CLOCK
   41: 1FED FFED  4C 05 E5      JSCROG	JMP SCRORG      ;SCREEN ORG
   42: 1FF0 FFF0  4C 0A E5      JPLOT	JMP PLOT        ;READ/SET X,Y COORD
   43: 1FF3 FFF3  4C 00 E5      JIOBAS	JMP IOBASE      ;RETURN I/O BASE
   44:                          
   45:                          
   46:                          .if FLAG_RRBY
   47: 1FF6 FFF6  52 52 42      	.byte "RRBY"
   48:                          .endif
   49:                          
   50:                          	.fill $FFFA - @, $AA
   51: 1FFA FFFA  43 FE         	.WORD NMI        ;PROGRAM DEFINEABLE
   52: 1FFC FFFC  E2 FC         	.WORD START      ;INITIALIZATION CODE
   53: 1FFE FFFE  48 FF         	.WORD PULS       ;INTERRUPT HANDLER
 FILE: kernal.a65
   48:                          


S Y M B O L S   B Y   N A M E

NAME                              HEX    DEC  SYM TYPE  WHERE
A0IN1. . . . . . . . . . . . . . FD04  64772  LBL WORD  init.a65:34
A0IN2. . . . . . . . . . . . . . FD0F  64783  LBL WORD  init.a65:39
A0INT. . . . . . . . . . . . . . FD02  64770  LBL WORD  init.a65:33
ACC. . . . . . . . . . . . . . .   05      5  LBL BYTE  declare.a65:10
ACP00. . . . . . . . . . . . . . EE30  60976  LBL WORD  serial40.a65:203
ACP00A . . . . . . . . . . . . . EE1B  60955  LBL WORD  serial40.a65:193
ACP00B . . . . . . . . . . . . . EE3E  60990  LBL WORD  serial40.a65:210
ACP00C . . . . . . . . . . . . . EE47  60999  LBL WORD  serial40.a65:217
ACP01. . . . . . . . . . . . . . EE56  61014  LBL WORD  serial40.a65:226
ACP03. . . . . . . . . . . . . . EE5A  61018  LBL WORD  serial40.a65:229
ACP03A . . . . . . . . . . . . . EE67  61031  LBL WORD  serial40.a65:236
ACP04. . . . . . . . . . . . . . EE80  61056  LBL WORD  serial40.a65:250
ACPTR. . . . . . . . . . . . . . EE13  60947  LBL WORD  serial40.a65:188
AUTODN . . . . . . . . . . . . . 0292    658  LBL WORD  declare.a65:149
BACK . . . . . . . . . . . . . . E8B0  59568  LBL WORD  editor1.a65:574
BAD. . . . . . . . . . . . . . . 0100    256  LBL WORD  declare.a65:119
BAK1UP . . . . . . . . . . . . . E759  59225  LBL WORD  editor1.a65:388
BAKBAK . . . . . . . . . . . . . E864  59492  LBL WORD  editor1.a65:531
BASIN. . . . . . . . . . . . . . FFCF  65487  LBL WORD  vectors.a65:31
BASZPT . . . . . . . . . . . . .   FF    255  LBL BYTE  declare.a65:116
BAUDO. . . . . . . . . . . . . . FEC2  65218  LBL WORD  rs232nmi.a65:99
BAUDOF . . . . . . . . . . . . . 0299    665  LBL WORD  declare.a65:158
BAUDOP . . . . . . . . . . . . . E4EC  58604  LBL WORD  patches.a65:31
BCOLOR . . . . . . . . . . . . .   06      6  VAR BYTE  config.a65:9
BDF. . . . . . . . . . . . . . .   02      2  VAR BYTE  declare.a65:272
BDFH . . . . . . . . . . . . . .   04      4  VAR BYTE  declare.a65:274
BIT010 . . . . . . . . . . . . . EF54  61268  LBL WORD  rs232trn.a65:136
BIT020 . . . . . . . . . . . . . EF58  61272  LBL WORD  rs232trn.a65:139
BITCI. . . . . . . . . . . . . .   A8    168  LBL BYTE  declare.a65:49
BITCNT . . . . . . . . . . . . . EF4A  61258  LBL WORD  rs232trn.a65:131
BITNUM . . . . . . . . . . . . . 0298    664  LBL WORD  declare.a65:157
BITTS. . . . . . . . . . . . . .   B4    180  LBL BYTE  declare.a65:64
BK1. . . . . . . . . . . . . . . E75F  59231  LBL WORD  editor1.a65:391
BK15 . . . . . . . . . . . . . . E762  59234  LBL WORD  editor1.a65:392
BK2. . . . . . . . . . . . . . . E773  59251  LBL WORD  editor1.a65:403
BKLN . . . . . . . . . . . . . . E701  59137  LBL WORD  editor1.a65:339
BKLN1. . . . . . . . . . . . . . E70B  59147  LBL WORD  editor1.a65:346
BLF. . . . . . . . . . . . . . .   01      1  VAR BYTE  declare.a65:271
BLNCT. . . . . . . . . . . . . .   CD    205  LBL BYTE  declare.a65:97
BLNK2. . . . . . . . . . . . . . F781  63361  LBL WORD  tapefile.a65:86
BLNON. . . . . . . . . . . . . .   CF    207  LBL BYTE  declare.a65:99
BLNSW. . . . . . . . . . . . . .   CC    204  LBL BYTE  declare.a65:96
BLUE . . . . . . . . . . . . . .   06      6  VAR BYTE  declare.a65:283
BMT1 . . . . . . . . . . . . . . E967  59751  LBL WORD  editor2.a65:84
BMT2 . . . . . . . . . . . . . . E96C  59756  LBL WORD  editor2.a65:89
BN10 . . . . . . . . . . . . . . F166  61798  LBL WORD  chanio.a65:56
BN20 . . . . . . . . . . . . . . F173  61811  LBL WORD  chanio.a65:64
BN30 . . . . . . . . . . . . . . F1AD  61869  LBL WORD  chanio.a65:108
BN31 . . . . . . . . . . . . . . F1B1  61873  LBL WORD  chanio.a65:110
BN32 . . . . . . . . . . . . . . F1B3  61875  LBL WORD  chanio.a65:111
BN33 . . . . . . . . . . . . . . F1B4  61876  LBL WORD  chanio.a65:112
BN35 . . . . . . . . . . . . . . F1B5  61877  LBL WORD  chanio.a65:114
BN50 . . . . . . . . . . . . . . F1B8  61880  LBL WORD  chanio.a65:118
BO10 . . . . . . . . . . . . . . F1D5  61909  LBL WORD  chanio.a65:147
BO20 . . . . . . . . . . . . . . F1DB  61915  LBL WORD  chanio.a65:157
BO50 . . . . . . . . . . . . . . F208  61960  LBL WORD  chanio.a65:203
BREAK. . . . . . . . . . . . . . F633  63027  LBL WORD  save.a65:56
BREAKE . . . . . . . . . . . . . EFCD  61389  LBL WORD  rs232rcv.a65:113
BSI010 . . . . . . . . . . . . . F09C  61596  LBL WORD  rs232io.a65:161
BSI232 . . . . . . . . . . . . . F086  61574  LBL WORD  rs232io.a65:147
BSIT . . . . . . . . . . . . . . FD9B  64923  LBL WORD  init.a65:124
BSIV . . . . . . . . . . . . . . FCBD  64701  LBL WORD  write.a65:164
BSO100 . . . . . . . . . . . . . F028  61480  LBL WORD  rs232io.a65:70
BSO110 . . . . . . . . . . . . . F02E  61486  LBL WORD  rs232io.a65:76
BSO120 . . . . . . . . . . . . . F04C  61516  LBL WORD  rs232io.a65:87
BSO232 . . . . . . . . . . . . . F017  61463  LBL WORD  rs232io.a65:59
BSOBAD . . . . . . . . . . . . . F014  61460  LBL WORD  rs232io.a65:55
BSOUR. . . . . . . . . . . . . .   95    149  LBL BYTE  declare.a65:24
BSOUR1 . . . . . . . . . . . . .   A4    164  LBL BYTE  declare.a65:42
BSOUT. . . . . . . . . . . . . . FFD2  65490  LBL WORD  vectors.a65:32
BUF. . . . . . . . . . . . . . . 0200    512  LBL WORD  declare.a65:121
BUFPT. . . . . . . . . . . . . .   A6    166  LBL BYTE  declare.a65:46
BUFSZ. . . . . . . . . . . . . .   C0    192  VAR BYTE  declare.a65:275
C3P0 . . . . . . . . . . . . . .   94    148  LBL BYTE  declare.a65:23
CAS1 . . . . . . . . . . . . . .   C0    192  LBL BYTE  declare.a65:79
CASOUT . . . . . . . . . . . . . F1DD  61917  LBL WORD  chanio.a65:160
CASTON . . . . . . . . . . . . . 02A2    674  LBL WORD  declare.a65:184
CBINV. . . . . . . . . . . . . . 0316    790  LBL WORD  declare.a65:193
CBIT . . . . . . . . . . . . . . 0064    100  VAR WORD  rs232nmi.a65:113
CHK1A. . . . . . . . . . . . . . E8CD  59597  LBL WORD  editor1.a65:598
CHK1B. . . . . . . . . . . . . . E8D6  59606  LBL WORD  editor1.a65:604
CHKBAK . . . . . . . . . . . . . E8A1  59553  LBL WORD  editor1.a65:564
CHKCOL . . . . . . . . . . . . . E8CB  59595  LBL WORD  editor1.a65:596
CHKDWN . . . . . . . . . . . . . E8B3  59571  LBL WORD  editor1.a65:579
CHKIN. . . . . . . . . . . . . . FFC6  65478  LBL WORD  vectors.a65:28
CHKLUP . . . . . . . . . . . . . E8A5  59557  LBL WORD  editor1.a65:566
CI2. . . . . . . . . . . . . . . EDE6  60902  LBL WORD  serial40.a65:152
CI4. . . . . . . . . . . . . . . EDEB  60907  LBL WORD  serial40.a65:155
CINT . . . . . . . . . . . . . . E518  58648  LBL WORD  editor1.a65:43
CINV . . . . . . . . . . . . . . 0314    788  LBL WORD  declare.a65:192
CIOUT. . . . . . . . . . . . . . EDDD  60893  LBL WORD  serial40.a65:145
CK10 . . . . . . . . . . . . . . F262  62050  LBL WORD  openchan.a65:99
CK15 . . . . . . . . . . . . . . F26F  62063  LBL WORD  openchan.a65:110
CK20 . . . . . . . . . . . . . . F25F  62047  LBL WORD  openchan.a65:95
CK30 . . . . . . . . . . . . . . F275  62069  LBL WORD  openchan.a65:114
CK40 . . . . . . . . . . . . . . F279  62073  LBL WORD  openchan.a65:119
CK5. . . . . . . . . . . . . . . F258  62040  LBL WORD  openchan.a65:90
CK50 . . . . . . . . . . . . . . F286  62086  LBL WORD  openchan.a65:128
CK60 . . . . . . . . . . . . . . F289  62089  LBL WORD  openchan.a65:130
CKDSRX . . . . . . . . . . . . . F00D  61453  LBL WORD  rs232io.a65:43
CKERR. . . . . . . . . . . . . .   20     32  VAR BYTE  read.a65:226
CKI010 . . . . . . . . . . . . . F062  61538  LBL WORD  rs232io.a65:112
CKI020 . . . . . . . . . . . . . F070  61552  LBL WORD  rs232io.a65:124
CKI080 . . . . . . . . . . . . . F077  61559  LBL WORD  rs232io.a65:130
CKI100 . . . . . . . . . . . . . F07D  61565  LBL WORD  rs232io.a65:137
CKI110 . . . . . . . . . . . . . F084  61572  LBL WORD  rs232io.a65:140
CKI232 . . . . . . . . . . . . . F04D  61517  LBL WORD  rs232io.a65:92
CKIT . . . . . . . . . . . . . . EACC  60108  LBL WORD  editor2.a65:305
CKIT1. . . . . . . . . . . . . . EADC  60124  LBL WORD  editor2.a65:315
CKIT2. . . . . . . . . . . . . . EB26  60198  LBL WORD  editor2.a65:350
CKIT3. . . . . . . . . . . . . . EB30  60208  LBL WORD  editor2.a65:355
CKO020 . . . . . . . . . . . . . EFF2  61426  LBL WORD  rs232io.a65:22
CKO030 . . . . . . . . . . . . . EFF9  61433  LBL WORD  rs232io.a65:28
CKO040 . . . . . . . . . . . . . F006  61446  LBL WORD  rs232io.a65:39
CKO100 . . . . . . . . . . . . . F012  61458  LBL WORD  rs232io.a65:46
CKO232 . . . . . . . . . . . . . EFE1  61409  LBL WORD  rs232io.a65:5
CKOUT. . . . . . . . . . . . . . FFC9  65481  LBL WORD  vectors.a65:29
CKUT . . . . . . . . . . . . . . EACB  60107  LBL WORD  editor2.a65:304
CLALL. . . . . . . . . . . . . . FFE7  65511  LBL WORD  vectors.a65:39
CLALL2 . . . . . . . . . . . . . F343  62275  LBL WORD  clall.a65:33
CLEAR1 . . . . . . . . . . . . . E560  58720  LBL WORD  editor1.a65:83
CLKHI. . . . . . . . . . . . . . EE85  61061  LBL WORD  serial40.a65:255
CLKLO. . . . . . . . . . . . . . EE8E  61070  LBL WORD  serial40.a65:261
CLN232 . . . . . . . . . . . . . F483  62595  LBL WORD  open.a65:254
CLOSE. . . . . . . . . . . . . . FFC3  65475  LBL WORD  vectors.a65:27
CLP1 . . . . . . . . . . . . . . E674  58996  LBL WORD  editor1.a65:253
CLP2 . . . . . . . . . . . . . . E65D  58973  LBL WORD  editor1.a65:242
CLP21. . . . . . . . . . . . . . E672  58994  LBL WORD  editor1.a65:252
CLP2A. . . . . . . . . . . . . . E66F  58991  LBL WORD  editor1.a65:251
CLP5 . . . . . . . . . . . . . . E606  58886  LBL WORD  editor1.a65:193
CLP6 . . . . . . . . . . . . . . E60F  58895  LBL WORD  editor1.a65:198
CLP7 . . . . . . . . . . . . . . E682  59010  LBL WORD  editor1.a65:262
CLR10. . . . . . . . . . . . . . EA07  59911  LBL WORD  editor2.a65:185
CLRCH. . . . . . . . . . . . . . FFCC  65484  LBL WORD  vectors.a65:30
CLRLN. . . . . . . . . . . . . . E9FF  59903  LBL WORD  editor2.a65:182
CLS010 . . . . . . . . . . . . . F2BA  62138  LBL WORD  close.a65:49
CLS020 . . . . . . . . . . . . . F2BF  62143  LBL WORD  close.a65:52
CLSEI. . . . . . . . . . . . . . F642  63042  LBL WORD  save.a65:65
CLSEI2 . . . . . . . . . . . . . F657  63063  LBL WORD  save.a65:76
CLSR . . . . . . . . . . . . . . E544  58692  LBL WORD  editor1.a65:67
CMP0 . . . . . . . . . . . . . .   B0    176  LBL BYTE  declare.a65:61
CMPSTE . . . . . . . . . . . . . FCD1  64721  LBL WORD  write.a65:179
CNC3 . . . . . . . . . . . . . . E782  59266  LBL WORD  editor1.a65:410
CNC3X. . . . . . . . . . . . . . E74C  59212  LBL WORD  editor1.a65:382
CNTDN. . . . . . . . . . . . . .   A5    165  LBL BYTE  declare.a65:45
COLM . . . . . . . . . . . . . . DC00  56320  LBL WORD  declare.a65:229
COLOR. . . . . . . . . . . . . . 0286    646  LBL WORD  declare.a65:138
COLR1. . . . . . . . . . . . . . E7CE  59342  LBL WORD  editor1.a65:447
COLTAB . . . . . . . . . . . . . E8DA  59610  LBL WORD  editor1.a65:608
CONTRL . . . . . . . . . . . . . EC78  60536  LBL WORD  editor3.a65:123
COUNT. . . . . . . . . . . . . .   A5    165  LBL BYTE  declare.a65:44
CPATCH . . . . . . . . . . . . . E4DA  58586  LBL WORD  patches.a65:12
CR . . . . . . . . . . . . . . .   0D     13  VAR BYTE  declare.a65:284
CRSW . . . . . . . . . . . . . .   D0    208  LBL BYTE  declare.a65:100
CS10 . . . . . . . . . . . . . . F82E  63534  LBL WORD  tapectrl.a65:22
CS25 . . . . . . . . . . . . . . F836  63542  LBL WORD  tapectrl.a65:26
CS30 . . . . . . . . . . . . . . F81E  63518  LBL WORD  tapectrl.a65:13
CS40 . . . . . . . . . . . . . . F821  63521  LBL WORD  tapectrl.a65:14
CSBERR . . . . . . . . . . . . . EDB2  60850  LBL WORD  serial40.a65:110
CSTE1. . . . . . . . . . . . . . F817  63511  LBL WORD  tapectrl.a65:10
CSTE2. . . . . . . . . . . . . . F838  63544  LBL WORD  tapectrl.a65:31
CTSERR . . . . . . . . . . . . . EF31  61233  LBL WORD  rs232trn.a65:113
CUNLSN . . . . . . . . . . . . . F654  63060  LBL WORD  save.a65:74
CURS10 . . . . . . . . . . . . . E7C0  59328  LBL WORD  editor1.a65:441
D1CRA. . . . . . . . . . . . . . DC0E  56334  LBL WORD  declare.a65:245
D1CRB. . . . . . . . . . . . . . DC0F  56335  LBL WORD  declare.a65:246
D1DDRA . . . . . . . . . . . . . DC02  56322  LBL WORD  declare.a65:233
D1DDRB . . . . . . . . . . . . . DC03  56323  LBL WORD  declare.a65:234
D1ICR. . . . . . . . . . . . . . DC0D  56333  LBL WORD  declare.a65:244
D1PRA. . . . . . . . . . . . . . DC00  56320  LBL WORD  declare.a65:230
D1PRB. . . . . . . . . . . . . . DC01  56321  LBL WORD  declare.a65:232
D1SDR. . . . . . . . . . . . . . DC0C  56332  LBL WORD  declare.a65:243
D1T1H. . . . . . . . . . . . . . DC05  56325  LBL WORD  declare.a65:236
D1T1L. . . . . . . . . . . . . . DC04  56324  LBL WORD  declare.a65:235
D1T2H. . . . . . . . . . . . . . DC07  56327  LBL WORD  declare.a65:238
D1T2L. . . . . . . . . . . . . . DC06  56326  LBL WORD  declare.a65:237
D1TOD1 . . . . . . . . . . . . . DC08  56328  LBL WORD  declare.a65:239
D1TODH . . . . . . . . . . . . . DC0B  56331  LBL WORD  declare.a65:242
D1TODM . . . . . . . . . . . . . DC0A  56330  LBL WORD  declare.a65:241
D1TODS . . . . . . . . . . . . . DC09  56329  LBL WORD  declare.a65:240
D2CRA. . . . . . . . . . . . . . DD0E  56590  LBL WORD  declare.a65:263
D2CRB. . . . . . . . . . . . . . DD0F  56591  LBL WORD  declare.a65:264
D2DDRA . . . . . . . . . . . . . DD02  56578  LBL WORD  declare.a65:251
D2DDRB . . . . . . . . . . . . . DD03  56579  LBL WORD  declare.a65:252
D2ICR. . . . . . . . . . . . . . DD0D  56589  LBL WORD  declare.a65:262
D2PRA. . . . . . . . . . . . . . DD00  56576  LBL WORD  declare.a65:249
D2PRB. . . . . . . . . . . . . . DD01  56577  LBL WORD  declare.a65:250
D2SDR. . . . . . . . . . . . . . DD0C  56588  LBL WORD  declare.a65:261
D2T1H. . . . . . . . . . . . . . DD05  56581  LBL WORD  declare.a65:254
D2T1L. . . . . . . . . . . . . . DD04  56580  LBL WORD  declare.a65:253
D2T2H. . . . . . . . . . . . . . DD07  56583  LBL WORD  declare.a65:256
D2T2L. . . . . . . . . . . . . . DD06  56582  LBL WORD  declare.a65:255
D2TOD1 . . . . . . . . . . . . . DD08  56584  LBL WORD  declare.a65:257
D2TODH . . . . . . . . . . . . . DD0B  56587  LBL WORD  declare.a65:260
D2TODM . . . . . . . . . . . . . DD0A  56586  LBL WORD  declare.a65:259
D2TODS . . . . . . . . . . . . . DD09  56585  LBL WORD  declare.a65:258
D6510. . . . . . . . . . . . . .   00      0  LBL BYTE  declare.a65:3
DATA . . . . . . . . . . . . . .   D7    215  LBL BYTE  declare.a65:107
DATAHI . . . . . . . . . . . . . EE97  61079  LBL WORD  serial40.a65:268
DATALO . . . . . . . . . . . . . EEA0  61088  LBL WORD  serial40.a65:274
DEBPIA . . . . . . . . . . . . . EEA9  61097  LBL WORD  serial40.a65:280
DELAY. . . . . . . . . . . . . . 028C    652  LBL WORD  declare.a65:144
DFLTN. . . . . . . . . . . . . .   99    153  LBL BYTE  declare.a65:28
DFLTO. . . . . . . . . . . . . .   9A    154  LBL BYTE  declare.a65:29
DIFF . . . . . . . . . . . . . .   B5    181  LBL BYTE  declare.a65:67
DLABYE . . . . . . . . . . . . . EE03  60931  LBL WORD  serial40.a65:175
DLAD00 . . . . . . . . . . . . . EE09  60937  LBL WORD  serial40.a65:180
DLADLH . . . . . . . . . . . . . EE06  60934  LBL WORD  serial40.a65:178
DNLINE . . . . . . . . . . . . . E8C2  59586  LBL WORD  editor1.a65:589
DPSW . . . . . . . . . . . . . .   9C    156  LBL BYTE  declare.a65:31
DSPP . . . . . . . . . . . . . . EA13  59923  LBL WORD  editor2.a65:196
DSPP2. . . . . . . . . . . . . . EA1C  59932  LBL WORD  editor2.a65:201
DSRERR . . . . . . . . . . . . . EF2E  61230  LBL WORD  rs232trn.a65:111
DWNBYE . . . . . . . . . . . . . E8CA  59594  LBL WORD  editor1.a65:594
DWNCHK . . . . . . . . . . . . . E8B7  59575  LBL WORD  editor1.a65:581
EAH. . . . . . . . . . . . . . .   AF    175  LBL BYTE  declare.a65:60
EAL. . . . . . . . . . . . . . .   AE    174  LBL BYTE  declare.a65:59
ENABL. . . . . . . . . . . . . . 02A1    673  LBL WORD  declare.a65:183
EOIACP . . . . . . . . . . . . . EE20  60960  LBL WORD  serial40.a65:196
EOT. . . . . . . . . . . . . . .   05      5  VAR BYTE  declare.a65:270
EREXIT . . . . . . . . . . . . . F729  63273  LBL WORD  errhndl.a65:60
ERR232 . . . . . . . . . . . . . EFD2  61394  LBL WORD  rs232rcv.a65:116
ERROR1 . . . . . . . . . . . . . F6FB  63227  LBL WORD  errhndl.a65:29
ERROR2 . . . . . . . . . . . . . F6FE  63230  LBL WORD  errhndl.a65:31
ERROR3 . . . . . . . . . . . . . F701  63233  LBL WORD  errhndl.a65:33
ERROR4 . . . . . . . . . . . . . F704  63236  LBL WORD  errhndl.a65:35
ERROR5 . . . . . . . . . . . . . F707  63239  LBL WORD  errhndl.a65:37
ERROR6 . . . . . . . . . . . . . F70A  63242  LBL WORD  errhndl.a65:39
ERROR7 . . . . . . . . . . . . . F70D  63245  LBL WORD  errhndl.a65:41
ERROR8 . . . . . . . . . . . . . F710  63248  LBL WORD  errhndl.a65:43
ERROR9 . . . . . . . . . . . . . F713  63251  LBL WORD  errhndl.a65:45
FA . . . . . . . . . . . . . . .   BA    186  LBL BYTE  declare.a65:73
FAF. . . . . . . . . . . . . . . F7EA  63466  LBL WORD  tapefile.a65:178
FAF20. . . . . . . . . . . . . . F7F7  63479  LBL WORD  tapefile.a65:187
FAF30. . . . . . . . . . . . . . F80B  63499  LBL WORD  tapefile.a65:199
FAF40. . . . . . . . . . . . . . F80C  63500  LBL WORD  tapefile.a65:200
FAH. . . . . . . . . . . . . . . F72C  63276  LBL WORD  tapefile.a65:12
FAH40. . . . . . . . . . . . . . F769  63337  LBL WORD  tapefile.a65:57
FAH45. . . . . . . . . . . . . . F767  63335  LBL WORD  tapefile.a65:54
FAH50. . . . . . . . . . . . . . F74B  63307  LBL WORD  tapefile.a65:34
FAH55. . . . . . . . . . . . . . F757  63319  LBL WORD  tapefile.a65:44
FAH56. . . . . . . . . . . . . . F761  63329  LBL WORD  tapefile.a65:50
FAT. . . . . . . . . . . . . . . 0263    611  LBL WORD  declare.a65:126
FCOLOR . . . . . . . . . . . . .   0E     14  VAR BYTE  config.a65:8
FINDST . . . . . . . . . . . . . E6ED  59117  LBL WORD  editor1.a65:325
FINPUT . . . . . . . . . . . . . E591  58769  LBL WORD  editor1.a65:123
FINPUX . . . . . . . . . . . . . E598  58776  LBL WORD  editor1.a65:126
FINX . . . . . . . . . . . . . . E6F4  59124  LBL WORD  editor1.a65:330
FIRT . . . . . . . . . . . . . .   A4    164  LBL BYTE  declare.a65:43
FLAG_FIX_FF7E. . . . . . . . . .   00      0  VAR BYTE  config.a65:5
FLAG_RRBY. . . . . . . . . . . .   01      1  VAR BYTE  config.a65:3
FLGS . . . . . . . . . . . . . .   04      4  LBL BYTE  declare.a65:9
FLNMI. . . . . . . . . . . . . . FF07  65287  LBL WORD  rs232nmi.a65:151
FNADR. . . . . . . . . . . . . .   BB    187  LBL BYTE  declare.a65:74
FNDEND . . . . . . . . . . . . . E582  58754  LBL WORD  editor1.a65:110
FNDSTR . . . . . . . . . . . . . E570  58736  LBL WORD  editor1.a65:98
FNLEN. . . . . . . . . . . . . .   B7    183  LBL BYTE  declare.a65:70
FPAT00 . . . . . . . . . . . . . E4E2  58594  LBL WORD  patches.a65:20
FPAT01 . . . . . . . . . . . . . E4EB  58603  LBL WORD  patches.a65:25
FPATCH . . . . . . . . . . . . . E4E0  58592  LBL WORD  patches.a65:19
FRAMEE . . . . . . . . . . . . . EFD0  61392  LBL WORD  rs232rcv.a65:115
FREKZP . . . . . . . . . . . . .   FB    251  LBL BYTE  declare.a65:115
FRMERR . . . . . . . . . . . . . EDB0  60848  LBL WORD  serial40.a65:108
FSBLK. . . . . . . . . . . . . .   BE    190  LBL BYTE  declare.a65:77
GDBLN. . . . . . . . . . . . . .   CE    206  LBL BYTE  declare.a65:98
GDCOL. . . . . . . . . . . . . . 0287    647  LBL WORD  declare.a65:139
GETIN. . . . . . . . . . . . . . FFE4  65508  LBL WORD  vectors.a65:38
GETTOP . . . . . . . . . . . . . FE27  65063  LBL WORD  init.a65:214
GN10 . . . . . . . . . . . . . . F14A  61770  LBL WORD  chanio.a65:21
GN20 . . . . . . . . . . . . . . F155  61781  LBL WORD  chanio.a65:27
GN232. . . . . . . . . . . . . . F14E  61774  LBL WORD  chanio.a65:24
GOTDWN . . . . . . . . . . . . . E7C8  59336  LBL WORD  editor1.a65:445
HIBASE . . . . . . . . . . . . . 0288    648  LBL WORD  declare.a65:140
IBASIN . . . . . . . . . . . . . 0324    804  LBL WORD  declare.a65:200
IBSOUT . . . . . . . . . . . . . 0326    806  LBL WORD  declare.a65:201
ICHKIN . . . . . . . . . . . . . 031E    798  LBL WORD  declare.a65:197
ICKOUT . . . . . . . . . . . . . 0320    800  LBL WORD  declare.a65:198
ICLALL . . . . . . . . . . . . . 032C    812  LBL WORD  declare.a65:204
ICLOSE . . . . . . . . . . . . . 031C    796  LBL WORD  declare.a65:196
ICLRCH . . . . . . . . . . . . . 0322    802  LBL WORD  declare.a65:199
IGETIN . . . . . . . . . . . . . 032A    810  LBL WORD  declare.a65:203
ILOAD. . . . . . . . . . . . . . 0330    816  LBL WORD  declare.a65:206
INBIT. . . . . . . . . . . . . .   A7    167  LBL BYTE  declare.a65:47
INCR . . . . . . . . . . . . . . FCE1  64737  LBL WORD  write.a65:191
INCSAL . . . . . . . . . . . . . FCDB  64731  LBL WORD  write.a65:188
INDX . . . . . . . . . . . . . .   C8    200  LBL BYTE  declare.a65:92
INITV. . . . . . . . . . . . . . E5A8  58792  LBL WORD  editor1.a65:141
INS1 . . . . . . . . . . . . . . E805  59397  LBL WORD  editor1.a65:483
INS2 . . . . . . . . . . . . . . E80A  59402  LBL WORD  editor1.a65:485
INS3 . . . . . . . . . . . . . . E7FE  59390  LBL WORD  editor1.a65:480
INSEXT . . . . . . . . . . . . . E826  59430  LBL WORD  editor1.a65:501
INSRT. . . . . . . . . . . . . .   D8    216  LBL BYTE  declare.a65:108
INVH . . . . . . . . . . . . . .   09      9  LBL BYTE  declare.a65:14
INVL . . . . . . . . . . . . . .   0A     10  LBL BYTE  declare.a65:15
IO010. . . . . . . . . . . . . . FDEC  65004  LBL WORD  init.a65:164
IO020. . . . . . . . . . . . . . FDF3  65011  LBL WORD  init.a65:167
IOBASE . . . . . . . . . . . . . E500  58624  LBL WORD  editor1.a65:21
IOINIT . . . . . . . . . . . . . FDA3  64931  LBL WORD  init.a65:128
IOKEYS . . . . . . . . . . . . . FDDD  64989  LBL WORD  init.a65:158
IOPEN. . . . . . . . . . . . . . 031A    794  LBL WORD  declare.a65:195
IRQTMP . . . . . . . . . . . . . 029F    671  LBL WORD  declare.a65:179
ISAVE. . . . . . . . . . . . . . 0332    818  LBL WORD  declare.a65:207
ISOUR. . . . . . . . . . . . . . ED40  60736  LBL WORD  serial40.a65:46
ISOURA . . . . . . . . . . . . . ED36  60726  LBL WORD  serial40.a65:41
ISR01. . . . . . . . . . . . . . ED66  60774  LBL WORD  serial40.a65:69
ISR02. . . . . . . . . . . . . . ED50  60752  LBL WORD  serial40.a65:54
ISR03. . . . . . . . . . . . . . ED55  60757  LBL WORD  serial40.a65:57
ISR04. . . . . . . . . . . . . . ED9F  60831  LBL WORD  serial40.a65:97
ISRCLK . . . . . . . . . . . . . ED7D  60797  LBL WORD  serial40.a65:81
ISRHI. . . . . . . . . . . . . . ED7A  60794  LBL WORD  serial40.a65:80
ISTOP. . . . . . . . . . . . . . 0328    808  LBL WORD  declare.a65:202
JIOBAS . . . . . . . . . . . . . FFF3  65523  LBL WORD  vectors.a65:43
JLTLK. . . . . . . . . . . . . . F314  62228  LBL WORD  close.a65:118
JPL2 . . . . . . . . . . . . . . E871  59505  LBL WORD  editor1.a65:536
JPL3 . . . . . . . . . . . . . . E7CB  59339  LBL WORD  editor1.a65:446
JPL4 . . . . . . . . . . . . . . E7A8  59304  LBL WORD  editor1.a65:428
JPL5 . . . . . . . . . . . . . . E89E  59550  LBL WORD  editor1.a65:559
JPLOT. . . . . . . . . . . . . . FFF0  65520  LBL WORD  vectors.a65:42
JRAD2. . . . . . . . . . . . . . F988  63880  LBL WORD  read.a65:81
JSCROG . . . . . . . . . . . . . FFED  65517  LBL WORD  vectors.a65:41
JTG10. . . . . . . . . . . . . . F1A9  61865  LBL WORD  chanio.a65:102
JTG35. . . . . . . . . . . . . . F18D  61837  LBL WORD  chanio.a65:79
JTG36. . . . . . . . . . . . . . F193  61843  LBL WORD  chanio.a65:85
JTG37. . . . . . . . . . . . . . F196  61846  LBL WORD  chanio.a65:88
JTGET. . . . . . . . . . . . . . F199  61849  LBL WORD  chanio.a65:94
JTP10. . . . . . . . . . . . . . F1F8  61944  LBL WORD  chanio.a65:186
JTP20. . . . . . . . . . . . . . F80D  63501  LBL WORD  tapectrl.a65:2
JX050. . . . . . . . . . . . . . F298  62104  LBL WORD  close.a65:23
JX115. . . . . . . . . . . . . . F2C8  62152  LBL WORD  close.a65:60
JX117. . . . . . . . . . . . . . F2E0  62176  LBL WORD  close.a65:74
JX120. . . . . . . . . . . . . . F2EE  62190  LBL WORD  close.a65:84
JX150. . . . . . . . . . . . . . F2F1  62193  LBL WORD  close.a65:90
JX170. . . . . . . . . . . . . . F30D  62221  LBL WORD  close.a65:110
JX175. . . . . . . . . . . . . . F30E  62222  LBL WORD  close.a65:111
JX310. . . . . . . . . . . . . . F216  61974  LBL WORD  openchan.a65:23
JX315. . . . . . . . . . . . . . F22A  61994  LBL WORD  openchan.a65:40
JX320. . . . . . . . . . . . . . F233  62003  LBL WORD  openchan.a65:46
JX330. . . . . . . . . . . . . . F237  62007  LBL WORD  openchan.a65:53
JX340. . . . . . . . . . . . . . F245  62021  LBL WORD  openchan.a65:61
JX350. . . . . . . . . . . . . . F248  62024  LBL WORD  openchan.a65:63
JX600. . . . . . . . . . . . . . F316  62230  LBL WORD  close.a65:119
JX750. . . . . . . . . . . . . . F33C  62268  LBL WORD  clall.a65:25
JXRMV. . . . . . . . . . . . . . F2F2  62194  LBL WORD  close.a65:94
JZ100. . . . . . . . . . . . . . F31F  62239  LBL WORD  close.a65:127
JZ101. . . . . . . . . . . . . . F32E  62254  LBL WORD  close.a65:133
KEEPIT . . . . . . . . . . . . . E7D4  59348  LBL WORD  editor1.a65:456
KERNAL_START . . . . . . . . . . E500  58624  VAR WORD  kernal.a65:7
KEY. . . . . . . . . . . . . . . EA31  59953  LBL WORD  editor2.a65:215
KEY3 . . . . . . . . . . . . . . EA71  60017  LBL WORD  editor2.a65:250
KEY4 . . . . . . . . . . . . . . EA61  60001  LBL WORD  editor2.a65:239
KEY5 . . . . . . . . . . . . . . EA5C  59996  LBL WORD  editor2.a65:236
KEYCOD . . . . . . . . . . . . . EB79  60281  LBL WORD  editor3.a65:2
KEYD . . . . . . . . . . . . . . 0277    631  LBL WORD  declare.a65:131
KEYLG2 . . . . . . . . . . . . . EB64  60260  LBL WORD  editor2.a65:387
KEYLOG . . . . . . . . . . . . . 028F    655  LBL WORD  declare.a65:147
KEYTAB . . . . . . . . . . . . .   F5    245  LBL BYTE  declare.a65:111
KIKA26 . . . . . . . . . . . . . 02A3    675  LBL WORD  declare.a65:185
KL2. . . . . . . . . . . . . . . EA7B  60027  LBL WORD  editor2.a65:259
KL24 . . . . . . . . . . . . . . EA79  60025  LBL WORD  editor2.a65:256
KOUNT. . . . . . . . . . . . . . 028B    651  LBL WORD  declare.a65:143
KPREND . . . . . . . . . . . . . EA7E  60030  LBL WORD  editor2.a65:261
LA . . . . . . . . . . . . . . .   B8    184  LBL BYTE  declare.a65:71
LAT. . . . . . . . . . . . . . . 0259    601  LBL WORD  declare.a65:125
LBERR. . . . . . . . . . . . . .   08      8  VAR BYTE  read.a65:228
LD10 . . . . . . . . . . . . . . F4AF  62639  LBL WORD  load.a65:29
LD100. . . . . . . . . . . . . . F533  62771  LBL WORD  load.a65:111
LD102. . . . . . . . . . . . . . F539  62777  LBL WORD  load.a65:116
LD104. . . . . . . . . . . . . . F541  62785  LBL WORD  load.a65:119
LD110. . . . . . . . . . . . . . F5C7  62919  LBL WORD  load.a65:210
LD112. . . . . . . . . . . . . . F549  62793  LBL WORD  load.a65:123
LD115. . . . . . . . . . . . . . F5D1  62929  LBL WORD  load.a65:216
LD150. . . . . . . . . . . . . . F556  62806  LBL WORD  load.a65:130
LD170. . . . . . . . . . . . . . F55D  62813  LBL WORD  load.a65:134
LD177. . . . . . . . . . . . . . F56C  62828  LBL WORD  load.a65:145
LD178. . . . . . . . . . . . . . F579  62841  LBL WORD  load.a65:153
LD179. . . . . . . . . . . . . . F57D  62845  LBL WORD  load.a65:156
LD180. . . . . . . . . . . . . . F5A9  62889  LBL WORD  load.a65:183
LD190. . . . . . . . . . . . . . F5AE  62894  LBL WORD  load.a65:190
LD20 . . . . . . . . . . . . . . F4B2  62642  LBL WORD  load.a65:31
LD25 . . . . . . . . . . . . . . F4BF  62655  LBL WORD  load.a65:42
LD30 . . . . . . . . . . . . . . F4F0  62704  LBL WORD  load.a65:69
LD40 . . . . . . . . . . . . . . F4F3  62707  LBL WORD  load.a65:71
LD410. . . . . . . . . . . . . . F5DA  62938  LBL WORD  load.a65:226
LD45 . . . . . . . . . . . . . . F501  62721  LBL WORD  load.a65:80
LD50 . . . . . . . . . . . . . . F51C  62748  LBL WORD  load.a65:96
LD60 . . . . . . . . . . . . . . F51E  62750  LBL WORD  load.a65:97
LD64 . . . . . . . . . . . . . . F524  62756  LBL WORD  load.a65:100
LD90 . . . . . . . . . . . . . . F530  62768  LBL WORD  load.a65:107
LDAD1. . . . . . . . . . . . . . F7D7  63447  LBL WORD  tapefile.a65:166
LDTB1. . . . . . . . . . . . . .   D9    217  LBL BYTE  declare.a65:109
LDTB2. . . . . . . . . . . . . . ECF0  60656  LBL WORD  editor3.a65:171
LDTND. . . . . . . . . . . . . .   98    152  LBL BYTE  declare.a65:27
LEXIT. . . . . . . . . . . . . . EC72  60530  LBL WORD  editor3.a65:107
LINTMP . . . . . . . . . . . . . 02A5    677  LBL WORD  declare.a65:187
LINZ0. . . . . . . . . . . . . . 0400   1024  VAR WORD  editor3.a65:143
LINZ1. . . . . . . . . . . . . . 0428   1064  VAR WORD  editor3.a65:144
LINZ10 . . . . . . . . . . . . . 0590   1424  VAR WORD  editor3.a65:153
LINZ11 . . . . . . . . . . . . . 05B8   1464  VAR WORD  editor3.a65:154
LINZ12 . . . . . . . . . . . . . 05E0   1504  VAR WORD  editor3.a65:155
LINZ13 . . . . . . . . . . . . . 0608   1544  VAR WORD  editor3.a65:156
LINZ14 . . . . . . . . . . . . . 0630   1584  VAR WORD  editor3.a65:157
LINZ15 . . . . . . . . . . . . . 0658   1624  VAR WORD  editor3.a65:158
LINZ16 . . . . . . . . . . . . . 0680   1664  VAR WORD  editor3.a65:159
LINZ17 . . . . . . . . . . . . . 06A8   1704  VAR WORD  editor3.a65:160
LINZ18 . . . . . . . . . . . . . 06D0   1744  VAR WORD  editor3.a65:161
LINZ19 . . . . . . . . . . . . . 06F8   1784  VAR WORD  editor3.a65:162
LINZ2. . . . . . . . . . . . . . 0450   1104  VAR WORD  editor3.a65:145
LINZ20 . . . . . . . . . . . . . 0720   1824  VAR WORD  editor3.a65:163
LINZ21 . . . . . . . . . . . . . 0748   1864  VAR WORD  editor3.a65:164
LINZ22 . . . . . . . . . . . . . 0770   1904  VAR WORD  editor3.a65:165
LINZ23 . . . . . . . . . . . . . 0798   1944  VAR WORD  editor3.a65:166
LINZ24 . . . . . . . . . . . . . 07C0   1984  VAR WORD  editor3.a65:167
LINZ3. . . . . . . . . . . . . . 0478   1144  VAR WORD  editor3.a65:146
LINZ4. . . . . . . . . . . . . . 04A0   1184  VAR WORD  editor3.a65:147
LINZ5. . . . . . . . . . . . . . 04C8   1224  VAR WORD  editor3.a65:148
LINZ6. . . . . . . . . . . . . . 04F0   1264  VAR WORD  editor3.a65:149
LINZ7. . . . . . . . . . . . . . 0518   1304  VAR WORD  editor3.a65:150
LINZ8. . . . . . . . . . . . . . 0540   1344  VAR WORD  editor3.a65:151
LINZ9. . . . . . . . . . . . . . 0568   1384  VAR WORD  editor3.a65:152
LIST1. . . . . . . . . . . . . . ED11  60689  LBL WORD  serial40.a65:11
LIST2. . . . . . . . . . . . . . ED20  60704  LBL WORD  serial40.a65:28
LIST5. . . . . . . . . . . . . . ED2E  60718  LBL WORD  serial40.a65:36
LISTN. . . . . . . . . . . . . . ED0C  60684  LBL WORD  serial40.a65:9
LLEN . . . . . . . . . . . . . .   28     40  VAR BYTE  declare.a65:279
LLEN2. . . . . . . . . . . . . .   50     80  VAR BYTE  declare.a65:280
LNMX . . . . . . . . . . . . . .   D5    213  LBL BYTE  declare.a65:105
LOAD . . . . . . . . . . . . . . F4A2  62626  LBL WORD  load.a65:20
LOADSP . . . . . . . . . . . . . F49E  62622  LBL WORD  load.a65:18
LOCK . . . . . . . . . . . . . . EC5E  60510  LBL WORD  editor3.a65:95
LODING . . . . . . . . . . . . . F5D2  62930  LBL WORD  load.a65:222
LOOKUP . . . . . . . . . . . . . F30F  62223  LBL WORD  close.a65:115
LOOP2. . . . . . . . . . . . . . E6A8  59048  LBL WORD  editor1.a65:283
LOOP3. . . . . . . . . . . . . . E5CD  58829  LBL WORD  editor1.a65:165
LOOP4. . . . . . . . . . . . . . E5CA  58826  LBL WORD  editor1.a65:164
LOOP5. . . . . . . . . . . . . . E632  58930  LBL WORD  editor1.a65:218
LOP2 . . . . . . . . . . . . . . E6B0  59056  LBL WORD  editor1.a65:288
LOP5 . . . . . . . . . . . . . . E63A  58938  LBL WORD  editor1.a65:224
LOP51. . . . . . . . . . . . . . E640  58944  LBL WORD  editor1.a65:228
LOP52. . . . . . . . . . . . . . E650  58960  LBL WORD  editor1.a65:236
LOP53. . . . . . . . . . . . . . E654  58964  LBL WORD  editor1.a65:238
LOP54. . . . . . . . . . . . . . E64A  58954  LBL WORD  editor1.a65:233
LOWER. . . . . . . . . . . . . . EC44  60484  LBL WORD  editor3.a65:80
LP1. . . . . . . . . . . . . . . E5B9  58809  LBL WORD  editor1.a65:153
LP2. . . . . . . . . . . . . . . E5B4  58804  LBL WORD  editor1.a65:151
LP21 . . . . . . . . . . . . . . E5E7  58855  LBL WORD  editor1.a65:178
LP22 . . . . . . . . . . . . . . E5FE  58878  LBL WORD  editor1.a65:189
LP23 . . . . . . . . . . . . . . E5F3  58867  LBL WORD  editor1.a65:184
LPS1 . . . . . . . . . . . . . . E54D  58701  LBL WORD  editor1.a65:72
LPS2 . . . . . . . . . . . . . . E555  58709  LBL WORD  editor1.a65:77
LSTP . . . . . . . . . . . . . .   CA    202  LBL BYTE  declare.a65:94
LSTSHF . . . . . . . . . . . . . 028E    654  LBL WORD  declare.a65:146
LSTX . . . . . . . . . . . . . .   C5    197  LBL BYTE  declare.a65:88
LSXP . . . . . . . . . . . . . .   C9    201  LBL BYTE  declare.a65:93
LUKING . . . . . . . . . . . . . F5AF  62895  LBL WORD  load.a65:196
M51AJB . . . . . . . . . . . . . 0295    661  LBL WORD  declare.a65:155
M51CDR . . . . . . . . . . . . . 0294    660  LBL WORD  declare.a65:154
M51CTR . . . . . . . . . . . . . 0293    659  LBL WORD  declare.a65:153
MAXCHR . . . . . . . . . . . . .   50     80  VAR BYTE  editor1.a65:2
MEMBOT . . . . . . . . . . . . . FE34  65076  LBL WORD  init.a65:225
MEMSIZ . . . . . . . . . . . . . 0283    643  LBL WORD  declare.a65:133
MEMSTR . . . . . . . . . . . . . 0281    641  LBL WORD  declare.a65:132
MEMTCF . . . . . . . . . . . . . F47D  62589  LBL WORD  open.a65:247
MEMTOP . . . . . . . . . . . . . FE25  65061  LBL WORD  init.a65:210
MEMUSS . . . . . . . . . . . . .   C3    195  LBL BYTE  declare.a65:83
MLP4 . . . . . . . . . . . . . . E94D  59725  LBL WORD  editor2.a65:63
MLP42. . . . . . . . . . . . . . E956  59734  LBL WORD  editor2.a65:70
MODE . . . . . . . . . . . . . . 0291    657  LBL WORD  declare.a65:148
MODE1. . . . . . . . . . . . . . EB81  60289  LBL WORD  editor3.a65:23
MODE2. . . . . . . . . . . . . . EBC2  60354  LBL WORD  editor3.a65:42
MODE3. . . . . . . . . . . . . . EC03  60419  LBL WORD  editor3.a65:61
MOVOS1 . . . . . . . . . . . . . FD20  64800  LBL WORD  init.a65:55
MOVOS2 . . . . . . . . . . . . . FD27  64807  LBL WORD  init.a65:58
MS1. . . . . . . . . . . . . . . F0BD  61629  LBL WORD  msgs.a65:2
MS10 . . . . . . . . . . . . . . F106  61702  LBL WORD  msgs.a65:7
MS11 . . . . . . . . . . . . . . F10E  61710  LBL WORD  msgs.a65:8
MS17 . . . . . . . . . . . . . . F120  61728  LBL WORD  msgs.a65:10
MS18 . . . . . . . . . . . . . . F127  61735  LBL WORD  msgs.a65:11
MS21 . . . . . . . . . . . . . . F116  61718  LBL WORD  msgs.a65:9
MS5. . . . . . . . . . . . . . . F0C9  61641  LBL WORD  msgs.a65:3
MS6. . . . . . . . . . . . . . . F0D4  61652  LBL WORD  msgs.a65:4
MS7. . . . . . . . . . . . . . . F0D8  61656  LBL WORD  msgs.a65:5
MS8. . . . . . . . . . . . . . . F0EB  61675  LBL WORD  msgs.a65:6
MSG. . . . . . . . . . . . . . . F12F  61743  LBL WORD  msgs.a65:20
MSG10. . . . . . . . . . . . . . F13C  61756  LBL WORD  msgs.a65:27
MSGFLG . . . . . . . . . . . . .   9D    157  LBL BYTE  declare.a65:32
MYCH . . . . . . . . . . . . . .   BF    191  LBL BYTE  declare.a65:78
NBASIN . . . . . . . . . . . . . F157  61783  LBL WORD  chanio.a65:45
NBSOUT . . . . . . . . . . . . . F1CA  61898  LBL WORD  chanio.a65:137
NC1. . . . . . . . . . . . . . . E78B  59275  LBL WORD  editor1.a65:414
NC2. . . . . . . . . . . . . . . E792  59282  LBL WORD  editor1.a65:417
NC3. . . . . . . . . . . . . . . E697  59031  LBL WORD  editor1.a65:276
NC3W . . . . . . . . . . . . . . E785  59269  LBL WORD  editor1.a65:411
NCHKIN . . . . . . . . . . . . . F20E  61966  LBL WORD  openchan.a65:18
NCKOUT . . . . . . . . . . . . . F250  62032  LBL WORD  openchan.a65:85
NCLALL . . . . . . . . . . . . . F32F  62255  LBL WORD  clall.a65:9
NCLOSE . . . . . . . . . . . . . F291  62097  LBL WORD  close.a65:18
NCLRCH . . . . . . . . . . . . . F333  62259  LBL WORD  clall.a65:19
NCTRL. . . . . . . . . . . . . . EB6B  60267  LBL WORD  editor2.a65:393
NCX2 . . . . . . . . . . . . . . E7AD  59309  LBL WORD  editor1.a65:430
NCZ2 . . . . . . . . . . . . . . E7AA  59306  LBL WORD  editor1.a65:429
NDX. . . . . . . . . . . . . . .   C6    198  LBL BYTE  declare.a65:90
NEWCH. . . . . . . . . . . . . . FB97  64407  LBL WORD  read.a65:400
NEWLIN . . . . . . . . . . . . . E965  59749  LBL WORD  editor2.a65:82
NEWLX. . . . . . . . . . . . . . E981  59777  LBL WORD  editor2.a65:99
NGETIN . . . . . . . . . . . . . F13E  61758  LBL WORD  chanio.a65:12
NJT1 . . . . . . . . . . . . . . E731  59185  LBL WORD  editor1.a65:370
NJT8 . . . . . . . . . . . . . . E73D  59197  LBL WORD  editor1.a65:376
NJT9 . . . . . . . . . . . . . . E73F  59199  LBL WORD  editor1.a65:377
NLINES . . . . . . . . . . . . .   19     25  VAR BYTE  declare.a65:281
NLOAD. . . . . . . . . . . . . . F4A5  62629  LBL WORD  load.a65:22
NMI. . . . . . . . . . . . . . . FE43  65091  LBL WORD  rs232nmi.a65:2
NMINV. . . . . . . . . . . . . . 0318    792  LBL WORD  declare.a65:194
NMIRTI . . . . . . . . . . . . . FEB6  65206  LBL WORD  rs232nmi.a65:87
NNMI . . . . . . . . . . . . . . FE47  65095  LBL WORD  rs232nmi.a65:4
NNMI10 . . . . . . . . . . . . . FE4C  65100  LBL WORD  rs232nmi.a65:9
NNMI18 . . . . . . . . . . . . . FE56  65110  LBL WORD  rs232nmi.a65:14
NNMI19 . . . . . . . . . . . . . FE5E  65118  LBL WORD  rs232nmi.a65:20
NNMI20 . . . . . . . . . . . . . FE72  65138  LBL WORD  rs232nmi.a65:35
NNMI22 . . . . . . . . . . . . . FE9A  65178  LBL WORD  rs232nmi.a65:64
NNMI25 . . . . . . . . . . . . . FE9D  65181  LBL WORD  rs232nmi.a65:66
NNMI30 . . . . . . . . . . . . . FEA3  65187  LBL WORD  rs232nmi.a65:72
NNMI40 . . . . . . . . . . . . . FEAE  65198  LBL WORD  rs232nmi.a65:81
NODEV. . . . . . . . . . . . . . EDAD  60845  LBL WORD  serial40.a65:105
NOEOI. . . . . . . . . . . . . . ED5A  60762  LBL WORD  serial40.a65:60
NOPEN. . . . . . . . . . . . . . F34A  62282  LBL WORD  open.a65:17
NOTKAT . . . . . . . . . . . . . EB6B  60267  LBL WORD  editor2.a65:394
NOTONE . . . . . . . . . . . . . E63E  58942  LBL WORD  editor1.a65:226
NSAVE. . . . . . . . . . . . . . F5ED  62957  LBL WORD  save.a65:22
NSTOP. . . . . . . . . . . . . . F6ED  63213  LBL WORD  errhndl.a65:10
NTCN . . . . . . . . . . . . . . E745  59205  LBL WORD  editor1.a65:379
NTCN1. . . . . . . . . . . . . . E77E  59262  LBL WORD  editor1.a65:408
NVS. . . . . . . . . . . . . . . E699  59033  LBL WORD  editor1.a65:277
NVS1 . . . . . . . . . . . . . . E69F  59039  LBL WORD  editor1.a65:280
NWRAP. . . . . . . . . . . . . .   02      2  VAR BYTE  editor1.a65:3
NXLN . . . . . . . . . . . . . . E87C  59516  LBL WORD  editor1.a65:542
NXLN1. . . . . . . . . . . . . . E888  59528  LBL WORD  editor1.a65:548
NXLN2. . . . . . . . . . . . . . E880  59520  LBL WORD  editor1.a65:544
NXT1 . . . . . . . . . . . . . . E891  59537  LBL WORD  editor1.a65:552
NXT2 . . . . . . . . . . . . . . E84C  59468  LBL WORD  editor1.a65:519
NXT3 . . . . . . . . . . . . . . E693  59027  LBL WORD  editor1.a65:274
NXT33. . . . . . . . . . . . . . E691  59025  LBL WORD  editor1.a65:273
NXT6 . . . . . . . . . . . . . . E854  59476  LBL WORD  editor1.a65:523
NXT61. . . . . . . . . . . . . . E86A  59498  LBL WORD  editor1.a65:533
NXTBIT . . . . . . . . . . . . .   B5    181  LBL BYTE  declare.a65:66
NXTD . . . . . . . . . . . . . . E566  58726  LBL WORD  editor1.a65:89
NXTX . . . . . . . . . . . . . . E7D4  59348  LBL WORD  editor1.a65:455
NXTX1. . . . . . . . . . . . . . E7DC  59356  LBL WORD  editor1.a65:461
NXTXA. . . . . . . . . . . . . . E7DC  59356  LBL WORD  editor1.a65:462
OCHAR. . . . . . . . . . . . . .   BD    189  LBL BYTE  declare.a65:76
OENABL . . . . . . . . . . . . . EF3B  61243  LBL WORD  rs232trn.a65:121
OP100. . . . . . . . . . . . . . F359  62297  LBL WORD  open.a65:27
OP110. . . . . . . . . . . . . . F362  62306  LBL WORD  open.a65:33
OP150. . . . . . . . . . . . . . F384  62340  LBL WORD  open.a65:55
OP152. . . . . . . . . . . . . . F38B  62347  LBL WORD  open.a65:60
OP155. . . . . . . . . . . . . . F393  62355  LBL WORD  open.a65:65
OP160. . . . . . . . . . . . . . F3AC  62380  LBL WORD  open.a65:83
OP170. . . . . . . . . . . . . . F3AF  62383  LBL WORD  open.a65:85
OP171. . . . . . . . . . . . . . F3C2  62402  LBL WORD  open.a65:99
OP172. . . . . . . . . . . . . . F3D1  62417  LBL WORD  open.a65:112
OP175. . . . . . . . . . . . . . F3D3  62419  LBL WORD  open.a65:113
OP180. . . . . . . . . . . . . . F3D4  62420  LBL WORD  open.a65:114
OP200. . . . . . . . . . . . . . F3B8  62392  LBL WORD  open.a65:92
OP35 . . . . . . . . . . . . . . F3F6  62454  LBL WORD  open.a65:144
OP40 . . . . . . . . . . . . . . F3FC  62460  LBL WORD  open.a65:150
OP45 . . . . . . . . . . . . . . F406  62470  LBL WORD  open.a65:156
OP98 . . . . . . . . . . . . . . F351  62289  LBL WORD  open.a65:22
OPEN . . . . . . . . . . . . . . FFC0  65472  LBL WORD  vectors.a65:26
OPENI. . . . . . . . . . . . . . F3D5  62421  LBL WORD  open.a65:116
OPN020 . . . . . . . . . . . . . F40F  62479  LBL WORD  open.a65:175
OPN025 . . . . . . . . . . . . . F41D  62493  LBL WORD  open.a65:186
OPN026 . . . . . . . . . . . . . F43A  62522  LBL WORD  open.a65:206
OPN027 . . . . . . . . . . . . . F440  62528  LBL WORD  open.a65:208
OPN028 . . . . . . . . . . . . . F446  62534  LBL WORD  open.a65:210
OPN030 . . . . . . . . . . . . . F44D  62541  LBL WORD  open.a65:216
OPN050 . . . . . . . . . . . . . F45C  62556  LBL WORD  open.a65:229
OPN055 . . . . . . . . . . . . . F468  62568  LBL WORD  open.a65:236
OPN060 . . . . . . . . . . . . . F474  62580  LBL WORD  open.a65:242
OPN232 . . . . . . . . . . . . . F409  62473  LBL WORD  open.a65:169
OUTFN. . . . . . . . . . . . . . F5C1  62913  LBL WORD  load.a65:207
OUTHRE . . . . . . . . . . . . . EC5B  60507  LBL WORD  editor3.a65:93
P0010. . . . . . . . . . . . . . FF5E  65374  LBL WORD  irqfile.a65:27
PALNTS . . . . . . . . . . . . . 02A6    678  LBL WORD  declare.a65:188
PANIC. . . . . . . . . . . . . . E5A0  58784  LBL WORD  editor1.a65:134
PATCH_SIZE . . . . . . . . . . .   2D     45  VAR BYTE  kernal.a65:8
PCH. . . . . . . . . . . . . . .   02      2  LBL BYTE  declare.a65:7
PCINT. . . . . . . . . . . . . . FF5B  65371  LBL WORD  irqfile.a65:26
PCL. . . . . . . . . . . . . . .   03      3  LBL BYTE  declare.a65:8
PCNTR. . . . . . . . . . . . . .   A3    163  LBL BYTE  declare.a65:40
PIOKEY . . . . . . . . . . . . . FF6E  65390  LBL WORD  irqfile.a65:36
PLF. . . . . . . . . . . . . . .   03      3  VAR BYTE  declare.a65:273
PLOT . . . . . . . . . . . . . . E50A  58634  LBL WORD  editor1.a65:33
PLOT10 . . . . . . . . . . . . . E513  58643  LBL WORD  editor1.a65:37
PNT. . . . . . . . . . . . . . .   D1    209  LBL BYTE  declare.a65:101
PNTR . . . . . . . . . . . . . .   D3    211  LBL BYTE  declare.a65:103
POPEN. . . . . . . . . . . . . . FF2E  65326  LBL WORD  rs232nmi.a65:179
PREND. . . . . . . . . . . . . . FEBC  65212  LBL WORD  rs232nmi.a65:89
PRP. . . . . . . . . . . . . . .   B6    182  LBL BYTE  declare.a65:69
PRT. . . . . . . . . . . . . . . E716  59158  LBL WORD  editor1.a65:355
PRTY . . . . . . . . . . . . . .   9B    155  LBL BYTE  declare.a65:30
PRTYP. . . . . . . . . . . . . . E4D3  58579  LBL WORD  patches.a65:5
PTR1 . . . . . . . . . . . . . .   9E    158  LBL BYTE  declare.a65:33
PTR2 . . . . . . . . . . . . . .   9F    159  LBL BYTE  declare.a65:36
PULIND . . . . . . . . . . . . . E958  59736  LBL WORD  editor2.a65:72
PULS . . . . . . . . . . . . . . FF48  65352  LBL WORD  irqfile.a65:11
PULS1. . . . . . . . . . . . . . FF58  65368  LBL WORD  irqfile.a65:21
PUTQUE . . . . . . . . . . . . . EB3C  60220  LBL WORD  editor2.a65:361
PX4. . . . . . . . . . . . . . . E5AA  58794  LBL WORD  editor1.a65:142
QTSW . . . . . . . . . . . . . .   D4    212  LBL BYTE  declare.a65:104
QTSWC. . . . . . . . . . . . . . E684  59012  LBL WORD  editor1.a65:265
QTSWL. . . . . . . . . . . . . . E690  59024  LBL WORD  editor1.a65:271
R2D2 . . . . . . . . . . . . . .   A3    163  LBL BYTE  declare.a65:39
R6510. . . . . . . . . . . . . .   01      1  LBL BYTE  declare.a65:4
RAD2 . . . . . . . . . . . . . . FA10  64016  LBL WORD  read.a65:158
RAD2X. . . . . . . . . . . . . . FA1F  64031  LBL WORD  read.a65:166
RAD2Y. . . . . . . . . . . . . . FA18  64024  LBL WORD  read.a65:162
RAD3 . . . . . . . . . . . . . . F9D5  63957  LBL WORD  read.a65:123
RAD4 . . . . . . . . . . . . . . F9F7  63991  LBL WORD  read.a65:144
RAD5 . . . . . . . . . . . . . . F999  63897  LBL WORD  read.a65:91
RADBK. . . . . . . . . . . . . . F9D2  63954  LBL WORD  read.a65:121
RADJ . . . . . . . . . . . . . . FA60  64096  LBL WORD  read.a65:200
RADK . . . . . . . . . . . . . . FA53  64083  LBL WORD  read.a65:193
RADKX. . . . . . . . . . . . . . F9BC  63932  LBL WORD  read.a65:110
RADL . . . . . . . . . . . . . . F997  63895  LBL WORD  read.a65:90
RADP . . . . . . . . . . . . . . F9C9  63945  LBL WORD  read.a65:117
RADQ2. . . . . . . . . . . . . . FA44  64068  LBL WORD  read.a65:186
RADX2. . . . . . . . . . . . . . F993  63891  LBL WORD  read.a65:88
RAMLOC . . . . . . . . . . . . . 0800   2048  LBL WORD  declare.a65:214
RAMTAS . . . . . . . . . . . . . FD50  64848  LBL WORD  init.a65:74
RAMTBT . . . . . . . . . . . . . FD67  64871  LBL WORD  init.a65:91
RAMTZ0 . . . . . . . . . . . . . FD53  64851  LBL WORD  init.a65:76
RAMTZ1 . . . . . . . . . . . . . FD6C  64876  LBL WORD  init.a65:96
RAMTZ2 . . . . . . . . . . . . . FD6E  64878  LBL WORD  init.a65:97
RBLK . . . . . . . . . . . . . . F841  63553  LBL WORD  tapectrl.a65:38
RD10 . . . . . . . . . . . . . . FA8A  64138  LBL WORD  read.a65:247
RD12 . . . . . . . . . . . . . . FA86  64134  LBL WORD  read.a65:245
RD15 . . . . . . . . . . . . . . FA70  64112  LBL WORD  read.a65:230
RD160. . . . . . . . . . . . . . FB48  64328  LBL WORD  read.a65:353
RD161. . . . . . . . . . . . . . FB4A  64330  LBL WORD  read.a65:354
RD167. . . . . . . . . . . . . . FB5C  64348  LBL WORD  read.a65:366
RD175. . . . . . . . . . . . . . FB68  64360  LBL WORD  read.a65:373
RD180. . . . . . . . . . . . . . FB8B  64395  LBL WORD  read.a65:392
RD20 . . . . . . . . . . . . . . FA8D  64141  LBL WORD  read.a65:249
RD200. . . . . . . . . . . . . . FAA9  64169  LBL WORD  read.a65:265
RD22 . . . . . . . . . . . . . . FAA3  64163  LBL WORD  read.a65:262
RD300. . . . . . . . . . . . . . FB8E  64398  LBL WORD  read.a65:394
RD40 . . . . . . . . . . . . . . FABA  64186  LBL WORD  read.a65:274
RD52 . . . . . . . . . . . . . . FB2F  64303  LBL WORD  read.a65:338
RD55 . . . . . . . . . . . . . . FB33  64307  LBL WORD  read.a65:341
RD58 . . . . . . . . . . . . . . FB08  64264  LBL WORD  read.a65:318
RD59 . . . . . . . . . . . . . . FB3A  64314  LBL WORD  read.a65:345
RD60 . . . . . . . . . . . . . . FAC0  64192  LBL WORD  read.a65:278
RD70 . . . . . . . . . . . . . . FACE  64206  LBL WORD  read.a65:286
RD80 . . . . . . . . . . . . . . FAEB  64235  LBL WORD  read.a65:302
RD90 . . . . . . . . . . . . . . FB43  64323  LBL WORD  read.a65:350
RDBK . . . . . . . . . . . . . . F9AC  63916  LBL WORD  read.a65:102
RDBK2. . . . . . . . . . . . . . FA5D  64093  LBL WORD  read.a65:198
RDFLG. . . . . . . . . . . . . .   AA    170  LBL BYTE  declare.a65:54
RDTIM. . . . . . . . . . . . . . F6DD  63197  LBL WORD  time.a65:65
READ . . . . . . . . . . . . . . F92C  63788  LBL WORD  read.a65:35
READSS . . . . . . . . . . . . . FE07  65031  LBL WORD  init.a65:192
READST . . . . . . . . . . . . . FE1A  65050  LBL WORD  init.a65:202
RECERR . . . . . . . . . . . . . EFCA  61386  LBL WORD  rs232rcv.a65:111
REKEY. . . . . . . . . . . . . . EAE0  60128  LBL WORD  editor2.a65:317
REPDO. . . . . . . . . . . . . . EA3E  59966  LBL WORD  editor2.a65:221
RER. . . . . . . . . . . . . . .   A8    168  LBL BYTE  declare.a65:50
RESTOR . . . . . . . . . . . . . FD15  64789  LBL WORD  init.a65:46
REZ. . . . . . . . . . . . . . .   A9    169  LBL BYTE  declare.a65:52
RIBUF. . . . . . . . . . . . . .   F7    247  LBL BYTE  declare.a65:113
RIDATA . . . . . . . . . . . . .   AA    170  LBL BYTE  declare.a65:53
RIDBE. . . . . . . . . . . . . . 029B    667  LBL WORD  declare.a65:167
RIDBS. . . . . . . . . . . . . . 029C    668  LBL WORD  declare.a65:168
RINONE . . . . . . . . . . . . .   A9    169  LBL BYTE  declare.a65:51
RIPRTY . . . . . . . . . . . . .   AB    171  LBL BYTE  declare.a65:55
RJDJ . . . . . . . . . . . . . . F969  63849  LBL WORD  read.a65:65
ROBUF. . . . . . . . . . . . . .   F9    249  LBL BYTE  declare.a65:114
RODATA . . . . . . . . . . . . .   B6    182  LBL BYTE  declare.a65:68
RODBE. . . . . . . . . . . . . . 029E    670  LBL WORD  declare.a65:177
RODBS. . . . . . . . . . . . . . 029D    669  LBL WORD  declare.a65:176
ROM_START. . . . . . . . . . . . E000  57344  VAR WORD  kernal.a65:6
ROPRTY . . . . . . . . . . . . .   BD    189  LBL BYTE  declare.a65:75
ROUT1. . . . . . . . . . . . . . F9E0  63968  LBL WORD  read.a65:129
ROUT2. . . . . . . . . . . . . . F9DE  63966  LBL WORD  read.a65:128
ROWS . . . . . . . . . . . . . . DC01  56321  LBL WORD  declare.a65:231
RPT10. . . . . . . . . . . . . . EAF0  60144  LBL WORD  editor2.a65:325
RPT20. . . . . . . . . . . . . . EB0D  60173  LBL WORD  editor2.a65:339
RPT40. . . . . . . . . . . . . . EB17  60183  LBL WORD  editor2.a65:343
RPTFLG . . . . . . . . . . . . . 028A    650  LBL WORD  declare.a65:142
RSODNE . . . . . . . . . . . . . EF39  61241  LBL WORD  rs232trn.a65:119
RSP232 . . . . . . . . . . . . . F0A4  61604  LBL WORD  rs232io.a65:168
RSPEXT . . . . . . . . . . . . . EEE7  61159  LBL WORD  rs232trn.a65:59
RSPNO. . . . . . . . . . . . . . EEF2  61170  LBL WORD  rs232trn.a65:65
RSPOFF . . . . . . . . . . . . . F0AA  61610  LBL WORD  rs232io.a65:171
RSPOK. . . . . . . . . . . . . . F0BB  61627  LBL WORD  rs232io.a65:178
RSR018 . . . . . . . . . . . . . EF6E  61294  LBL WORD  rs232rcv.a65:42
RSR020 . . . . . . . . . . . . . EF70  61296  LBL WORD  rs232rcv.a65:43
RSR030 . . . . . . . . . . . . . EF97  61335  LBL WORD  rs232rcv.a65:74
RSR031 . . . . . . . . . . . . . EFA9  61353  LBL WORD  rs232rcv.a65:84
RSR032 . . . . . . . . . . . . . EFB1  61361  LBL WORD  rs232rcv.a65:90
RSR050 . . . . . . . . . . . . . EFC5  61381  LBL WORD  rs232rcv.a65:106
RSR060 . . . . . . . . . . . . . EFDB  61403  LBL WORD  rs232rcv.a65:122
RSRABL . . . . . . . . . . . . . EF7E  61310  LBL WORD  rs232rcv.a65:54
RSRCVR . . . . . . . . . . . . . EF59  61273  LBL WORD  rs232rcv.a65:18
RSREXT . . . . . . . . . . . . . EF6D  61293  LBL WORD  rs232rcv.a65:38
RSRSXT . . . . . . . . . . . . . EF8B  61323  LBL WORD  rs232rcv.a65:60
RSRTRT . . . . . . . . . . . . . EF90  61328  LBL WORD  rs232rcv.a65:65
RSSTAT . . . . . . . . . . . . . 0297    663  LBL WORD  declare.a65:156
RST005 . . . . . . . . . . . . . EEC8  61128  LBL WORD  rs232trn.a65:32
RST010 . . . . . . . . . . . . . EED7  61143  LBL WORD  rs232trn.a65:48
RST030 . . . . . . . . . . . . . EEF6  61174  LBL WORD  rs232trn.a65:69
RST040 . . . . . . . . . . . . . EEFC  61180  LBL WORD  rs232trn.a65:73
RST050 . . . . . . . . . . . . . EF00  61184  LBL WORD  rs232trn.a65:78
RST060 . . . . . . . . . . . . . EF13  61203  LBL WORD  rs232trn.a65:94
RST070 . . . . . . . . . . . . . EF1C  61212  LBL WORD  rs232trn.a65:98
RST080 . . . . . . . . . . . . . EF1E  61214  LBL WORD  rs232trn.a65:100
RSTBGN . . . . . . . . . . . . . EF06  61190  LBL WORD  rs232trn.a65:85
RSTEXT . . . . . . . . . . . . . EED1  61137  LBL WORD  rs232trn.a65:40
RSTOA. . . . . . . . . . . . . . F1FC  61948  LBL WORD  chanio.a65:191
RSTOR. . . . . . . . . . . . . . F1FD  61949  LBL WORD  chanio.a65:192
RSTOR1 . . . . . . . . . . . . . F207  61959  LBL WORD  chanio.a65:199
RSTRAB . . . . . . . . . . . . . EEBB  61115  LBL WORD  rs232trn.a65:23
RSWEXT . . . . . . . . . . . . . EEE6  61158  LBL WORD  rs232trn.a65:57
RUNTB. . . . . . . . . . . . . . ECE7  60647  LBL WORD  editor3.a65:141
RVS. . . . . . . . . . . . . . .   C7    199  LBL BYTE  declare.a65:91
SA . . . . . . . . . . . . . . .   B9    185  LBL BYTE  declare.a65:72
SAH. . . . . . . . . . . . . . .   AD    173  LBL BYTE  declare.a65:58
SAL. . . . . . . . . . . . . . .   AC    172  LBL BYTE  declare.a65:57
SAT. . . . . . . . . . . . . . . 026D    621  LBL WORD  declare.a65:127
SAVE . . . . . . . . . . . . . . F5EA  62954  LBL WORD  save.a65:21
SAVESP . . . . . . . . . . . . . F5DD  62941  LBL WORD  save.a65:13
SAVING . . . . . . . . . . . . . F68F  63119  LBL WORD  save.a65:113
SBERR. . . . . . . . . . . . . .   04      4  VAR BYTE  read.a65:227
SCATN. . . . . . . . . . . . . . EDBE  60862  LBL WORD  serial40.a65:123
SCCL . . . . . . . . . . . . . . E874  59508  LBL WORD  editor1.a65:537
SCD10. . . . . . . . . . . . . . E98F  59791  LBL WORD  editor2.a65:108
SCD20. . . . . . . . . . . . . . E9D4  59860  LBL WORD  editor2.a65:147
SCN20. . . . . . . . . . . . . . EAA8  60072  LBL WORD  editor2.a65:286
SCN22. . . . . . . . . . . . . . EAAB  60075  LBL WORD  editor2.a65:288
SCN30. . . . . . . . . . . . . . EAB3  60083  LBL WORD  editor2.a65:291
SCNKEY . . . . . . . . . . . . . EA87  60039  LBL WORD  editor2.a65:271
SCNOUT . . . . . . . . . . . . . EAFB  60155  LBL WORD  editor2.a65:330
SCNRTS . . . . . . . . . . . . . EB42  60226  LBL WORD  editor2.a65:365
SCOLOR . . . . . . . . . . . . . EA24  59940  LBL WORD  editor2.a65:207
SCR10. . . . . . . . . . . . . . E8FF  59647  LBL WORD  editor2.a65:19
SCR40. . . . . . . . . . . . . . E9A6  59814  LBL WORD  editor2.a65:118
SCR41. . . . . . . . . . . . . . E913  59667  LBL WORD  editor2.a65:30
SCRD19 . . . . . . . . . . . . . E9BA  59834  LBL WORD  editor2.a65:129
SCRD21 . . . . . . . . . . . . . E9AB  59819  LBL WORD  editor2.a65:121
SCRD22 . . . . . . . . . . . . . E9BF  59839  LBL WORD  editor2.a65:132
SCRL3. . . . . . . . . . . . . . E922  59682  LBL WORD  editor2.a65:39
SCRL5. . . . . . . . . . . . . . E918  59672  LBL WORD  editor2.a65:34
SCRLIN . . . . . . . . . . . . . E9C8  59848  LBL WORD  editor2.a65:141
SCRO0. . . . . . . . . . . . . . E8F6  59638  LBL WORD  editor2.a65:15
SCROL. . . . . . . . . . . . . . E8EA  59626  LBL WORD  editor2.a65:4
SCRORG . . . . . . . . . . . . . E505  58629  LBL WORD  editor1.a65:27
SECND. . . . . . . . . . . . . . EDB9  60857  LBL WORD  serial40.a65:118
SETBOT . . . . . . . . . . . . . FE3C  65084  LBL WORD  init.a65:234
SETLFS . . . . . . . . . . . . . FE00  65024  LBL WORD  init.a65:187
SETMSG . . . . . . . . . . . . . FE18  65048  LBL WORD  init.a65:201
SETNAM . . . . . . . . . . . . . FDF9  65017  LBL WORD  init.a65:182
SETPNT . . . . . . . . . . . . . E9F0  59888  LBL WORD  editor2.a65:172
SETTIM . . . . . . . . . . . . . F6E4  63204  LBL WORD  time.a65:70
SETTMO . . . . . . . . . . . . . FE21  65057  LBL WORD  init.a65:207
SETTOP . . . . . . . . . . . . . FE2D  65069  LBL WORD  init.a65:219
SFDX . . . . . . . . . . . . . .   CB    203  LBL BYTE  declare.a65:95
SHCNH. . . . . . . . . . . . . .   AB    171  LBL BYTE  declare.a65:56
SHCNL. . . . . . . . . . . . . .   A7    167  LBL BYTE  declare.a65:48
SHFLAG . . . . . . . . . . . . . 028D    653  LBL WORD  declare.a65:145
SHFLOG . . . . . . . . . . . . . EB48  60232  LBL WORD  editor2.a65:372
SHFOUT . . . . . . . . . . . . . EB76  60278  LBL WORD  editor2.a65:400
SIDREG . . . . . . . . . . . . . D400  54272  VAR WORD  declare.a65:223
SIMIRQ . . . . . . . . . . . . . FF43  65347  LBL WORD  irqfile.a65:5
SIXTY. . . . . . . . . . . . . . 4295  17045  VAR WORD  init.a65:179
SIXTYP . . . . . . . . . . . . . 4025  16421  VAR WORD  init.a65:180
SIZE . . . . . . . . . . . . . . FD88  64904  LBL WORD  init.a65:113
SNSW1. . . . . . . . . . . . . .   B4    180  LBL BYTE  declare.a65:65
SP . . . . . . . . . . . . . . .   08      8  LBL BYTE  declare.a65:13
SPCK2. . . . . . . . . . . . . . EAC9  60105  LBL WORD  editor2.a65:302
SPERR. . . . . . . . . . . . . . 0010     16  VAR WORD  read.a65:225
SPMSG. . . . . . . . . . . . . . F12B  61739  LBL WORD  msgs.a65:18
SRER . . . . . . . . . . . . . . F98B  63883  LBL WORD  read.a65:83
STAH . . . . . . . . . . . . . .   C2    194  LBL BYTE  declare.a65:82
STAL . . . . . . . . . . . . . .   C1    193  LBL BYTE  declare.a65:81
START. . . . . . . . . . . . . . FCE2  64738  LBL WORD  init.a65:14
START1 . . . . . . . . . . . . . FCEF  64751  LBL WORD  init.a65:21
STATUS . . . . . . . . . . . . .   90    144  LBL BYTE  declare.a65:18
STDONE . . . . . . . . . . . . . E58C  58764  LBL WORD  editor1.a65:116
STKEY. . . . . . . . . . . . . .   91    145  LBL BYTE  declare.a65:20
STKY . . . . . . . . . . . . . . FCB8  64696  LBL WORD  write.a65:155
STOK . . . . . . . . . . . . . . E57C  58748  LBL WORD  editor1.a65:106
STOP . . . . . . . . . . . . . . FFE1  65505  LBL WORD  vectors.a65:37
STOP2. . . . . . . . . . . . . . F6FA  63226  LBL WORD  errhndl.a65:17
STOP3. . . . . . . . . . . . . . F8DC  63708  LBL WORD  tapectrl.a65:133
STOP4. . . . . . . . . . . . . . F8E1  63713  LBL WORD  tapectrl.a65:135
STT1 . . . . . . . . . . . . . . F8E2  63714  LBL WORD  tapectrl.a65:140
STT2 . . . . . . . . . . . . . . F8F7  63735  LBL WORD  tapectrl.a65:153
STT3 . . . . . . . . . . . . . . F8FE  63742  LBL WORD  tapectrl.a65:158
STT4 . . . . . . . . . . . . . . F92A  63786  LBL WORD  tapectrl.a65:177
STUPID . . . . . . . . . . . . . 02A4    676  LBL WORD  declare.a65:186
STUPT. . . . . . . . . . . . . . E56C  58732  LBL WORD  editor1.a65:95
SV10 . . . . . . . . . . . . . . F5F1  62961  LBL WORD  save.a65:25
SV100. . . . . . . . . . . . . . F659  63065  LBL WORD  save.a65:79
SV102. . . . . . . . . . . . . . F65F  63071  LBL WORD  save.a65:84
SV105. . . . . . . . . . . . . . F66C  63084  LBL WORD  save.a65:89
SV106. . . . . . . . . . . . . . F676  63094  LBL WORD  save.a65:94
SV110. . . . . . . . . . . . . . F68D  63117  LBL WORD  save.a65:107
SV115. . . . . . . . . . . . . . F68E  63118  LBL WORD  save.a65:108
SV20 . . . . . . . . . . . . . . F5F4  62964  LBL WORD  save.a65:27
SV25 . . . . . . . . . . . . . . F605  62981  LBL WORD  save.a65:37
SV30 . . . . . . . . . . . . . . F624  63012  LBL WORD  save.a65:49
SV40 . . . . . . . . . . . . . . F63A  63034  LBL WORD  save.a65:61
SV50 . . . . . . . . . . . . . . F63F  63039  LBL WORD  save.a65:63
SVXT . . . . . . . . . . . . . .   92    146  LBL BYTE  declare.a65:21
SWITCH . . . . . . . . . . . . . EB59  60249  LBL WORD  editor2.a65:381
SYNO . . . . . . . . . . . . . .   96    150  LBL BYTE  declare.a65:25
T1 . . . . . . . . . . . . . . .   9E    158  LBL BYTE  declare.a65:34
T2 . . . . . . . . . . . . . . .   9F    159  LBL BYTE  declare.a65:37
T2NMI. . . . . . . . . . . . . . FED6  65238  LBL WORD  rs232nmi.a65:118
TALK . . . . . . . . . . . . . . ED09  60681  LBL WORD  serial40.a65:4
TAPE . . . . . . . . . . . . . . F875  63605  LBL WORD  tapectrl.a65:75
TAPE1. . . . . . . . . . . . . .   B2    178  LBL BYTE  declare.a65:63
TAPEH. . . . . . . . . . . . . . F76A  63338  LBL WORD  tapefile.a65:63
TBLA0E . . . . . . . . . . . . . FD15  64789  LBL WORD  init.a65:42
TBLA0R . . . . . . . . . . . . . FD10  64784  LBL WORD  init.a65:41
TBLX . . . . . . . . . . . . . .   D6    214  LBL BYTE  declare.a65:106
TBUFFR . . . . . . . . . . . . . 033C    828  LBL WORD  declare.a65:210
TCOLOR . . . . . . . . . . . . .   0E     14  VAR BYTE  config.a65:10
TEMP . . . . . . . . . . . . . .   B1    177  LBL BYTE  declare.a65:62
TH20 . . . . . . . . . . . . . . F7A5  63397  LBL WORD  tapefile.a65:119
TH30 . . . . . . . . . . . . . . F7B7  63415  LBL WORD  tapefile.a65:131
TH40 . . . . . . . . . . . . . . F7CF  63439  LBL WORD  tapefile.a65:154
TIMB . . . . . . . . . . . . . . FE66  65126  LBL WORD  rs232nmi.a65:27
TIME . . . . . . . . . . . . . .   A0    160  LBL BYTE  declare.a65:38
TIMOUT . . . . . . . . . . . . . 0285    645  LBL WORD  declare.a65:134
TIMRB. . . . . . . . . . . . . .   19     25  VAR BYTE  declare.a65:266
TKATN. . . . . . . . . . . . . . EDCC  60876  LBL WORD  serial40.a65:133
TKATN1 . . . . . . . . . . . . . EDD6  60886  LBL WORD  serial40.a65:138
TKSA . . . . . . . . . . . . . . EDC7  60871  LBL WORD  serial40.a65:130
TMP0 . . . . . . . . . . . . . .   C1    193  LBL BYTE  declare.a65:80
TMP2 . . . . . . . . . . . . . .   C3    195  LBL BYTE  declare.a65:84
TMPC . . . . . . . . . . . . . .   9F    159  LBL BYTE  declare.a65:35
TNIF . . . . . . . . . . . . . . FC93  64659  LBL WORD  write.a65:138
TNIQ . . . . . . . . . . . . . . FCB6  64694  LBL WORD  write.a65:152
TNOF . . . . . . . . . . . . . . FCCA  64714  LBL WORD  write.a65:170
TOFROM . . . . . . . . . . . . . E9E0  59872  LBL WORD  editor2.a65:159
TP32 . . . . . . . . . . . . . . F8B5  63669  LBL WORD  tapectrl.a65:103
TP35 . . . . . . . . . . . . . . F8B7  63671  LBL WORD  tapectrl.a65:104
TP40 . . . . . . . . . . . . . . F8BE  63678  LBL WORD  tapectrl.a65:109
TRD. . . . . . . . . . . . . . . F84A  63562  LBL WORD  tapectrl.a65:45
TSTOP. . . . . . . . . . . . . . F8D0  63696  LBL WORD  tapectrl.a65:120
TVIC . . . . . . . . . . . . . . ECB9  60601  LBL WORD  editor3.a65:136
TWRT . . . . . . . . . . . . . . F867  63591  LBL WORD  tapectrl.a65:65
TWRT2. . . . . . . . . . . . . . F86B  63595  LBL WORD  tapectrl.a65:67
TWRT3. . . . . . . . . . . . . . F86E  63598  LBL WORD  tapectrl.a65:68
UD20 . . . . . . . . . . . . . . F69D  63133  LBL WORD  time.a65:23
UD30 . . . . . . . . . . . . . . F6A7  63143  LBL WORD  time.a65:32
UD60 . . . . . . . . . . . . . . F6BC  63164  LBL WORD  time.a65:49
UD70 . . . . . . . . . . . . . . F6CC  63180  LBL WORD  time.a65:56
UD80 . . . . . . . . . . . . . . F6DA  63194  LBL WORD  time.a65:62
UD90 . . . . . . . . . . . . . . F6DC  63196  LBL WORD  time.a65:63
UDST . . . . . . . . . . . . . . FE1C  65052  LBL WORD  init.a65:203
UDTIM. . . . . . . . . . . . . . F69B  63131  LBL WORD  time.a65:18
UHUH . . . . . . . . . . . . . . E7E3  59363  LBL WORD  editor1.a65:466
ULSET. . . . . . . . . . . . . . EC58  60504  LBL WORD  editor3.a65:92
UNLOCK . . . . . . . . . . . . . EC69  60521  LBL WORD  editor3.a65:102
UNLSN. . . . . . . . . . . . . . EDFE  60926  LBL WORD  serial40.a65:171
UNTLK. . . . . . . . . . . . . . EDEF  60911  LBL WORD  serial40.a65:161
UP2. . . . . . . . . . . . . . . E832  59442  LBL WORD  editor1.a65:506
UP5. . . . . . . . . . . . . . . E7EA  59370  LBL WORD  editor1.a65:470
UP6. . . . . . . . . . . . . . . E82D  59437  LBL WORD  editor1.a65:504
UP9. . . . . . . . . . . . . . . E829  59433  LBL WORD  editor1.a65:502
UPALIN . . . . . . . . . . . . . E847  59463  LBL WORD  editor1.a65:517
UPPER. . . . . . . . . . . . . . EC4F  60495  LBL WORD  editor3.a65:87
USER . . . . . . . . . . . . . .   F3    243  LBL BYTE  declare.a65:110
USRCMD . . . . . . . . . . . . . 032E    814  LBL WORD  declare.a65:205
VECTOR . . . . . . . . . . . . . FD1A  64794  LBL WORD  init.a65:52
VECTSE . . . . . . . . . . . . . FD50  64848  LBL WORD  init.a65:70
VECTSS . . . . . . . . . . . . . FD30  64816  LBL WORD  init.a65:64
VERCK. . . . . . . . . . . . . .   93    147  LBL BYTE  declare.a65:22
VICCOL . . . . . . . . . . . . . D800  55296  LBL WORD  declare.a65:226
VICREG . . . . . . . . . . . . . D000  53248  VAR WORD  declare.a65:220
VICSCN . . . . . . . . . . . . . 0400   1024  LBL WORD  declare.a65:213
VPAN . . . . . . . . . . . . . . E59A  58778  LBL WORD  editor1.a65:131
VPRTY. . . . . . . . . . . . . . FB72  64370  LBL WORD  read.a65:380
W1MS . . . . . . . . . . . . . . EEB3  61107  LBL WORD  serial40.a65:286
W1MS1. . . . . . . . . . . . . . EEB6  61110  LBL WORD  serial40.a65:289
WBLK . . . . . . . . . . . . . . F864  63588  LBL WORD  tapectrl.a65:61
WHITE. . . . . . . . . . . . . .   01      1  VAR BYTE  declare.a65:282
WLGRTS . . . . . . . . . . . . . E700  59136  LBL WORD  editor1.a65:337
WLOG10 . . . . . . . . . . . . . E6F7  59127  LBL WORD  editor1.a65:333
WLOG20 . . . . . . . . . . . . . E6CD  59085  LBL WORD  editor1.a65:307
WLOG30 . . . . . . . . . . . . . E6DA  59098  LBL WORD  editor1.a65:314
WLOGIC . . . . . . . . . . . . . E6B6  59062  LBL WORD  editor1.a65:295
WREND. . . . . . . . . . . . . . FC5E  64606  LBL WORD  write.a65:111
WRITE. . . . . . . . . . . . . . FBA6  64422  LBL WORD  write.a65:9
WRNC . . . . . . . . . . . . . . FC57  64599  LBL WORD  write.a65:108
WRT1 . . . . . . . . . . . . . . FBAF  64431  LBL WORD  write.a65:14
WRT2 . . . . . . . . . . . . . . FC0C  64524  LBL WORD  write.a65:66
WRT3 . . . . . . . . . . . . . . FC09  64521  LBL WORD  write.a65:64
WRT4 . . . . . . . . . . . . . . FC4E  64590  LBL WORD  write.a65:103
WRT6 . . . . . . . . . . . . . . FC30  64560  LBL WORD  write.a65:87
WRT61. . . . . . . . . . . . . . FC2C  64556  LBL WORD  write.a65:84
WRT7 . . . . . . . . . . . . . . FC3F  64575  LBL WORD  write.a65:95
WRTBK. . . . . . . . . . . . . . FC54  64596  LBL WORD  write.a65:106
WRTL3. . . . . . . . . . . . . . FBC8  64456  LBL WORD  write.a65:26
WRTN . . . . . . . . . . . . . . FBCD  64461  LBL WORD  write.a65:34
WRTN1. . . . . . . . . . . . . . FBE3  64483  LBL WORD  write.a65:45
WRTN2. . . . . . . . . . . . . . FBF0  64496  LBL WORD  write.a65:52
WRTS . . . . . . . . . . . . . . FC16  64534  LBL WORD  write.a65:72
WRTS1. . . . . . . . . . . . . . FC22  64546  LBL WORD  write.a65:79
WRTW . . . . . . . . . . . . . . FBAD  64429  LBL WORD  write.a65:13
WRTX . . . . . . . . . . . . . . FBB1  64433  LBL WORD  write.a65:15
WRTZ . . . . . . . . . . . . . . FC6A  64618  LBL WORD  write.a65:118
XMAX . . . . . . . . . . . . . . 0289    649  LBL WORD  declare.a65:141
XR . . . . . . . . . . . . . . .   06      6  LBL BYTE  declare.a65:11
XSAV . . . . . . . . . . . . . .   97    151  LBL BYTE  declare.a65:26
YR . . . . . . . . . . . . . . .   07      7  LBL BYTE  declare.a65:12
ZZZ. . . . . . . . . . . . . . . F7D0  63440  LBL WORD  tapefile.a65:159


S Y M B O L S   B Y   V A L U E

NAME                              HEX    DEC  SYM TYPE  WHERE
FLAG_FIX_FF7E. . . . . . . . . .   00      0  VAR BYTE  config.a65:5
D6510. . . . . . . . . . . . . .   00      0  LBL BYTE  declare.a65:3
R6510. . . . . . . . . . . . . .   01      1  LBL BYTE  declare.a65:4
WHITE. . . . . . . . . . . . . .   01      1  VAR BYTE  declare.a65:282
FLAG_RRBY. . . . . . . . . . . .   01      1  VAR BYTE  config.a65:3
BLF. . . . . . . . . . . . . . .   01      1  VAR BYTE  declare.a65:271
PCH. . . . . . . . . . . . . . .   02      2  LBL BYTE  declare.a65:7
NWRAP. . . . . . . . . . . . . .   02      2  VAR BYTE  editor1.a65:3
BDF. . . . . . . . . . . . . . .   02      2  VAR BYTE  declare.a65:272
PLF. . . . . . . . . . . . . . .   03      3  VAR BYTE  declare.a65:273
PCL. . . . . . . . . . . . . . .   03      3  LBL BYTE  declare.a65:8
BDFH . . . . . . . . . . . . . .   04      4  VAR BYTE  declare.a65:274
SBERR. . . . . . . . . . . . . .   04      4  VAR BYTE  read.a65:227
FLGS . . . . . . . . . . . . . .   04      4  LBL BYTE  declare.a65:9
ACC. . . . . . . . . . . . . . .   05      5  LBL BYTE  declare.a65:10
EOT. . . . . . . . . . . . . . .   05      5  VAR BYTE  declare.a65:270
BCOLOR . . . . . . . . . . . . .   06      6  VAR BYTE  config.a65:9
XR . . . . . . . . . . . . . . .   06      6  LBL BYTE  declare.a65:11
BLUE . . . . . . . . . . . . . .   06      6  VAR BYTE  declare.a65:283
YR . . . . . . . . . . . . . . .   07      7  LBL BYTE  declare.a65:12
LBERR. . . . . . . . . . . . . .   08      8  VAR BYTE  read.a65:228
SP . . . . . . . . . . . . . . .   08      8  LBL BYTE  declare.a65:13
INVH . . . . . . . . . . . . . .   09      9  LBL BYTE  declare.a65:14
INVL . . . . . . . . . . . . . .   0A     10  LBL BYTE  declare.a65:15
CR . . . . . . . . . . . . . . .   0D     13  VAR BYTE  declare.a65:284
TCOLOR . . . . . . . . . . . . .   0E     14  VAR BYTE  config.a65:10
FCOLOR . . . . . . . . . . . . .   0E     14  VAR BYTE  config.a65:8
SPERR. . . . . . . . . . . . . . 0010     16  VAR WORD  read.a65:225
TIMRB. . . . . . . . . . . . . .   19     25  VAR BYTE  declare.a65:266
NLINES . . . . . . . . . . . . .   19     25  VAR BYTE  declare.a65:281
CKERR. . . . . . . . . . . . . .   20     32  VAR BYTE  read.a65:226
LLEN . . . . . . . . . . . . . .   28     40  VAR BYTE  declare.a65:279
PATCH_SIZE . . . . . . . . . . .   2D     45  VAR BYTE  kernal.a65:8
LLEN2. . . . . . . . . . . . . .   50     80  VAR BYTE  declare.a65:280
MAXCHR . . . . . . . . . . . . .   50     80  VAR BYTE  editor1.a65:2
CBIT . . . . . . . . . . . . . . 0064    100  VAR WORD  rs232nmi.a65:113
STATUS . . . . . . . . . . . . .   90    144  LBL BYTE  declare.a65:18
STKEY. . . . . . . . . . . . . .   91    145  LBL BYTE  declare.a65:20
SVXT . . . . . . . . . . . . . .   92    146  LBL BYTE  declare.a65:21
VERCK. . . . . . . . . . . . . .   93    147  LBL BYTE  declare.a65:22
C3P0 . . . . . . . . . . . . . .   94    148  LBL BYTE  declare.a65:23
BSOUR. . . . . . . . . . . . . .   95    149  LBL BYTE  declare.a65:24
SYNO . . . . . . . . . . . . . .   96    150  LBL BYTE  declare.a65:25
XSAV . . . . . . . . . . . . . .   97    151  LBL BYTE  declare.a65:26
LDTND. . . . . . . . . . . . . .   98    152  LBL BYTE  declare.a65:27
DFLTN. . . . . . . . . . . . . .   99    153  LBL BYTE  declare.a65:28
DFLTO. . . . . . . . . . . . . .   9A    154  LBL BYTE  declare.a65:29
PRTY . . . . . . . . . . . . . .   9B    155  LBL BYTE  declare.a65:30
DPSW . . . . . . . . . . . . . .   9C    156  LBL BYTE  declare.a65:31
MSGFLG . . . . . . . . . . . . .   9D    157  LBL BYTE  declare.a65:32
PTR1 . . . . . . . . . . . . . .   9E    158  LBL BYTE  declare.a65:33
T1 . . . . . . . . . . . . . . .   9E    158  LBL BYTE  declare.a65:34
TMPC . . . . . . . . . . . . . .   9F    159  LBL BYTE  declare.a65:35
PTR2 . . . . . . . . . . . . . .   9F    159  LBL BYTE  declare.a65:36
T2 . . . . . . . . . . . . . . .   9F    159  LBL BYTE  declare.a65:37
TIME . . . . . . . . . . . . . .   A0    160  LBL BYTE  declare.a65:38
PCNTR. . . . . . . . . . . . . .   A3    163  LBL BYTE  declare.a65:40
R2D2 . . . . . . . . . . . . . .   A3    163  LBL BYTE  declare.a65:39
FIRT . . . . . . . . . . . . . .   A4    164  LBL BYTE  declare.a65:43
BSOUR1 . . . . . . . . . . . . .   A4    164  LBL BYTE  declare.a65:42
COUNT. . . . . . . . . . . . . .   A5    165  LBL BYTE  declare.a65:44
CNTDN. . . . . . . . . . . . . .   A5    165  LBL BYTE  declare.a65:45
BUFPT. . . . . . . . . . . . . .   A6    166  LBL BYTE  declare.a65:46
SHCNL. . . . . . . . . . . . . .   A7    167  LBL BYTE  declare.a65:48
INBIT. . . . . . . . . . . . . .   A7    167  LBL BYTE  declare.a65:47
RER. . . . . . . . . . . . . . .   A8    168  LBL BYTE  declare.a65:50
BITCI. . . . . . . . . . . . . .   A8    168  LBL BYTE  declare.a65:49
REZ. . . . . . . . . . . . . . .   A9    169  LBL BYTE  declare.a65:52
RINONE . . . . . . . . . . . . .   A9    169  LBL BYTE  declare.a65:51
RDFLG. . . . . . . . . . . . . .   AA    170  LBL BYTE  declare.a65:54
RIDATA . . . . . . . . . . . . .   AA    170  LBL BYTE  declare.a65:53
SHCNH. . . . . . . . . . . . . .   AB    171  LBL BYTE  declare.a65:56
RIPRTY . . . . . . . . . . . . .   AB    171  LBL BYTE  declare.a65:55
SAL. . . . . . . . . . . . . . .   AC    172  LBL BYTE  declare.a65:57
SAH. . . . . . . . . . . . . . .   AD    173  LBL BYTE  declare.a65:58
EAL. . . . . . . . . . . . . . .   AE    174  LBL BYTE  declare.a65:59
EAH. . . . . . . . . . . . . . .   AF    175  LBL BYTE  declare.a65:60
CMP0 . . . . . . . . . . . . . .   B0    176  LBL BYTE  declare.a65:61
TEMP . . . . . . . . . . . . . .   B1    177  LBL BYTE  declare.a65:62
TAPE1. . . . . . . . . . . . . .   B2    178  LBL BYTE  declare.a65:63
SNSW1. . . . . . . . . . . . . .   B4    180  LBL BYTE  declare.a65:65
BITTS. . . . . . . . . . . . . .   B4    180  LBL BYTE  declare.a65:64
DIFF . . . . . . . . . . . . . .   B5    181  LBL BYTE  declare.a65:67
NXTBIT . . . . . . . . . . . . .   B5    181  LBL BYTE  declare.a65:66
RODATA . . . . . . . . . . . . .   B6    182  LBL BYTE  declare.a65:68
PRP. . . . . . . . . . . . . . .   B6    182  LBL BYTE  declare.a65:69
FNLEN. . . . . . . . . . . . . .   B7    183  LBL BYTE  declare.a65:70
LA . . . . . . . . . . . . . . .   B8    184  LBL BYTE  declare.a65:71
SA . . . . . . . . . . . . . . .   B9    185  LBL BYTE  declare.a65:72
FA . . . . . . . . . . . . . . .   BA    186  LBL BYTE  declare.a65:73
FNADR. . . . . . . . . . . . . .   BB    187  LBL BYTE  declare.a65:74
OCHAR. . . . . . . . . . . . . .   BD    189  LBL BYTE  declare.a65:76
ROPRTY . . . . . . . . . . . . .   BD    189  LBL BYTE  declare.a65:75
FSBLK. . . . . . . . . . . . . .   BE    190  LBL BYTE  declare.a65:77
MYCH . . . . . . . . . . . . . .   BF    191  LBL BYTE  declare.a65:78
CAS1 . . . . . . . . . . . . . .   C0    192  LBL BYTE  declare.a65:79
BUFSZ. . . . . . . . . . . . . .   C0    192  VAR BYTE  declare.a65:275
STAL . . . . . . . . . . . . . .   C1    193  LBL BYTE  declare.a65:81
TMP0 . . . . . . . . . . . . . .   C1    193  LBL BYTE  declare.a65:80
STAH . . . . . . . . . . . . . .   C2    194  LBL BYTE  declare.a65:82
MEMUSS . . . . . . . . . . . . .   C3    195  LBL BYTE  declare.a65:83
TMP2 . . . . . . . . . . . . . .   C3    195  LBL BYTE  declare.a65:84
LSTX . . . . . . . . . . . . . .   C5    197  LBL BYTE  declare.a65:88
NDX. . . . . . . . . . . . . . .   C6    198  LBL BYTE  declare.a65:90
RVS. . . . . . . . . . . . . . .   C7    199  LBL BYTE  declare.a65:91
INDX . . . . . . . . . . . . . .   C8    200  LBL BYTE  declare.a65:92
LSXP . . . . . . . . . . . . . .   C9    201  LBL BYTE  declare.a65:93
LSTP . . . . . . . . . . . . . .   CA    202  LBL BYTE  declare.a65:94
SFDX . . . . . . . . . . . . . .   CB    203  LBL BYTE  declare.a65:95
BLNSW. . . . . . . . . . . . . .   CC    204  LBL BYTE  declare.a65:96
BLNCT. . . . . . . . . . . . . .   CD    205  LBL BYTE  declare.a65:97
GDBLN. . . . . . . . . . . . . .   CE    206  LBL BYTE  declare.a65:98
BLNON. . . . . . . . . . . . . .   CF    207  LBL BYTE  declare.a65:99
CRSW . . . . . . . . . . . . . .   D0    208  LBL BYTE  declare.a65:100
PNT. . . . . . . . . . . . . . .   D1    209  LBL BYTE  declare.a65:101
PNTR . . . . . . . . . . . . . .   D3    211  LBL BYTE  declare.a65:103
QTSW . . . . . . . . . . . . . .   D4    212  LBL BYTE  declare.a65:104
LNMX . . . . . . . . . . . . . .   D5    213  LBL BYTE  declare.a65:105
TBLX . . . . . . . . . . . . . .   D6    214  LBL BYTE  declare.a65:106
DATA . . . . . . . . . . . . . .   D7    215  LBL BYTE  declare.a65:107
INSRT. . . . . . . . . . . . . .   D8    216  LBL BYTE  declare.a65:108
LDTB1. . . . . . . . . . . . . .   D9    217  LBL BYTE  declare.a65:109
USER . . . . . . . . . . . . . .   F3    243  LBL BYTE  declare.a65:110
KEYTAB . . . . . . . . . . . . .   F5    245  LBL BYTE  declare.a65:111
RIBUF. . . . . . . . . . . . . .   F7    247  LBL BYTE  declare.a65:113
ROBUF. . . . . . . . . . . . . .   F9    249  LBL BYTE  declare.a65:114
FREKZP . . . . . . . . . . . . .   FB    251  LBL BYTE  declare.a65:115
BASZPT . . . . . . . . . . . . .   FF    255  LBL BYTE  declare.a65:116
BAD. . . . . . . . . . . . . . . 0100    256  LBL WORD  declare.a65:119
BUF. . . . . . . . . . . . . . . 0200    512  LBL WORD  declare.a65:121
LAT. . . . . . . . . . . . . . . 0259    601  LBL WORD  declare.a65:125
FAT. . . . . . . . . . . . . . . 0263    611  LBL WORD  declare.a65:126
SAT. . . . . . . . . . . . . . . 026D    621  LBL WORD  declare.a65:127
KEYD . . . . . . . . . . . . . . 0277    631  LBL WORD  declare.a65:131
MEMSTR . . . . . . . . . . . . . 0281    641  LBL WORD  declare.a65:132
MEMSIZ . . . . . . . . . . . . . 0283    643  LBL WORD  declare.a65:133
TIMOUT . . . . . . . . . . . . . 0285    645  LBL WORD  declare.a65:134
COLOR. . . . . . . . . . . . . . 0286    646  LBL WORD  declare.a65:138
GDCOL. . . . . . . . . . . . . . 0287    647  LBL WORD  declare.a65:139
HIBASE . . . . . . . . . . . . . 0288    648  LBL WORD  declare.a65:140
XMAX . . . . . . . . . . . . . . 0289    649  LBL WORD  declare.a65:141
RPTFLG . . . . . . . . . . . . . 028A    650  LBL WORD  declare.a65:142
KOUNT. . . . . . . . . . . . . . 028B    651  LBL WORD  declare.a65:143
DELAY. . . . . . . . . . . . . . 028C    652  LBL WORD  declare.a65:144
SHFLAG . . . . . . . . . . . . . 028D    653  LBL WORD  declare.a65:145
LSTSHF . . . . . . . . . . . . . 028E    654  LBL WORD  declare.a65:146
KEYLOG . . . . . . . . . . . . . 028F    655  LBL WORD  declare.a65:147
MODE . . . . . . . . . . . . . . 0291    657  LBL WORD  declare.a65:148
AUTODN . . . . . . . . . . . . . 0292    658  LBL WORD  declare.a65:149
M51CTR . . . . . . . . . . . . . 0293    659  LBL WORD  declare.a65:153
M51CDR . . . . . . . . . . . . . 0294    660  LBL WORD  declare.a65:154
M51AJB . . . . . . . . . . . . . 0295    661  LBL WORD  declare.a65:155
RSSTAT . . . . . . . . . . . . . 0297    663  LBL WORD  declare.a65:156
BITNUM . . . . . . . . . . . . . 0298    664  LBL WORD  declare.a65:157
BAUDOF . . . . . . . . . . . . . 0299    665  LBL WORD  declare.a65:158
RIDBE. . . . . . . . . . . . . . 029B    667  LBL WORD  declare.a65:167
RIDBS. . . . . . . . . . . . . . 029C    668  LBL WORD  declare.a65:168
RODBS. . . . . . . . . . . . . . 029D    669  LBL WORD  declare.a65:176
RODBE. . . . . . . . . . . . . . 029E    670  LBL WORD  declare.a65:177
IRQTMP . . . . . . . . . . . . . 029F    671  LBL WORD  declare.a65:179
ENABL. . . . . . . . . . . . . . 02A1    673  LBL WORD  declare.a65:183
CASTON . . . . . . . . . . . . . 02A2    674  LBL WORD  declare.a65:184
KIKA26 . . . . . . . . . . . . . 02A3    675  LBL WORD  declare.a65:185
STUPID . . . . . . . . . . . . . 02A4    676  LBL WORD  declare.a65:186
LINTMP . . . . . . . . . . . . . 02A5    677  LBL WORD  declare.a65:187
PALNTS . . . . . . . . . . . . . 02A6    678  LBL WORD  declare.a65:188
CINV . . . . . . . . . . . . . . 0314    788  LBL WORD  declare.a65:192
CBINV. . . . . . . . . . . . . . 0316    790  LBL WORD  declare.a65:193
NMINV. . . . . . . . . . . . . . 0318    792  LBL WORD  declare.a65:194
IOPEN. . . . . . . . . . . . . . 031A    794  LBL WORD  declare.a65:195
ICLOSE . . . . . . . . . . . . . 031C    796  LBL WORD  declare.a65:196
ICHKIN . . . . . . . . . . . . . 031E    798  LBL WORD  declare.a65:197
ICKOUT . . . . . . . . . . . . . 0320    800  LBL WORD  declare.a65:198
ICLRCH . . . . . . . . . . . . . 0322    802  LBL WORD  declare.a65:199
IBASIN . . . . . . . . . . . . . 0324    804  LBL WORD  declare.a65:200
IBSOUT . . . . . . . . . . . . . 0326    806  LBL WORD  declare.a65:201
ISTOP. . . . . . . . . . . . . . 0328    808  LBL WORD  declare.a65:202
IGETIN . . . . . . . . . . . . . 032A    810  LBL WORD  declare.a65:203
ICLALL . . . . . . . . . . . . . 032C    812  LBL WORD  declare.a65:204
USRCMD . . . . . . . . . . . . . 032E    814  LBL WORD  declare.a65:205
ILOAD. . . . . . . . . . . . . . 0330    816  LBL WORD  declare.a65:206
ISAVE. . . . . . . . . . . . . . 0332    818  LBL WORD  declare.a65:207
TBUFFR . . . . . . . . . . . . . 033C    828  LBL WORD  declare.a65:210
LINZ0. . . . . . . . . . . . . . 0400   1024  VAR WORD  editor3.a65:143
VICSCN . . . . . . . . . . . . . 0400   1024  LBL WORD  declare.a65:213
LINZ1. . . . . . . . . . . . . . 0428   1064  VAR WORD  editor3.a65:144
LINZ2. . . . . . . . . . . . . . 0450   1104  VAR WORD  editor3.a65:145
LINZ3. . . . . . . . . . . . . . 0478   1144  VAR WORD  editor3.a65:146
LINZ4. . . . . . . . . . . . . . 04A0   1184  VAR WORD  editor3.a65:147
LINZ5. . . . . . . . . . . . . . 04C8   1224  VAR WORD  editor3.a65:148
LINZ6. . . . . . . . . . . . . . 04F0   1264  VAR WORD  editor3.a65:149
LINZ7. . . . . . . . . . . . . . 0518   1304  VAR WORD  editor3.a65:150
LINZ8. . . . . . . . . . . . . . 0540   1344  VAR WORD  editor3.a65:151
LINZ9. . . . . . . . . . . . . . 0568   1384  VAR WORD  editor3.a65:152
LINZ10 . . . . . . . . . . . . . 0590   1424  VAR WORD  editor3.a65:153
LINZ11 . . . . . . . . . . . . . 05B8   1464  VAR WORD  editor3.a65:154
LINZ12 . . . . . . . . . . . . . 05E0   1504  VAR WORD  editor3.a65:155
LINZ13 . . . . . . . . . . . . . 0608   1544  VAR WORD  editor3.a65:156
LINZ14 . . . . . . . . . . . . . 0630   1584  VAR WORD  editor3.a65:157
LINZ15 . . . . . . . . . . . . . 0658   1624  VAR WORD  editor3.a65:158
LINZ16 . . . . . . . . . . . . . 0680   1664  VAR WORD  editor3.a65:159
LINZ17 . . . . . . . . . . . . . 06A8   1704  VAR WORD  editor3.a65:160
LINZ18 . . . . . . . . . . . . . 06D0   1744  VAR WORD  editor3.a65:161
LINZ19 . . . . . . . . . . . . . 06F8   1784  VAR WORD  editor3.a65:162
LINZ20 . . . . . . . . . . . . . 0720   1824  VAR WORD  editor3.a65:163
LINZ21 . . . . . . . . . . . . . 0748   1864  VAR WORD  editor3.a65:164
LINZ22 . . . . . . . . . . . . . 0770   1904  VAR WORD  editor3.a65:165
LINZ23 . . . . . . . . . . . . . 0798   1944  VAR WORD  editor3.a65:166
LINZ24 . . . . . . . . . . . . . 07C0   1984  VAR WORD  editor3.a65:167
RAMLOC . . . . . . . . . . . . . 0800   2048  LBL WORD  declare.a65:214
SIXTYP . . . . . . . . . . . . . 4025  16421  VAR WORD  init.a65:180
SIXTY. . . . . . . . . . . . . . 4295  17045  VAR WORD  init.a65:179
VICREG . . . . . . . . . . . . . D000  53248  VAR WORD  declare.a65:220
SIDREG . . . . . . . . . . . . . D400  54272  VAR WORD  declare.a65:223
VICCOL . . . . . . . . . . . . . D800  55296  LBL WORD  declare.a65:226
COLM . . . . . . . . . . . . . . DC00  56320  LBL WORD  declare.a65:229
D1PRA. . . . . . . . . . . . . . DC00  56320  LBL WORD  declare.a65:230
ROWS . . . . . . . . . . . . . . DC01  56321  LBL WORD  declare.a65:231
D1PRB. . . . . . . . . . . . . . DC01  56321  LBL WORD  declare.a65:232
D1DDRA . . . . . . . . . . . . . DC02  56322  LBL WORD  declare.a65:233
D1DDRB . . . . . . . . . . . . . DC03  56323  LBL WORD  declare.a65:234
D1T1L. . . . . . . . . . . . . . DC04  56324  LBL WORD  declare.a65:235
D1T1H. . . . . . . . . . . . . . DC05  56325  LBL WORD  declare.a65:236
D1T2L. . . . . . . . . . . . . . DC06  56326  LBL WORD  declare.a65:237
D1T2H. . . . . . . . . . . . . . DC07  56327  LBL WORD  declare.a65:238
D1TOD1 . . . . . . . . . . . . . DC08  56328  LBL WORD  declare.a65:239
D1TODS . . . . . . . . . . . . . DC09  56329  LBL WORD  declare.a65:240
D1TODM . . . . . . . . . . . . . DC0A  56330  LBL WORD  declare.a65:241
D1TODH . . . . . . . . . . . . . DC0B  56331  LBL WORD  declare.a65:242
D1SDR. . . . . . . . . . . . . . DC0C  56332  LBL WORD  declare.a65:243
D1ICR. . . . . . . . . . . . . . DC0D  56333  LBL WORD  declare.a65:244
D1CRA. . . . . . . . . . . . . . DC0E  56334  LBL WORD  declare.a65:245
D1CRB. . . . . . . . . . . . . . DC0F  56335  LBL WORD  declare.a65:246
D2PRA. . . . . . . . . . . . . . DD00  56576  LBL WORD  declare.a65:249
D2PRB. . . . . . . . . . . . . . DD01  56577  LBL WORD  declare.a65:250
D2DDRA . . . . . . . . . . . . . DD02  56578  LBL WORD  declare.a65:251
D2DDRB . . . . . . . . . . . . . DD03  56579  LBL WORD  declare.a65:252
D2T1L. . . . . . . . . . . . . . DD04  56580  LBL WORD  declare.a65:253
D2T1H. . . . . . . . . . . . . . DD05  56581  LBL WORD  declare.a65:254
D2T2L. . . . . . . . . . . . . . DD06  56582  LBL WORD  declare.a65:255
D2T2H. . . . . . . . . . . . . . DD07  56583  LBL WORD  declare.a65:256
D2TOD1 . . . . . . . . . . . . . DD08  56584  LBL WORD  declare.a65:257
D2TODS . . . . . . . . . . . . . DD09  56585  LBL WORD  declare.a65:258
D2TODM . . . . . . . . . . . . . DD0A  56586  LBL WORD  declare.a65:259
D2TODH . . . . . . . . . . . . . DD0B  56587  LBL WORD  declare.a65:260
D2SDR. . . . . . . . . . . . . . DD0C  56588  LBL WORD  declare.a65:261
D2ICR. . . . . . . . . . . . . . DD0D  56589  LBL WORD  declare.a65:262
D2CRA. . . . . . . . . . . . . . DD0E  56590  LBL WORD  declare.a65:263
D2CRB. . . . . . . . . . . . . . DD0F  56591  LBL WORD  declare.a65:264
ROM_START. . . . . . . . . . . . E000  57344  VAR WORD  kernal.a65:6
PRTYP. . . . . . . . . . . . . . E4D3  58579  LBL WORD  patches.a65:5
CPATCH . . . . . . . . . . . . . E4DA  58586  LBL WORD  patches.a65:12
FPATCH . . . . . . . . . . . . . E4E0  58592  LBL WORD  patches.a65:19
FPAT00 . . . . . . . . . . . . . E4E2  58594  LBL WORD  patches.a65:20
FPAT01 . . . . . . . . . . . . . E4EB  58603  LBL WORD  patches.a65:25
BAUDOP . . . . . . . . . . . . . E4EC  58604  LBL WORD  patches.a65:31
IOBASE . . . . . . . . . . . . . E500  58624  LBL WORD  editor1.a65:21
KERNAL_START . . . . . . . . . . E500  58624  VAR WORD  kernal.a65:7
SCRORG . . . . . . . . . . . . . E505  58629  LBL WORD  editor1.a65:27
PLOT . . . . . . . . . . . . . . E50A  58634  LBL WORD  editor1.a65:33
PLOT10 . . . . . . . . . . . . . E513  58643  LBL WORD  editor1.a65:37
CINT . . . . . . . . . . . . . . E518  58648  LBL WORD  editor1.a65:43
CLSR . . . . . . . . . . . . . . E544  58692  LBL WORD  editor1.a65:67
LPS1 . . . . . . . . . . . . . . E54D  58701  LBL WORD  editor1.a65:72
LPS2 . . . . . . . . . . . . . . E555  58709  LBL WORD  editor1.a65:77
CLEAR1 . . . . . . . . . . . . . E560  58720  LBL WORD  editor1.a65:83
NXTD . . . . . . . . . . . . . . E566  58726  LBL WORD  editor1.a65:89
STUPT. . . . . . . . . . . . . . E56C  58732  LBL WORD  editor1.a65:95
FNDSTR . . . . . . . . . . . . . E570  58736  LBL WORD  editor1.a65:98
STOK . . . . . . . . . . . . . . E57C  58748  LBL WORD  editor1.a65:106
FNDEND . . . . . . . . . . . . . E582  58754  LBL WORD  editor1.a65:110
STDONE . . . . . . . . . . . . . E58C  58764  LBL WORD  editor1.a65:116
FINPUT . . . . . . . . . . . . . E591  58769  LBL WORD  editor1.a65:123
FINPUX . . . . . . . . . . . . . E598  58776  LBL WORD  editor1.a65:126
VPAN . . . . . . . . . . . . . . E59A  58778  LBL WORD  editor1.a65:131
PANIC. . . . . . . . . . . . . . E5A0  58784  LBL WORD  editor1.a65:134
INITV. . . . . . . . . . . . . . E5A8  58792  LBL WORD  editor1.a65:141
PX4. . . . . . . . . . . . . . . E5AA  58794  LBL WORD  editor1.a65:142
LP2. . . . . . . . . . . . . . . E5B4  58804  LBL WORD  editor1.a65:151
LP1. . . . . . . . . . . . . . . E5B9  58809  LBL WORD  editor1.a65:153
LOOP4. . . . . . . . . . . . . . E5CA  58826  LBL WORD  editor1.a65:164
LOOP3. . . . . . . . . . . . . . E5CD  58829  LBL WORD  editor1.a65:165
LP21 . . . . . . . . . . . . . . E5E7  58855  LBL WORD  editor1.a65:178
LP23 . . . . . . . . . . . . . . E5F3  58867  LBL WORD  editor1.a65:184
LP22 . . . . . . . . . . . . . . E5FE  58878  LBL WORD  editor1.a65:189
CLP5 . . . . . . . . . . . . . . E606  58886  LBL WORD  editor1.a65:193
CLP6 . . . . . . . . . . . . . . E60F  58895  LBL WORD  editor1.a65:198
LOOP5. . . . . . . . . . . . . . E632  58930  LBL WORD  editor1.a65:218
LOP5 . . . . . . . . . . . . . . E63A  58938  LBL WORD  editor1.a65:224
NOTONE . . . . . . . . . . . . . E63E  58942  LBL WORD  editor1.a65:226
LOP51. . . . . . . . . . . . . . E640  58944  LBL WORD  editor1.a65:228
LOP54. . . . . . . . . . . . . . E64A  58954  LBL WORD  editor1.a65:233
LOP52. . . . . . . . . . . . . . E650  58960  LBL WORD  editor1.a65:236
LOP53. . . . . . . . . . . . . . E654  58964  LBL WORD  editor1.a65:238
CLP2 . . . . . . . . . . . . . . E65D  58973  LBL WORD  editor1.a65:242
CLP2A. . . . . . . . . . . . . . E66F  58991  LBL WORD  editor1.a65:251
CLP21. . . . . . . . . . . . . . E672  58994  LBL WORD  editor1.a65:252
CLP1 . . . . . . . . . . . . . . E674  58996  LBL WORD  editor1.a65:253
CLP7 . . . . . . . . . . . . . . E682  59010  LBL WORD  editor1.a65:262
QTSWC. . . . . . . . . . . . . . E684  59012  LBL WORD  editor1.a65:265
QTSWL. . . . . . . . . . . . . . E690  59024  LBL WORD  editor1.a65:271
NXT33. . . . . . . . . . . . . . E691  59025  LBL WORD  editor1.a65:273
NXT3 . . . . . . . . . . . . . . E693  59027  LBL WORD  editor1.a65:274
NC3. . . . . . . . . . . . . . . E697  59031  LBL WORD  editor1.a65:276
NVS. . . . . . . . . . . . . . . E699  59033  LBL WORD  editor1.a65:277
NVS1 . . . . . . . . . . . . . . E69F  59039  LBL WORD  editor1.a65:280
LOOP2. . . . . . . . . . . . . . E6A8  59048  LBL WORD  editor1.a65:283
LOP2 . . . . . . . . . . . . . . E6B0  59056  LBL WORD  editor1.a65:288
WLOGIC . . . . . . . . . . . . . E6B6  59062  LBL WORD  editor1.a65:295
WLOG20 . . . . . . . . . . . . . E6CD  59085  LBL WORD  editor1.a65:307
WLOG30 . . . . . . . . . . . . . E6DA  59098  LBL WORD  editor1.a65:314
FINDST . . . . . . . . . . . . . E6ED  59117  LBL WORD  editor1.a65:325
FINX . . . . . . . . . . . . . . E6F4  59124  LBL WORD  editor1.a65:330
WLOG10 . . . . . . . . . . . . . E6F7  59127  LBL WORD  editor1.a65:333
WLGRTS . . . . . . . . . . . . . E700  59136  LBL WORD  editor1.a65:337
BKLN . . . . . . . . . . . . . . E701  59137  LBL WORD  editor1.a65:339
BKLN1. . . . . . . . . . . . . . E70B  59147  LBL WORD  editor1.a65:346
PRT. . . . . . . . . . . . . . . E716  59158  LBL WORD  editor1.a65:355
NJT1 . . . . . . . . . . . . . . E731  59185  LBL WORD  editor1.a65:370
NJT8 . . . . . . . . . . . . . . E73D  59197  LBL WORD  editor1.a65:376
NJT9 . . . . . . . . . . . . . . E73F  59199  LBL WORD  editor1.a65:377
NTCN . . . . . . . . . . . . . . E745  59205  LBL WORD  editor1.a65:379
CNC3X. . . . . . . . . . . . . . E74C  59212  LBL WORD  editor1.a65:382
BAK1UP . . . . . . . . . . . . . E759  59225  LBL WORD  editor1.a65:388
BK1. . . . . . . . . . . . . . . E75F  59231  LBL WORD  editor1.a65:391
BK15 . . . . . . . . . . . . . . E762  59234  LBL WORD  editor1.a65:392
BK2. . . . . . . . . . . . . . . E773  59251  LBL WORD  editor1.a65:403
NTCN1. . . . . . . . . . . . . . E77E  59262  LBL WORD  editor1.a65:408
CNC3 . . . . . . . . . . . . . . E782  59266  LBL WORD  editor1.a65:410
NC3W . . . . . . . . . . . . . . E785  59269  LBL WORD  editor1.a65:411
NC1. . . . . . . . . . . . . . . E78B  59275  LBL WORD  editor1.a65:414
NC2. . . . . . . . . . . . . . . E792  59282  LBL WORD  editor1.a65:417
JPL4 . . . . . . . . . . . . . . E7A8  59304  LBL WORD  editor1.a65:428
NCZ2 . . . . . . . . . . . . . . E7AA  59306  LBL WORD  editor1.a65:429
NCX2 . . . . . . . . . . . . . . E7AD  59309  LBL WORD  editor1.a65:430
CURS10 . . . . . . . . . . . . . E7C0  59328  LBL WORD  editor1.a65:441
GOTDWN . . . . . . . . . . . . . E7C8  59336  LBL WORD  editor1.a65:445
JPL3 . . . . . . . . . . . . . . E7CB  59339  LBL WORD  editor1.a65:446
COLR1. . . . . . . . . . . . . . E7CE  59342  LBL WORD  editor1.a65:447
NXTX . . . . . . . . . . . . . . E7D4  59348  LBL WORD  editor1.a65:455
KEEPIT . . . . . . . . . . . . . E7D4  59348  LBL WORD  editor1.a65:456
NXTX1. . . . . . . . . . . . . . E7DC  59356  LBL WORD  editor1.a65:461
NXTXA. . . . . . . . . . . . . . E7DC  59356  LBL WORD  editor1.a65:462
UHUH . . . . . . . . . . . . . . E7E3  59363  LBL WORD  editor1.a65:466
UP5. . . . . . . . . . . . . . . E7EA  59370  LBL WORD  editor1.a65:470
INS3 . . . . . . . . . . . . . . E7FE  59390  LBL WORD  editor1.a65:480
INS1 . . . . . . . . . . . . . . E805  59397  LBL WORD  editor1.a65:483
INS2 . . . . . . . . . . . . . . E80A  59402  LBL WORD  editor1.a65:485
INSEXT . . . . . . . . . . . . . E826  59430  LBL WORD  editor1.a65:501
UP9. . . . . . . . . . . . . . . E829  59433  LBL WORD  editor1.a65:502
UP6. . . . . . . . . . . . . . . E82D  59437  LBL WORD  editor1.a65:504
UP2. . . . . . . . . . . . . . . E832  59442  LBL WORD  editor1.a65:506
UPALIN . . . . . . . . . . . . . E847  59463  LBL WORD  editor1.a65:517
NXT2 . . . . . . . . . . . . . . E84C  59468  LBL WORD  editor1.a65:519
NXT6 . . . . . . . . . . . . . . E854  59476  LBL WORD  editor1.a65:523
BAKBAK . . . . . . . . . . . . . E864  59492  LBL WORD  editor1.a65:531
NXT61. . . . . . . . . . . . . . E86A  59498  LBL WORD  editor1.a65:533
JPL2 . . . . . . . . . . . . . . E871  59505  LBL WORD  editor1.a65:536
SCCL . . . . . . . . . . . . . . E874  59508  LBL WORD  editor1.a65:537
NXLN . . . . . . . . . . . . . . E87C  59516  LBL WORD  editor1.a65:542
NXLN2. . . . . . . . . . . . . . E880  59520  LBL WORD  editor1.a65:544
NXLN1. . . . . . . . . . . . . . E888  59528  LBL WORD  editor1.a65:548
NXT1 . . . . . . . . . . . . . . E891  59537  LBL WORD  editor1.a65:552
JPL5 . . . . . . . . . . . . . . E89E  59550  LBL WORD  editor1.a65:559
CHKBAK . . . . . . . . . . . . . E8A1  59553  LBL WORD  editor1.a65:564
CHKLUP . . . . . . . . . . . . . E8A5  59557  LBL WORD  editor1.a65:566
BACK . . . . . . . . . . . . . . E8B0  59568  LBL WORD  editor1.a65:574
CHKDWN . . . . . . . . . . . . . E8B3  59571  LBL WORD  editor1.a65:579
DWNCHK . . . . . . . . . . . . . E8B7  59575  LBL WORD  editor1.a65:581
DNLINE . . . . . . . . . . . . . E8C2  59586  LBL WORD  editor1.a65:589
DWNBYE . . . . . . . . . . . . . E8CA  59594  LBL WORD  editor1.a65:594
CHKCOL . . . . . . . . . . . . . E8CB  59595  LBL WORD  editor1.a65:596
CHK1A. . . . . . . . . . . . . . E8CD  59597  LBL WORD  editor1.a65:598
CHK1B. . . . . . . . . . . . . . E8D6  59606  LBL WORD  editor1.a65:604
COLTAB . . . . . . . . . . . . . E8DA  59610  LBL WORD  editor1.a65:608
SCROL. . . . . . . . . . . . . . E8EA  59626  LBL WORD  editor2.a65:4
SCRO0. . . . . . . . . . . . . . E8F6  59638  LBL WORD  editor2.a65:15
SCR10. . . . . . . . . . . . . . E8FF  59647  LBL WORD  editor2.a65:19
SCR41. . . . . . . . . . . . . . E913  59667  LBL WORD  editor2.a65:30
SCRL5. . . . . . . . . . . . . . E918  59672  LBL WORD  editor2.a65:34
SCRL3. . . . . . . . . . . . . . E922  59682  LBL WORD  editor2.a65:39
MLP4 . . . . . . . . . . . . . . E94D  59725  LBL WORD  editor2.a65:63
MLP42. . . . . . . . . . . . . . E956  59734  LBL WORD  editor2.a65:70
PULIND . . . . . . . . . . . . . E958  59736  LBL WORD  editor2.a65:72
NEWLIN . . . . . . . . . . . . . E965  59749  LBL WORD  editor2.a65:82
BMT1 . . . . . . . . . . . . . . E967  59751  LBL WORD  editor2.a65:84
BMT2 . . . . . . . . . . . . . . E96C  59756  LBL WORD  editor2.a65:89
NEWLX. . . . . . . . . . . . . . E981  59777  LBL WORD  editor2.a65:99
SCD10. . . . . . . . . . . . . . E98F  59791  LBL WORD  editor2.a65:108
SCR40. . . . . . . . . . . . . . E9A6  59814  LBL WORD  editor2.a65:118
SCRD21 . . . . . . . . . . . . . E9AB  59819  LBL WORD  editor2.a65:121
SCRD19 . . . . . . . . . . . . . E9BA  59834  LBL WORD  editor2.a65:129
SCRD22 . . . . . . . . . . . . . E9BF  59839  LBL WORD  editor2.a65:132
SCRLIN . . . . . . . . . . . . . E9C8  59848  LBL WORD  editor2.a65:141
SCD20. . . . . . . . . . . . . . E9D4  59860  LBL WORD  editor2.a65:147
TOFROM . . . . . . . . . . . . . E9E0  59872  LBL WORD  editor2.a65:159
SETPNT . . . . . . . . . . . . . E9F0  59888  LBL WORD  editor2.a65:172
CLRLN. . . . . . . . . . . . . . E9FF  59903  LBL WORD  editor2.a65:182
CLR10. . . . . . . . . . . . . . EA07  59911  LBL WORD  editor2.a65:185
DSPP . . . . . . . . . . . . . . EA13  59923  LBL WORD  editor2.a65:196
DSPP2. . . . . . . . . . . . . . EA1C  59932  LBL WORD  editor2.a65:201
SCOLOR . . . . . . . . . . . . . EA24  59940  LBL WORD  editor2.a65:207
KEY. . . . . . . . . . . . . . . EA31  59953  LBL WORD  editor2.a65:215
REPDO. . . . . . . . . . . . . . EA3E  59966  LBL WORD  editor2.a65:221
KEY5 . . . . . . . . . . . . . . EA5C  59996  LBL WORD  editor2.a65:236
KEY4 . . . . . . . . . . . . . . EA61  60001  LBL WORD  editor2.a65:239
KEY3 . . . . . . . . . . . . . . EA71  60017  LBL WORD  editor2.a65:250
KL24 . . . . . . . . . . . . . . EA79  60025  LBL WORD  editor2.a65:256
KL2. . . . . . . . . . . . . . . EA7B  60027  LBL WORD  editor2.a65:259
KPREND . . . . . . . . . . . . . EA7E  60030  LBL WORD  editor2.a65:261
SCNKEY . . . . . . . . . . . . . EA87  60039  LBL WORD  editor2.a65:271
SCN20. . . . . . . . . . . . . . EAA8  60072  LBL WORD  editor2.a65:286
SCN22. . . . . . . . . . . . . . EAAB  60075  LBL WORD  editor2.a65:288
SCN30. . . . . . . . . . . . . . EAB3  60083  LBL WORD  editor2.a65:291
SPCK2. . . . . . . . . . . . . . EAC9  60105  LBL WORD  editor2.a65:302
CKUT . . . . . . . . . . . . . . EACB  60107  LBL WORD  editor2.a65:304
CKIT . . . . . . . . . . . . . . EACC  60108  LBL WORD  editor2.a65:305
CKIT1. . . . . . . . . . . . . . EADC  60124  LBL WORD  editor2.a65:315
REKEY. . . . . . . . . . . . . . EAE0  60128  LBL WORD  editor2.a65:317
RPT10. . . . . . . . . . . . . . EAF0  60144  LBL WORD  editor2.a65:325
SCNOUT . . . . . . . . . . . . . EAFB  60155  LBL WORD  editor2.a65:330
RPT20. . . . . . . . . . . . . . EB0D  60173  LBL WORD  editor2.a65:339
RPT40. . . . . . . . . . . . . . EB17  60183  LBL WORD  editor2.a65:343
CKIT2. . . . . . . . . . . . . . EB26  60198  LBL WORD  editor2.a65:350
CKIT3. . . . . . . . . . . . . . EB30  60208  LBL WORD  editor2.a65:355
PUTQUE . . . . . . . . . . . . . EB3C  60220  LBL WORD  editor2.a65:361
SCNRTS . . . . . . . . . . . . . EB42  60226  LBL WORD  editor2.a65:365
SHFLOG . . . . . . . . . . . . . EB48  60232  LBL WORD  editor2.a65:372
SWITCH . . . . . . . . . . . . . EB59  60249  LBL WORD  editor2.a65:381
KEYLG2 . . . . . . . . . . . . . EB64  60260  LBL WORD  editor2.a65:387
NCTRL. . . . . . . . . . . . . . EB6B  60267  LBL WORD  editor2.a65:393
NOTKAT . . . . . . . . . . . . . EB6B  60267  LBL WORD  editor2.a65:394
SHFOUT . . . . . . . . . . . . . EB76  60278  LBL WORD  editor2.a65:400
KEYCOD . . . . . . . . . . . . . EB79  60281  LBL WORD  editor3.a65:2
MODE1. . . . . . . . . . . . . . EB81  60289  LBL WORD  editor3.a65:23
MODE2. . . . . . . . . . . . . . EBC2  60354  LBL WORD  editor3.a65:42
MODE3. . . . . . . . . . . . . . EC03  60419  LBL WORD  editor3.a65:61
LOWER. . . . . . . . . . . . . . EC44  60484  LBL WORD  editor3.a65:80
UPPER. . . . . . . . . . . . . . EC4F  60495  LBL WORD  editor3.a65:87
ULSET. . . . . . . . . . . . . . EC58  60504  LBL WORD  editor3.a65:92
OUTHRE . . . . . . . . . . . . . EC5B  60507  LBL WORD  editor3.a65:93
LOCK . . . . . . . . . . . . . . EC5E  60510  LBL WORD  editor3.a65:95
UNLOCK . . . . . . . . . . . . . EC69  60521  LBL WORD  editor3.a65:102
LEXIT. . . . . . . . . . . . . . EC72  60530  LBL WORD  editor3.a65:107
CONTRL . . . . . . . . . . . . . EC78  60536  LBL WORD  editor3.a65:123
TVIC . . . . . . . . . . . . . . ECB9  60601  LBL WORD  editor3.a65:136
RUNTB. . . . . . . . . . . . . . ECE7  60647  LBL WORD  editor3.a65:141
LDTB2. . . . . . . . . . . . . . ECF0  60656  LBL WORD  editor3.a65:171
TALK . . . . . . . . . . . . . . ED09  60681  LBL WORD  serial40.a65:4
LISTN. . . . . . . . . . . . . . ED0C  60684  LBL WORD  serial40.a65:9
LIST1. . . . . . . . . . . . . . ED11  60689  LBL WORD  serial40.a65:11
LIST2. . . . . . . . . . . . . . ED20  60704  LBL WORD  serial40.a65:28
LIST5. . . . . . . . . . . . . . ED2E  60718  LBL WORD  serial40.a65:36
ISOURA . . . . . . . . . . . . . ED36  60726  LBL WORD  serial40.a65:41
ISOUR. . . . . . . . . . . . . . ED40  60736  LBL WORD  serial40.a65:46
ISR02. . . . . . . . . . . . . . ED50  60752  LBL WORD  serial40.a65:54
ISR03. . . . . . . . . . . . . . ED55  60757  LBL WORD  serial40.a65:57
NOEOI. . . . . . . . . . . . . . ED5A  60762  LBL WORD  serial40.a65:60
ISR01. . . . . . . . . . . . . . ED66  60774  LBL WORD  serial40.a65:69
ISRHI. . . . . . . . . . . . . . ED7A  60794  LBL WORD  serial40.a65:80
ISRCLK . . . . . . . . . . . . . ED7D  60797  LBL WORD  serial40.a65:81
ISR04. . . . . . . . . . . . . . ED9F  60831  LBL WORD  serial40.a65:97
NODEV. . . . . . . . . . . . . . EDAD  60845  LBL WORD  serial40.a65:105
FRMERR . . . . . . . . . . . . . EDB0  60848  LBL WORD  serial40.a65:108
CSBERR . . . . . . . . . . . . . EDB2  60850  LBL WORD  serial40.a65:110
SECND. . . . . . . . . . . . . . EDB9  60857  LBL WORD  serial40.a65:118
SCATN. . . . . . . . . . . . . . EDBE  60862  LBL WORD  serial40.a65:123
TKSA . . . . . . . . . . . . . . EDC7  60871  LBL WORD  serial40.a65:130
TKATN. . . . . . . . . . . . . . EDCC  60876  LBL WORD  serial40.a65:133
TKATN1 . . . . . . . . . . . . . EDD6  60886  LBL WORD  serial40.a65:138
CIOUT. . . . . . . . . . . . . . EDDD  60893  LBL WORD  serial40.a65:145
CI2. . . . . . . . . . . . . . . EDE6  60902  LBL WORD  serial40.a65:152
CI4. . . . . . . . . . . . . . . EDEB  60907  LBL WORD  serial40.a65:155
UNTLK. . . . . . . . . . . . . . EDEF  60911  LBL WORD  serial40.a65:161
UNLSN. . . . . . . . . . . . . . EDFE  60926  LBL WORD  serial40.a65:171
DLABYE . . . . . . . . . . . . . EE03  60931  LBL WORD  serial40.a65:175
DLADLH . . . . . . . . . . . . . EE06  60934  LBL WORD  serial40.a65:178
DLAD00 . . . . . . . . . . . . . EE09  60937  LBL WORD  serial40.a65:180
ACPTR. . . . . . . . . . . . . . EE13  60947  LBL WORD  serial40.a65:188
ACP00A . . . . . . . . . . . . . EE1B  60955  LBL WORD  serial40.a65:193
EOIACP . . . . . . . . . . . . . EE20  60960  LBL WORD  serial40.a65:196
ACP00. . . . . . . . . . . . . . EE30  60976  LBL WORD  serial40.a65:203
ACP00B . . . . . . . . . . . . . EE3E  60990  LBL WORD  serial40.a65:210
ACP00C . . . . . . . . . . . . . EE47  60999  LBL WORD  serial40.a65:217
ACP01. . . . . . . . . . . . . . EE56  61014  LBL WORD  serial40.a65:226
ACP03. . . . . . . . . . . . . . EE5A  61018  LBL WORD  serial40.a65:229
ACP03A . . . . . . . . . . . . . EE67  61031  LBL WORD  serial40.a65:236
ACP04. . . . . . . . . . . . . . EE80  61056  LBL WORD  serial40.a65:250
CLKHI. . . . . . . . . . . . . . EE85  61061  LBL WORD  serial40.a65:255
CLKLO. . . . . . . . . . . . . . EE8E  61070  LBL WORD  serial40.a65:261
DATAHI . . . . . . . . . . . . . EE97  61079  LBL WORD  serial40.a65:268
DATALO . . . . . . . . . . . . . EEA0  61088  LBL WORD  serial40.a65:274
DEBPIA . . . . . . . . . . . . . EEA9  61097  LBL WORD  serial40.a65:280
W1MS . . . . . . . . . . . . . . EEB3  61107  LBL WORD  serial40.a65:286
W1MS1. . . . . . . . . . . . . . EEB6  61110  LBL WORD  serial40.a65:289
RSTRAB . . . . . . . . . . . . . EEBB  61115  LBL WORD  rs232trn.a65:23
RST005 . . . . . . . . . . . . . EEC8  61128  LBL WORD  rs232trn.a65:32
RSTEXT . . . . . . . . . . . . . EED1  61137  LBL WORD  rs232trn.a65:40
RST010 . . . . . . . . . . . . . EED7  61143  LBL WORD  rs232trn.a65:48
RSWEXT . . . . . . . . . . . . . EEE6  61158  LBL WORD  rs232trn.a65:57
RSPEXT . . . . . . . . . . . . . EEE7  61159  LBL WORD  rs232trn.a65:59
RSPNO. . . . . . . . . . . . . . EEF2  61170  LBL WORD  rs232trn.a65:65
RST030 . . . . . . . . . . . . . EEF6  61174  LBL WORD  rs232trn.a65:69
RST040 . . . . . . . . . . . . . EEFC  61180  LBL WORD  rs232trn.a65:73
RST050 . . . . . . . . . . . . . EF00  61184  LBL WORD  rs232trn.a65:78
RSTBGN . . . . . . . . . . . . . EF06  61190  LBL WORD  rs232trn.a65:85
RST060 . . . . . . . . . . . . . EF13  61203  LBL WORD  rs232trn.a65:94
RST070 . . . . . . . . . . . . . EF1C  61212  LBL WORD  rs232trn.a65:98
RST080 . . . . . . . . . . . . . EF1E  61214  LBL WORD  rs232trn.a65:100
DSRERR . . . . . . . . . . . . . EF2E  61230  LBL WORD  rs232trn.a65:111
CTSERR . . . . . . . . . . . . . EF31  61233  LBL WORD  rs232trn.a65:113
RSODNE . . . . . . . . . . . . . EF39  61241  LBL WORD  rs232trn.a65:119
OENABL . . . . . . . . . . . . . EF3B  61243  LBL WORD  rs232trn.a65:121
BITCNT . . . . . . . . . . . . . EF4A  61258  LBL WORD  rs232trn.a65:131
BIT010 . . . . . . . . . . . . . EF54  61268  LBL WORD  rs232trn.a65:136
BIT020 . . . . . . . . . . . . . EF58  61272  LBL WORD  rs232trn.a65:139
RSRCVR . . . . . . . . . . . . . EF59  61273  LBL WORD  rs232rcv.a65:18
RSREXT . . . . . . . . . . . . . EF6D  61293  LBL WORD  rs232rcv.a65:38
RSR018 . . . . . . . . . . . . . EF6E  61294  LBL WORD  rs232rcv.a65:42
RSR020 . . . . . . . . . . . . . EF70  61296  LBL WORD  rs232rcv.a65:43
RSRABL . . . . . . . . . . . . . EF7E  61310  LBL WORD  rs232rcv.a65:54
RSRSXT . . . . . . . . . . . . . EF8B  61323  LBL WORD  rs232rcv.a65:60
RSRTRT . . . . . . . . . . . . . EF90  61328  LBL WORD  rs232rcv.a65:65
RSR030 . . . . . . . . . . . . . EF97  61335  LBL WORD  rs232rcv.a65:74
RSR031 . . . . . . . . . . . . . EFA9  61353  LBL WORD  rs232rcv.a65:84
RSR032 . . . . . . . . . . . . . EFB1  61361  LBL WORD  rs232rcv.a65:90
RSR050 . . . . . . . . . . . . . EFC5  61381  LBL WORD  rs232rcv.a65:106
RECERR . . . . . . . . . . . . . EFCA  61386  LBL WORD  rs232rcv.a65:111
BREAKE . . . . . . . . . . . . . EFCD  61389  LBL WORD  rs232rcv.a65:113
FRAMEE . . . . . . . . . . . . . EFD0  61392  LBL WORD  rs232rcv.a65:115
ERR232 . . . . . . . . . . . . . EFD2  61394  LBL WORD  rs232rcv.a65:116
RSR060 . . . . . . . . . . . . . EFDB  61403  LBL WORD  rs232rcv.a65:122
CKO232 . . . . . . . . . . . . . EFE1  61409  LBL WORD  rs232io.a65:5
CKO020 . . . . . . . . . . . . . EFF2  61426  LBL WORD  rs232io.a65:22
CKO030 . . . . . . . . . . . . . EFF9  61433  LBL WORD  rs232io.a65:28
CKO040 . . . . . . . . . . . . . F006  61446  LBL WORD  rs232io.a65:39
CKDSRX . . . . . . . . . . . . . F00D  61453  LBL WORD  rs232io.a65:43
CKO100 . . . . . . . . . . . . . F012  61458  LBL WORD  rs232io.a65:46
BSOBAD . . . . . . . . . . . . . F014  61460  LBL WORD  rs232io.a65:55
BSO232 . . . . . . . . . . . . . F017  61463  LBL WORD  rs232io.a65:59
BSO100 . . . . . . . . . . . . . F028  61480  LBL WORD  rs232io.a65:70
BSO110 . . . . . . . . . . . . . F02E  61486  LBL WORD  rs232io.a65:76
BSO120 . . . . . . . . . . . . . F04C  61516  LBL WORD  rs232io.a65:87
CKI232 . . . . . . . . . . . . . F04D  61517  LBL WORD  rs232io.a65:92
CKI010 . . . . . . . . . . . . . F062  61538  LBL WORD  rs232io.a65:112
CKI020 . . . . . . . . . . . . . F070  61552  LBL WORD  rs232io.a65:124
CKI080 . . . . . . . . . . . . . F077  61559  LBL WORD  rs232io.a65:130
CKI100 . . . . . . . . . . . . . F07D  61565  LBL WORD  rs232io.a65:137
CKI110 . . . . . . . . . . . . . F084  61572  LBL WORD  rs232io.a65:140
BSI232 . . . . . . . . . . . . . F086  61574  LBL WORD  rs232io.a65:147
BSI010 . . . . . . . . . . . . . F09C  61596  LBL WORD  rs232io.a65:161
RSP232 . . . . . . . . . . . . . F0A4  61604  LBL WORD  rs232io.a65:168
RSPOFF . . . . . . . . . . . . . F0AA  61610  LBL WORD  rs232io.a65:171
RSPOK. . . . . . . . . . . . . . F0BB  61627  LBL WORD  rs232io.a65:178
MS1. . . . . . . . . . . . . . . F0BD  61629  LBL WORD  msgs.a65:2
MS5. . . . . . . . . . . . . . . F0C9  61641  LBL WORD  msgs.a65:3
MS6. . . . . . . . . . . . . . . F0D4  61652  LBL WORD  msgs.a65:4
MS7. . . . . . . . . . . . . . . F0D8  61656  LBL WORD  msgs.a65:5
MS8. . . . . . . . . . . . . . . F0EB  61675  LBL WORD  msgs.a65:6
MS10 . . . . . . . . . . . . . . F106  61702  LBL WORD  msgs.a65:7
MS11 . . . . . . . . . . . . . . F10E  61710  LBL WORD  msgs.a65:8
MS21 . . . . . . . . . . . . . . F116  61718  LBL WORD  msgs.a65:9
MS17 . . . . . . . . . . . . . . F120  61728  LBL WORD  msgs.a65:10
MS18 . . . . . . . . . . . . . . F127  61735  LBL WORD  msgs.a65:11
SPMSG. . . . . . . . . . . . . . F12B  61739  LBL WORD  msgs.a65:18
MSG. . . . . . . . . . . . . . . F12F  61743  LBL WORD  msgs.a65:20
MSG10. . . . . . . . . . . . . . F13C  61756  LBL WORD  msgs.a65:27
NGETIN . . . . . . . . . . . . . F13E  61758  LBL WORD  chanio.a65:12
GN10 . . . . . . . . . . . . . . F14A  61770  LBL WORD  chanio.a65:21
GN232. . . . . . . . . . . . . . F14E  61774  LBL WORD  chanio.a65:24
GN20 . . . . . . . . . . . . . . F155  61781  LBL WORD  chanio.a65:27
NBASIN . . . . . . . . . . . . . F157  61783  LBL WORD  chanio.a65:45
BN10 . . . . . . . . . . . . . . F166  61798  LBL WORD  chanio.a65:56
BN20 . . . . . . . . . . . . . . F173  61811  LBL WORD  chanio.a65:64
JTG35. . . . . . . . . . . . . . F18D  61837  LBL WORD  chanio.a65:79
JTG36. . . . . . . . . . . . . . F193  61843  LBL WORD  chanio.a65:85
JTG37. . . . . . . . . . . . . . F196  61846  LBL WORD  chanio.a65:88
JTGET. . . . . . . . . . . . . . F199  61849  LBL WORD  chanio.a65:94
JTG10. . . . . . . . . . . . . . F1A9  61865  LBL WORD  chanio.a65:102
BN30 . . . . . . . . . . . . . . F1AD  61869  LBL WORD  chanio.a65:108
BN31 . . . . . . . . . . . . . . F1B1  61873  LBL WORD  chanio.a65:110
BN32 . . . . . . . . . . . . . . F1B3  61875  LBL WORD  chanio.a65:111
BN33 . . . . . . . . . . . . . . F1B4  61876  LBL WORD  chanio.a65:112
BN35 . . . . . . . . . . . . . . F1B5  61877  LBL WORD  chanio.a65:114
BN50 . . . . . . . . . . . . . . F1B8  61880  LBL WORD  chanio.a65:118
NBSOUT . . . . . . . . . . . . . F1CA  61898  LBL WORD  chanio.a65:137
BO10 . . . . . . . . . . . . . . F1D5  61909  LBL WORD  chanio.a65:147
BO20 . . . . . . . . . . . . . . F1DB  61915  LBL WORD  chanio.a65:157
CASOUT . . . . . . . . . . . . . F1DD  61917  LBL WORD  chanio.a65:160
JTP10. . . . . . . . . . . . . . F1F8  61944  LBL WORD  chanio.a65:186
RSTOA. . . . . . . . . . . . . . F1FC  61948  LBL WORD  chanio.a65:191
RSTOR. . . . . . . . . . . . . . F1FD  61949  LBL WORD  chanio.a65:192
RSTOR1 . . . . . . . . . . . . . F207  61959  LBL WORD  chanio.a65:199
BO50 . . . . . . . . . . . . . . F208  61960  LBL WORD  chanio.a65:203
NCHKIN . . . . . . . . . . . . . F20E  61966  LBL WORD  openchan.a65:18
JX310. . . . . . . . . . . . . . F216  61974  LBL WORD  openchan.a65:23
JX315. . . . . . . . . . . . . . F22A  61994  LBL WORD  openchan.a65:40
JX320. . . . . . . . . . . . . . F233  62003  LBL WORD  openchan.a65:46
JX330. . . . . . . . . . . . . . F237  62007  LBL WORD  openchan.a65:53
JX340. . . . . . . . . . . . . . F245  62021  LBL WORD  openchan.a65:61
JX350. . . . . . . . . . . . . . F248  62024  LBL WORD  openchan.a65:63
NCKOUT . . . . . . . . . . . . . F250  62032  LBL WORD  openchan.a65:85
CK5. . . . . . . . . . . . . . . F258  62040  LBL WORD  openchan.a65:90
CK20 . . . . . . . . . . . . . . F25F  62047  LBL WORD  openchan.a65:95
CK10 . . . . . . . . . . . . . . F262  62050  LBL WORD  openchan.a65:99
CK15 . . . . . . . . . . . . . . F26F  62063  LBL WORD  openchan.a65:110
CK30 . . . . . . . . . . . . . . F275  62069  LBL WORD  openchan.a65:114
CK40 . . . . . . . . . . . . . . F279  62073  LBL WORD  openchan.a65:119
CK50 . . . . . . . . . . . . . . F286  62086  LBL WORD  openchan.a65:128
CK60 . . . . . . . . . . . . . . F289  62089  LBL WORD  openchan.a65:130
NCLOSE . . . . . . . . . . . . . F291  62097  LBL WORD  close.a65:18
JX050. . . . . . . . . . . . . . F298  62104  LBL WORD  close.a65:23
CLS010 . . . . . . . . . . . . . F2BA  62138  LBL WORD  close.a65:49
CLS020 . . . . . . . . . . . . . F2BF  62143  LBL WORD  close.a65:52
JX115. . . . . . . . . . . . . . F2C8  62152  LBL WORD  close.a65:60
JX117. . . . . . . . . . . . . . F2E0  62176  LBL WORD  close.a65:74
JX120. . . . . . . . . . . . . . F2EE  62190  LBL WORD  close.a65:84
JX150. . . . . . . . . . . . . . F2F1  62193  LBL WORD  close.a65:90
JXRMV. . . . . . . . . . . . . . F2F2  62194  LBL WORD  close.a65:94
JX170. . . . . . . . . . . . . . F30D  62221  LBL WORD  close.a65:110
JX175. . . . . . . . . . . . . . F30E  62222  LBL WORD  close.a65:111
LOOKUP . . . . . . . . . . . . . F30F  62223  LBL WORD  close.a65:115
JLTLK. . . . . . . . . . . . . . F314  62228  LBL WORD  close.a65:118
JX600. . . . . . . . . . . . . . F316  62230  LBL WORD  close.a65:119
JZ100. . . . . . . . . . . . . . F31F  62239  LBL WORD  close.a65:127
JZ101. . . . . . . . . . . . . . F32E  62254  LBL WORD  close.a65:133
NCLALL . . . . . . . . . . . . . F32F  62255  LBL WORD  clall.a65:9
NCLRCH . . . . . . . . . . . . . F333  62259  LBL WORD  clall.a65:19
JX750. . . . . . . . . . . . . . F33C  62268  LBL WORD  clall.a65:25
CLALL2 . . . . . . . . . . . . . F343  62275  LBL WORD  clall.a65:33
NOPEN. . . . . . . . . . . . . . F34A  62282  LBL WORD  open.a65:17
OP98 . . . . . . . . . . . . . . F351  62289  LBL WORD  open.a65:22
OP100. . . . . . . . . . . . . . F359  62297  LBL WORD  open.a65:27
OP110. . . . . . . . . . . . . . F362  62306  LBL WORD  open.a65:33
OP150. . . . . . . . . . . . . . F384  62340  LBL WORD  open.a65:55
OP152. . . . . . . . . . . . . . F38B  62347  LBL WORD  open.a65:60
OP155. . . . . . . . . . . . . . F393  62355  LBL WORD  open.a65:65
OP160. . . . . . . . . . . . . . F3AC  62380  LBL WORD  open.a65:83
OP170. . . . . . . . . . . . . . F3AF  62383  LBL WORD  open.a65:85
OP200. . . . . . . . . . . . . . F3B8  62392  LBL WORD  open.a65:92
OP171. . . . . . . . . . . . . . F3C2  62402  LBL WORD  open.a65:99
OP172. . . . . . . . . . . . . . F3D1  62417  LBL WORD  open.a65:112
OP175. . . . . . . . . . . . . . F3D3  62419  LBL WORD  open.a65:113
OP180. . . . . . . . . . . . . . F3D4  62420  LBL WORD  open.a65:114
OPENI. . . . . . . . . . . . . . F3D5  62421  LBL WORD  open.a65:116
OP35 . . . . . . . . . . . . . . F3F6  62454  LBL WORD  open.a65:144
OP40 . . . . . . . . . . . . . . F3FC  62460  LBL WORD  open.a65:150
OP45 . . . . . . . . . . . . . . F406  62470  LBL WORD  open.a65:156
OPN232 . . . . . . . . . . . . . F409  62473  LBL WORD  open.a65:169
OPN020 . . . . . . . . . . . . . F40F  62479  LBL WORD  open.a65:175
OPN025 . . . . . . . . . . . . . F41D  62493  LBL WORD  open.a65:186
OPN026 . . . . . . . . . . . . . F43A  62522  LBL WORD  open.a65:206
OPN027 . . . . . . . . . . . . . F440  62528  LBL WORD  open.a65:208
OPN028 . . . . . . . . . . . . . F446  62534  LBL WORD  open.a65:210
OPN030 . . . . . . . . . . . . . F44D  62541  LBL WORD  open.a65:216
OPN050 . . . . . . . . . . . . . F45C  62556  LBL WORD  open.a65:229
OPN055 . . . . . . . . . . . . . F468  62568  LBL WORD  open.a65:236
OPN060 . . . . . . . . . . . . . F474  62580  LBL WORD  open.a65:242
MEMTCF . . . . . . . . . . . . . F47D  62589  LBL WORD  open.a65:247
CLN232 . . . . . . . . . . . . . F483  62595  LBL WORD  open.a65:254
LOADSP . . . . . . . . . . . . . F49E  62622  LBL WORD  load.a65:18
LOAD . . . . . . . . . . . . . . F4A2  62626  LBL WORD  load.a65:20
NLOAD. . . . . . . . . . . . . . F4A5  62629  LBL WORD  load.a65:22
LD10 . . . . . . . . . . . . . . F4AF  62639  LBL WORD  load.a65:29
LD20 . . . . . . . . . . . . . . F4B2  62642  LBL WORD  load.a65:31
LD25 . . . . . . . . . . . . . . F4BF  62655  LBL WORD  load.a65:42
LD30 . . . . . . . . . . . . . . F4F0  62704  LBL WORD  load.a65:69
LD40 . . . . . . . . . . . . . . F4F3  62707  LBL WORD  load.a65:71
LD45 . . . . . . . . . . . . . . F501  62721  LBL WORD  load.a65:80
LD50 . . . . . . . . . . . . . . F51C  62748  LBL WORD  load.a65:96
LD60 . . . . . . . . . . . . . . F51E  62750  LBL WORD  load.a65:97
LD64 . . . . . . . . . . . . . . F524  62756  LBL WORD  load.a65:100
LD90 . . . . . . . . . . . . . . F530  62768  LBL WORD  load.a65:107
LD100. . . . . . . . . . . . . . F533  62771  LBL WORD  load.a65:111
LD102. . . . . . . . . . . . . . F539  62777  LBL WORD  load.a65:116
LD104. . . . . . . . . . . . . . F541  62785  LBL WORD  load.a65:119
LD112. . . . . . . . . . . . . . F549  62793  LBL WORD  load.a65:123
LD150. . . . . . . . . . . . . . F556  62806  LBL WORD  load.a65:130
LD170. . . . . . . . . . . . . . F55D  62813  LBL WORD  load.a65:134
LD177. . . . . . . . . . . . . . F56C  62828  LBL WORD  load.a65:145
LD178. . . . . . . . . . . . . . F579  62841  LBL WORD  load.a65:153
LD179. . . . . . . . . . . . . . F57D  62845  LBL WORD  load.a65:156
LD180. . . . . . . . . . . . . . F5A9  62889  LBL WORD  load.a65:183
LD190. . . . . . . . . . . . . . F5AE  62894  LBL WORD  load.a65:190
LUKING . . . . . . . . . . . . . F5AF  62895  LBL WORD  load.a65:196
OUTFN. . . . . . . . . . . . . . F5C1  62913  LBL WORD  load.a65:207
LD110. . . . . . . . . . . . . . F5C7  62919  LBL WORD  load.a65:210
LD115. . . . . . . . . . . . . . F5D1  62929  LBL WORD  load.a65:216
LODING . . . . . . . . . . . . . F5D2  62930  LBL WORD  load.a65:222
LD410. . . . . . . . . . . . . . F5DA  62938  LBL WORD  load.a65:226
SAVESP . . . . . . . . . . . . . F5DD  62941  LBL WORD  save.a65:13
SAVE . . . . . . . . . . . . . . F5EA  62954  LBL WORD  save.a65:21
NSAVE. . . . . . . . . . . . . . F5ED  62957  LBL WORD  save.a65:22
SV10 . . . . . . . . . . . . . . F5F1  62961  LBL WORD  save.a65:25
SV20 . . . . . . . . . . . . . . F5F4  62964  LBL WORD  save.a65:27
SV25 . . . . . . . . . . . . . . F605  62981  LBL WORD  save.a65:37
SV30 . . . . . . . . . . . . . . F624  63012  LBL WORD  save.a65:49
BREAK. . . . . . . . . . . . . . F633  63027  LBL WORD  save.a65:56
SV40 . . . . . . . . . . . . . . F63A  63034  LBL WORD  save.a65:61
SV50 . . . . . . . . . . . . . . F63F  63039  LBL WORD  save.a65:63
CLSEI. . . . . . . . . . . . . . F642  63042  LBL WORD  save.a65:65
CUNLSN . . . . . . . . . . . . . F654  63060  LBL WORD  save.a65:74
CLSEI2 . . . . . . . . . . . . . F657  63063  LBL WORD  save.a65:76
SV100. . . . . . . . . . . . . . F659  63065  LBL WORD  save.a65:79
SV102. . . . . . . . . . . . . . F65F  63071  LBL WORD  save.a65:84
SV105. . . . . . . . . . . . . . F66C  63084  LBL WORD  save.a65:89
SV106. . . . . . . . . . . . . . F676  63094  LBL WORD  save.a65:94
SV110. . . . . . . . . . . . . . F68D  63117  LBL WORD  save.a65:107
SV115. . . . . . . . . . . . . . F68E  63118  LBL WORD  save.a65:108
SAVING . . . . . . . . . . . . . F68F  63119  LBL WORD  save.a65:113
UDTIM. . . . . . . . . . . . . . F69B  63131  LBL WORD  time.a65:18
UD20 . . . . . . . . . . . . . . F69D  63133  LBL WORD  time.a65:23
UD30 . . . . . . . . . . . . . . F6A7  63143  LBL WORD  time.a65:32
UD60 . . . . . . . . . . . . . . F6BC  63164  LBL WORD  time.a65:49
UD70 . . . . . . . . . . . . . . F6CC  63180  LBL WORD  time.a65:56
UD80 . . . . . . . . . . . . . . F6DA  63194  LBL WORD  time.a65:62
UD90 . . . . . . . . . . . . . . F6DC  63196  LBL WORD  time.a65:63
RDTIM. . . . . . . . . . . . . . F6DD  63197  LBL WORD  time.a65:65
SETTIM . . . . . . . . . . . . . F6E4  63204  LBL WORD  time.a65:70
NSTOP. . . . . . . . . . . . . . F6ED  63213  LBL WORD  errhndl.a65:10
STOP2. . . . . . . . . . . . . . F6FA  63226  LBL WORD  errhndl.a65:17
ERROR1 . . . . . . . . . . . . . F6FB  63227  LBL WORD  errhndl.a65:29
ERROR2 . . . . . . . . . . . . . F6FE  63230  LBL WORD  errhndl.a65:31
ERROR3 . . . . . . . . . . . . . F701  63233  LBL WORD  errhndl.a65:33
ERROR4 . . . . . . . . . . . . . F704  63236  LBL WORD  errhndl.a65:35
ERROR5 . . . . . . . . . . . . . F707  63239  LBL WORD  errhndl.a65:37
ERROR6 . . . . . . . . . . . . . F70A  63242  LBL WORD  errhndl.a65:39
ERROR7 . . . . . . . . . . . . . F70D  63245  LBL WORD  errhndl.a65:41
ERROR8 . . . . . . . . . . . . . F710  63248  LBL WORD  errhndl.a65:43
ERROR9 . . . . . . . . . . . . . F713  63251  LBL WORD  errhndl.a65:45
EREXIT . . . . . . . . . . . . . F729  63273  LBL WORD  errhndl.a65:60
FAH. . . . . . . . . . . . . . . F72C  63276  LBL WORD  tapefile.a65:12
FAH50. . . . . . . . . . . . . . F74B  63307  LBL WORD  tapefile.a65:34
FAH55. . . . . . . . . . . . . . F757  63319  LBL WORD  tapefile.a65:44
FAH56. . . . . . . . . . . . . . F761  63329  LBL WORD  tapefile.a65:50
FAH45. . . . . . . . . . . . . . F767  63335  LBL WORD  tapefile.a65:54
FAH40. . . . . . . . . . . . . . F769  63337  LBL WORD  tapefile.a65:57
TAPEH. . . . . . . . . . . . . . F76A  63338  LBL WORD  tapefile.a65:63
BLNK2. . . . . . . . . . . . . . F781  63361  LBL WORD  tapefile.a65:86
TH20 . . . . . . . . . . . . . . F7A5  63397  LBL WORD  tapefile.a65:119
TH30 . . . . . . . . . . . . . . F7B7  63415  LBL WORD  tapefile.a65:131
TH40 . . . . . . . . . . . . . . F7CF  63439  LBL WORD  tapefile.a65:154
ZZZ. . . . . . . . . . . . . . . F7D0  63440  LBL WORD  tapefile.a65:159
LDAD1. . . . . . . . . . . . . . F7D7  63447  LBL WORD  tapefile.a65:166
FAF. . . . . . . . . . . . . . . F7EA  63466  LBL WORD  tapefile.a65:178
FAF20. . . . . . . . . . . . . . F7F7  63479  LBL WORD  tapefile.a65:187
FAF30. . . . . . . . . . . . . . F80B  63499  LBL WORD  tapefile.a65:199
FAF40. . . . . . . . . . . . . . F80C  63500  LBL WORD  tapefile.a65:200
JTP20. . . . . . . . . . . . . . F80D  63501  LBL WORD  tapectrl.a65:2
CSTE1. . . . . . . . . . . . . . F817  63511  LBL WORD  tapectrl.a65:10
CS30 . . . . . . . . . . . . . . F81E  63518  LBL WORD  tapectrl.a65:13
CS40 . . . . . . . . . . . . . . F821  63521  LBL WORD  tapectrl.a65:14
CS10 . . . . . . . . . . . . . . F82E  63534  LBL WORD  tapectrl.a65:22
CS25 . . . . . . . . . . . . . . F836  63542  LBL WORD  tapectrl.a65:26
CSTE2. . . . . . . . . . . . . . F838  63544  LBL WORD  tapectrl.a65:31
RBLK . . . . . . . . . . . . . . F841  63553  LBL WORD  tapectrl.a65:38
TRD. . . . . . . . . . . . . . . F84A  63562  LBL WORD  tapectrl.a65:45
WBLK . . . . . . . . . . . . . . F864  63588  LBL WORD  tapectrl.a65:61
TWRT . . . . . . . . . . . . . . F867  63591  LBL WORD  tapectrl.a65:65
TWRT2. . . . . . . . . . . . . . F86B  63595  LBL WORD  tapectrl.a65:67
TWRT3. . . . . . . . . . . . . . F86E  63598  LBL WORD  tapectrl.a65:68
TAPE . . . . . . . . . . . . . . F875  63605  LBL WORD  tapectrl.a65:75
TP32 . . . . . . . . . . . . . . F8B5  63669  LBL WORD  tapectrl.a65:103
TP35 . . . . . . . . . . . . . . F8B7  63671  LBL WORD  tapectrl.a65:104
TP40 . . . . . . . . . . . . . . F8BE  63678  LBL WORD  tapectrl.a65:109
TSTOP. . . . . . . . . . . . . . F8D0  63696  LBL WORD  tapectrl.a65:120
STOP3. . . . . . . . . . . . . . F8DC  63708  LBL WORD  tapectrl.a65:133
STOP4. . . . . . . . . . . . . . F8E1  63713  LBL WORD  tapectrl.a65:135
STT1 . . . . . . . . . . . . . . F8E2  63714  LBL WORD  tapectrl.a65:140
STT2 . . . . . . . . . . . . . . F8F7  63735  LBL WORD  tapectrl.a65:153
STT3 . . . . . . . . . . . . . . F8FE  63742  LBL WORD  tapectrl.a65:158
STT4 . . . . . . . . . . . . . . F92A  63786  LBL WORD  tapectrl.a65:177
READ . . . . . . . . . . . . . . F92C  63788  LBL WORD  read.a65:35
RJDJ . . . . . . . . . . . . . . F969  63849  LBL WORD  read.a65:65
JRAD2. . . . . . . . . . . . . . F988  63880  LBL WORD  read.a65:81
SRER . . . . . . . . . . . . . . F98B  63883  LBL WORD  read.a65:83
RADX2. . . . . . . . . . . . . . F993  63891  LBL WORD  read.a65:88
RADL . . . . . . . . . . . . . . F997  63895  LBL WORD  read.a65:90
RAD5 . . . . . . . . . . . . . . F999  63897  LBL WORD  read.a65:91
RDBK . . . . . . . . . . . . . . F9AC  63916  LBL WORD  read.a65:102
RADKX. . . . . . . . . . . . . . F9BC  63932  LBL WORD  read.a65:110
RADP . . . . . . . . . . . . . . F9C9  63945  LBL WORD  read.a65:117
RADBK. . . . . . . . . . . . . . F9D2  63954  LBL WORD  read.a65:121
RAD3 . . . . . . . . . . . . . . F9D5  63957  LBL WORD  read.a65:123
ROUT2. . . . . . . . . . . . . . F9DE  63966  LBL WORD  read.a65:128
ROUT1. . . . . . . . . . . . . . F9E0  63968  LBL WORD  read.a65:129
RAD4 . . . . . . . . . . . . . . F9F7  63991  LBL WORD  read.a65:144
RAD2 . . . . . . . . . . . . . . FA10  64016  LBL WORD  read.a65:158
RAD2Y. . . . . . . . . . . . . . FA18  64024  LBL WORD  read.a65:162
RAD2X. . . . . . . . . . . . . . FA1F  64031  LBL WORD  read.a65:166
RADQ2. . . . . . . . . . . . . . FA44  64068  LBL WORD  read.a65:186
RADK . . . . . . . . . . . . . . FA53  64083  LBL WORD  read.a65:193
RDBK2. . . . . . . . . . . . . . FA5D  64093  LBL WORD  read.a65:198
RADJ . . . . . . . . . . . . . . FA60  64096  LBL WORD  read.a65:200
RD15 . . . . . . . . . . . . . . FA70  64112  LBL WORD  read.a65:230
RD12 . . . . . . . . . . . . . . FA86  64134  LBL WORD  read.a65:245
RD10 . . . . . . . . . . . . . . FA8A  64138  LBL WORD  read.a65:247
RD20 . . . . . . . . . . . . . . FA8D  64141  LBL WORD  read.a65:249
RD22 . . . . . . . . . . . . . . FAA3  64163  LBL WORD  read.a65:262
RD200. . . . . . . . . . . . . . FAA9  64169  LBL WORD  read.a65:265
RD40 . . . . . . . . . . . . . . FABA  64186  LBL WORD  read.a65:274
RD60 . . . . . . . . . . . . . . FAC0  64192  LBL WORD  read.a65:278
RD70 . . . . . . . . . . . . . . FACE  64206  LBL WORD  read.a65:286
RD80 . . . . . . . . . . . . . . FAEB  64235  LBL WORD  read.a65:302
RD58 . . . . . . . . . . . . . . FB08  64264  LBL WORD  read.a65:318
RD52 . . . . . . . . . . . . . . FB2F  64303  LBL WORD  read.a65:338
RD55 . . . . . . . . . . . . . . FB33  64307  LBL WORD  read.a65:341
RD59 . . . . . . . . . . . . . . FB3A  64314  LBL WORD  read.a65:345
RD90 . . . . . . . . . . . . . . FB43  64323  LBL WORD  read.a65:350
RD160. . . . . . . . . . . . . . FB48  64328  LBL WORD  read.a65:353
RD161. . . . . . . . . . . . . . FB4A  64330  LBL WORD  read.a65:354
RD167. . . . . . . . . . . . . . FB5C  64348  LBL WORD  read.a65:366
RD175. . . . . . . . . . . . . . FB68  64360  LBL WORD  read.a65:373
VPRTY. . . . . . . . . . . . . . FB72  64370  LBL WORD  read.a65:380
RD180. . . . . . . . . . . . . . FB8B  64395  LBL WORD  read.a65:392
RD300. . . . . . . . . . . . . . FB8E  64398  LBL WORD  read.a65:394
NEWCH. . . . . . . . . . . . . . FB97  64407  LBL WORD  read.a65:400
WRITE. . . . . . . . . . . . . . FBA6  64422  LBL WORD  write.a65:9
WRTW . . . . . . . . . . . . . . FBAD  64429  LBL WORD  write.a65:13
WRT1 . . . . . . . . . . . . . . FBAF  64431  LBL WORD  write.a65:14
WRTX . . . . . . . . . . . . . . FBB1  64433  LBL WORD  write.a65:15
WRTL3. . . . . . . . . . . . . . FBC8  64456  LBL WORD  write.a65:26
WRTN . . . . . . . . . . . . . . FBCD  64461  LBL WORD  write.a65:34
WRTN1. . . . . . . . . . . . . . FBE3  64483  LBL WORD  write.a65:45
WRTN2. . . . . . . . . . . . . . FBF0  64496  LBL WORD  write.a65:52
WRT3 . . . . . . . . . . . . . . FC09  64521  LBL WORD  write.a65:64
WRT2 . . . . . . . . . . . . . . FC0C  64524  LBL WORD  write.a65:66
WRTS . . . . . . . . . . . . . . FC16  64534  LBL WORD  write.a65:72
WRTS1. . . . . . . . . . . . . . FC22  64546  LBL WORD  write.a65:79
WRT61. . . . . . . . . . . . . . FC2C  64556  LBL WORD  write.a65:84
WRT6 . . . . . . . . . . . . . . FC30  64560  LBL WORD  write.a65:87
WRT7 . . . . . . . . . . . . . . FC3F  64575  LBL WORD  write.a65:95
WRT4 . . . . . . . . . . . . . . FC4E  64590  LBL WORD  write.a65:103
WRTBK. . . . . . . . . . . . . . FC54  64596  LBL WORD  write.a65:106
WRNC . . . . . . . . . . . . . . FC57  64599  LBL WORD  write.a65:108
WREND. . . . . . . . . . . . . . FC5E  64606  LBL WORD  write.a65:111
WRTZ . . . . . . . . . . . . . . FC6A  64618  LBL WORD  write.a65:118
TNIF . . . . . . . . . . . . . . FC93  64659  LBL WORD  write.a65:138
TNIQ . . . . . . . . . . . . . . FCB6  64694  LBL WORD  write.a65:152
STKY . . . . . . . . . . . . . . FCB8  64696  LBL WORD  write.a65:155
BSIV . . . . . . . . . . . . . . FCBD  64701  LBL WORD  write.a65:164
TNOF . . . . . . . . . . . . . . FCCA  64714  LBL WORD  write.a65:170
CMPSTE . . . . . . . . . . . . . FCD1  64721  LBL WORD  write.a65:179
INCSAL . . . . . . . . . . . . . FCDB  64731  LBL WORD  write.a65:188
INCR . . . . . . . . . . . . . . FCE1  64737  LBL WORD  write.a65:191
START. . . . . . . . . . . . . . FCE2  64738  LBL WORD  init.a65:14
START1 . . . . . . . . . . . . . FCEF  64751  LBL WORD  init.a65:21
A0INT. . . . . . . . . . . . . . FD02  64770  LBL WORD  init.a65:33
A0IN1. . . . . . . . . . . . . . FD04  64772  LBL WORD  init.a65:34
A0IN2. . . . . . . . . . . . . . FD0F  64783  LBL WORD  init.a65:39
TBLA0R . . . . . . . . . . . . . FD10  64784  LBL WORD  init.a65:41
RESTOR . . . . . . . . . . . . . FD15  64789  LBL WORD  init.a65:46
TBLA0E . . . . . . . . . . . . . FD15  64789  LBL WORD  init.a65:42
VECTOR . . . . . . . . . . . . . FD1A  64794  LBL WORD  init.a65:52
MOVOS1 . . . . . . . . . . . . . FD20  64800  LBL WORD  init.a65:55
MOVOS2 . . . . . . . . . . . . . FD27  64807  LBL WORD  init.a65:58
VECTSS . . . . . . . . . . . . . FD30  64816  LBL WORD  init.a65:64
VECTSE . . . . . . . . . . . . . FD50  64848  LBL WORD  init.a65:70
RAMTAS . . . . . . . . . . . . . FD50  64848  LBL WORD  init.a65:74
RAMTZ0 . . . . . . . . . . . . . FD53  64851  LBL WORD  init.a65:76
RAMTBT . . . . . . . . . . . . . FD67  64871  LBL WORD  init.a65:91
RAMTZ1 . . . . . . . . . . . . . FD6C  64876  LBL WORD  init.a65:96
RAMTZ2 . . . . . . . . . . . . . FD6E  64878  LBL WORD  init.a65:97
SIZE . . . . . . . . . . . . . . FD88  64904  LBL WORD  init.a65:113
BSIT . . . . . . . . . . . . . . FD9B  64923  LBL WORD  init.a65:124
IOINIT . . . . . . . . . . . . . FDA3  64931  LBL WORD  init.a65:128
IOKEYS . . . . . . . . . . . . . FDDD  64989  LBL WORD  init.a65:158
IO010. . . . . . . . . . . . . . FDEC  65004  LBL WORD  init.a65:164
IO020. . . . . . . . . . . . . . FDF3  65011  LBL WORD  init.a65:167
SETNAM . . . . . . . . . . . . . FDF9  65017  LBL WORD  init.a65:182
SETLFS . . . . . . . . . . . . . FE00  65024  LBL WORD  init.a65:187
READSS . . . . . . . . . . . . . FE07  65031  LBL WORD  init.a65:192
SETMSG . . . . . . . . . . . . . FE18  65048  LBL WORD  init.a65:201
READST . . . . . . . . . . . . . FE1A  65050  LBL WORD  init.a65:202
UDST . . . . . . . . . . . . . . FE1C  65052  LBL WORD  init.a65:203
SETTMO . . . . . . . . . . . . . FE21  65057  LBL WORD  init.a65:207
MEMTOP . . . . . . . . . . . . . FE25  65061  LBL WORD  init.a65:210
GETTOP . . . . . . . . . . . . . FE27  65063  LBL WORD  init.a65:214
SETTOP . . . . . . . . . . . . . FE2D  65069  LBL WORD  init.a65:219
MEMBOT . . . . . . . . . . . . . FE34  65076  LBL WORD  init.a65:225
SETBOT . . . . . . . . . . . . . FE3C  65084  LBL WORD  init.a65:234
NMI. . . . . . . . . . . . . . . FE43  65091  LBL WORD  rs232nmi.a65:2
NNMI . . . . . . . . . . . . . . FE47  65095  LBL WORD  rs232nmi.a65:4
NNMI10 . . . . . . . . . . . . . FE4C  65100  LBL WORD  rs232nmi.a65:9
NNMI18 . . . . . . . . . . . . . FE56  65110  LBL WORD  rs232nmi.a65:14
NNMI19 . . . . . . . . . . . . . FE5E  65118  LBL WORD  rs232nmi.a65:20
TIMB . . . . . . . . . . . . . . FE66  65126  LBL WORD  rs232nmi.a65:27
NNMI20 . . . . . . . . . . . . . FE72  65138  LBL WORD  rs232nmi.a65:35
NNMI22 . . . . . . . . . . . . . FE9A  65178  LBL WORD  rs232nmi.a65:64
NNMI25 . . . . . . . . . . . . . FE9D  65181  LBL WORD  rs232nmi.a65:66
NNMI30 . . . . . . . . . . . . . FEA3  65187  LBL WORD  rs232nmi.a65:72
NNMI40 . . . . . . . . . . . . . FEAE  65198  LBL WORD  rs232nmi.a65:81
NMIRTI . . . . . . . . . . . . . FEB6  65206  LBL WORD  rs232nmi.a65:87
PREND. . . . . . . . . . . . . . FEBC  65212  LBL WORD  rs232nmi.a65:89
BAUDO. . . . . . . . . . . . . . FEC2  65218  LBL WORD  rs232nmi.a65:99
T2NMI. . . . . . . . . . . . . . FED6  65238  LBL WORD  rs232nmi.a65:118
FLNMI. . . . . . . . . . . . . . FF07  65287  LBL WORD  rs232nmi.a65:151
POPEN. . . . . . . . . . . . . . FF2E  65326  LBL WORD  rs232nmi.a65:179
SIMIRQ . . . . . . . . . . . . . FF43  65347  LBL WORD  irqfile.a65:5
PULS . . . . . . . . . . . . . . FF48  65352  LBL WORD  irqfile.a65:11
PULS1. . . . . . . . . . . . . . FF58  65368  LBL WORD  irqfile.a65:21
PCINT. . . . . . . . . . . . . . FF5B  65371  LBL WORD  irqfile.a65:26
P0010. . . . . . . . . . . . . . FF5E  65374  LBL WORD  irqfile.a65:27
PIOKEY . . . . . . . . . . . . . FF6E  65390  LBL WORD  irqfile.a65:36
OPEN . . . . . . . . . . . . . . FFC0  65472  LBL WORD  vectors.a65:26
CLOSE. . . . . . . . . . . . . . FFC3  65475  LBL WORD  vectors.a65:27
CHKIN. . . . . . . . . . . . . . FFC6  65478  LBL WORD  vectors.a65:28
CKOUT. . . . . . . . . . . . . . FFC9  65481  LBL WORD  vectors.a65:29
CLRCH. . . . . . . . . . . . . . FFCC  65484  LBL WORD  vectors.a65:30
BASIN. . . . . . . . . . . . . . FFCF  65487  LBL WORD  vectors.a65:31
BSOUT. . . . . . . . . . . . . . FFD2  65490  LBL WORD  vectors.a65:32
STOP . . . . . . . . . . . . . . FFE1  65505  LBL WORD  vectors.a65:37
GETIN. . . . . . . . . . . . . . FFE4  65508  LBL WORD  vectors.a65:38
CLALL. . . . . . . . . . . . . . FFE7  65511  LBL WORD  vectors.a65:39
JSCROG . . . . . . . . . . . . . FFED  65517  LBL WORD  vectors.a65:41
JPLOT. . . . . . . . . . . . . . FFF0  65520  LBL WORD  vectors.a65:42
JIOBAS . . . . . . . . . . . . . FFF3  65523  LBL WORD  vectors.a65:43
